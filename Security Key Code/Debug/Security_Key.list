
Security_Key.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08007f98  08007f98  00017f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080e4  080080e4  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  080080e4  080080e4  000180e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080ec  080080ec  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  080080f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201b4  2**0
                  CONTENTS
 10 .bss          00000c9c  200001b4  200001b4  000201b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e50  20000e50  000201b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011af7  00000000  00000000  00020227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003208  00000000  00000000  00031d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e98  00000000  00000000  00034f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000aec  00000000  00000000  00035dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006102  00000000  00000000  000368ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014118  00000000  00000000  0003c9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c9f36  00000000  00000000  00050ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000040dc  00000000  00000000  0011a9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0011ead8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001b4 	.word	0x200001b4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f80 	.word	0x08007f80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001b8 	.word	0x200001b8
 80001c4:	08007f80 	.word	0x08007f80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fb72 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f814 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8a6 	bl	8000620 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d4:	f006 fbfa 	bl	8006ccc <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 80004d8:	f000 f878 	bl	80005cc <MX_UART4_Init>
  MX_MBEDTLS_Init();
 80004dc:	f004 fcfd 	bl	8004eda <MX_MBEDTLS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Operations[operation]();
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <main+0x2c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	461a      	mov	r2, r3
 80004e6:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <main+0x30>)
 80004e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004ec:	4798      	blx	r3
 80004ee:	e7f7      	b.n	80004e0 <main+0x1c>
 80004f0:	20000260 	.word	0x20000260
 80004f4:	080080d0 	.word	0x080080d0

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f007 fb1c 	bl	8007b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <SystemClock_Config+0xcc>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a21      	ldr	r2, [pc, #132]	; (80005c8 <SystemClock_Config+0xd0>)
 8000542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000554:	2301      	movs	r3, #1
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000568:	2304      	movs	r3, #4
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800056c:	23a8      	movs	r3, #168	; 0xa8
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000574:	2307      	movs	r3, #7
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f002 f8c7 	bl	8002710 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000588:	f000 f8cc 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2302      	movs	r3, #2
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000598:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2105      	movs	r1, #5
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fb28 	bl	8002c00 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005b6:	f000 f8b5 	bl	8000724 <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3750      	adds	r7, #80	; 0x50
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_UART4_Init+0x4c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_UART4_Init+0x50>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_UART4_Init+0x4c>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_UART4_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_UART4_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_UART4_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_UART4_Init+0x4c>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_UART4_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_UART4_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_UART4_Init+0x4c>)
 8000604:	f002 fd1c 	bl	8003040 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800060e:	f000 f889 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200001d0 	.word	0x200001d0
 800061c:	40004c00 	.word	0x40004c00

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <MX_GPIO_Init+0xd0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a2c      	ldr	r2, [pc, #176]	; (80006f0 <MX_GPIO_Init+0xd0>)
 8000640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <MX_GPIO_Init+0xd0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <MX_GPIO_Init+0xd0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a25      	ldr	r2, [pc, #148]	; (80006f0 <MX_GPIO_Init+0xd0>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <MX_GPIO_Init+0xd0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0xd0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xd0>)
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_GPIO_Init+0xd0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0308 	and.w	r3, r3, #8
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_GPIO_Init+0xd0>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_GPIO_Init+0xd0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006ac:	4811      	ldr	r0, [pc, #68]	; (80006f4 <MX_GPIO_Init+0xd4>)
 80006ae:	f000 fdc3 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_GPIO_Init+0xd8>)
 80006c6:	f000 fc1b 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_GPIO_Init+0xd4>)
 80006e4:	f000 fc0c 	bl	8000f00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020c00 	.word	0x40020c00
 80006f8:	40020000 	.word	0x40020000

080006fc <_write>:

/*
 * To redirect write to uart4
 */
int _write(int file, char *ptr, int len)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
#ifdef DEBUG //this is defined if we are using DEBUG build configuration
	HAL_UART_Transmit(&huart4, (uint8_t*)ptr, len, 100);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	b29a      	uxth	r2, r3
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	68b9      	ldr	r1, [r7, #8]
 8000710:	4803      	ldr	r0, [pc, #12]	; (8000720 <_write+0x24>)
 8000712:	f002 fce5 	bl	80030e0 <HAL_UART_Transmit>
	return len;
 8000716:	687b      	ldr	r3, [r7, #4]
#else //if not defined don't send any data
	return 0;
#endif
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200001d0 	.word	0x200001d0

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_MspInit+0x4c>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <HAL_MspInit+0x4c>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000744:	6453      	str	r3, [r2, #68]	; 0x44
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <HAL_MspInit+0x4c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_MspInit+0x4c>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_MspInit+0x4c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_MspInit+0x4c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a28      	ldr	r2, [pc, #160]	; (8000840 <HAL_UART_MspInit+0xc0>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d14a      	bne.n	8000838 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b27      	ldr	r3, [pc, #156]	; (8000844 <HAL_UART_MspInit+0xc4>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a26      	ldr	r2, [pc, #152]	; (8000844 <HAL_UART_MspInit+0xc4>)
 80007ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b24      	ldr	r3, [pc, #144]	; (8000844 <HAL_UART_MspInit+0xc4>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <HAL_UART_MspInit+0xc4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <HAL_UART_MspInit+0xc4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <HAL_UART_MspInit+0xc4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <HAL_UART_MspInit+0xc4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a18      	ldr	r2, [pc, #96]	; (8000844 <HAL_UART_MspInit+0xc4>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <HAL_UART_MspInit+0xc4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007f6:	2302      	movs	r3, #2
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000806:	2308      	movs	r3, #8
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <HAL_UART_MspInit+0xc8>)
 8000812:	f000 fb75 	bl	8000f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000828:	2308      	movs	r3, #8
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <HAL_UART_MspInit+0xcc>)
 8000834:	f000 fb64 	bl	8000f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40004c00 	.word	0x40004c00
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020800 	.word	0x40020800

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f9da 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <OTG_FS_IRQHandler+0x10>)
 80008aa:	f000 fe3c 	bl	8001526 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200007c8 	.word	0x200007c8

080008b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	e00a      	b.n	80008e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ca:	f3af 8000 	nop.w
 80008ce:	4601      	mov	r1, r0
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	60ba      	str	r2, [r7, #8]
 80008d6:	b2ca      	uxtb	r2, r1
 80008d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3301      	adds	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dbf0      	blt.n	80008ca <_read+0x12>
	}

return len;
 80008e8:	687b      	ldr	r3, [r7, #4]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
	return -1;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800091a:	605a      	str	r2, [r3, #4]
	return 0;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <_isatty>:

int _isatty(int file)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
	return 1;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
	return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000964:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <_sbrk+0x5c>)
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <_sbrk+0x60>)
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <_sbrk+0x64>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <_sbrk+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	429a      	cmp	r2, r3
 800098a:	d207      	bcs.n	800099c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800098c:	f007 f94c 	bl	8007c28 <__errno>
 8000990:	4603      	mov	r3, r0
 8000992:	220c      	movs	r2, #12
 8000994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	e009      	b.n	80009b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <_sbrk+0x64>)
 80009ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ae:	68fb      	ldr	r3, [r7, #12]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20020000 	.word	0x20020000
 80009bc:	00000400 	.word	0x00000400
 80009c0:	2000021c 	.word	0x2000021c
 80009c4:	20000e50 	.word	0x20000e50

080009c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <Send_to_Host>:

/*
 * Send the report to Host device
 */
static inline void Send_to_Host(Report report)
{
 80009ec:	b084      	sub	sp, #16
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	f107 0c08 	add.w	ip, r7, #8
 80009f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	send_report((uint8_t*)&report, sizeof(Report));
 80009fa:	2140      	movs	r1, #64	; 0x40
 80009fc:	f107 0008 	add.w	r0, r7, #8
 8000a00:	f006 f9dc 	bl	8006dbc <send_report>
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a0c:	b004      	add	sp, #16
 8000a0e:	4770      	bx	lr

08000a10 <no_action>:

/*
 * Don't do any action and wait for change of state of 'operation'
 */
void no_action()
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
	while(operation == NO_ACTION)
 8000a14:	bf00      	nop
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <no_action+0x1c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0fb      	beq.n	8000a16 <no_action+0x6>
//		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
		// make it sleep somehow to help reduce power
	}


}
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000260 	.word	0x20000260

08000a30 <Exchange_Public_Key>:
/*
 * Receive Public Key from Host and Then send Device Public Key
 */

void Exchange_Public_Key()
{
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b09c      	sub	sp, #112	; 0x70
 8000a34:	af0c      	add	r7, sp, #48	; 0x30
	printf("In Exchange Public Key\r\n");
 8000a36:	481f      	ldr	r0, [pc, #124]	; (8000ab4 <Exchange_Public_Key+0x84>)
 8000a38:	f006 ffa4 	bl	8007984 <puts>
	Report report;
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a40:	481d      	ldr	r0, [pc, #116]	; (8000ab8 <Exchange_Public_Key+0x88>)
 8000a42:	f000 fc12 	bl	800126a <HAL_GPIO_TogglePin>
	report.report_id = EXCHANGE_PUBLIC_KEY;
 8000a46:	2301      	movs	r3, #1
 8000a48:	703b      	strb	r3, [r7, #0]
	strcpy(report.data, "Device Public Key");
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <Exchange_Public_Key+0x8c>)
 8000a50:	461d      	mov	r5, r3
 8000a52:	4614      	mov	r4, r2
 8000a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a56:	6028      	str	r0, [r5, #0]
 8000a58:	6069      	str	r1, [r5, #4]
 8000a5a:	60aa      	str	r2, [r5, #8]
 8000a5c:	60eb      	str	r3, [r5, #12]
 8000a5e:	8823      	ldrh	r3, [r4, #0]
 8000a60:	822b      	strh	r3, [r5, #16]
		return;
	}
#endif
	//Send Public Key

	Send_to_Host(report);
 8000a62:	466d      	mov	r5, sp
 8000a64:	f107 0410 	add.w	r4, r7, #16
 8000a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a74:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a78:	463b      	mov	r3, r7
 8000a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a7c:	f7ff ffb6 	bl	80009ec <Send_to_Host>
	operation = NO_ACTION;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <Exchange_Public_Key+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
	strncpy(DEVICE_Public_Key, report.data, PUBLIC_KEY_SIZE);
 8000a86:	463b      	mov	r3, r7
 8000a88:	3302      	adds	r3, #2
 8000a8a:	2240      	movs	r2, #64	; 0x40
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <Exchange_Public_Key+0x94>)
 8000a90:	f007 f860 	bl	8007b54 <strncpy>

	//Receive Public Key from HOST
	while(operation == NO_ACTION);
 8000a94:	bf00      	nop
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <Exchange_Public_Key+0x90>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0fb      	beq.n	8000a96 <Exchange_Public_Key+0x66>

	//save Host Public Key
	strncpy(HOST_Public_Key, (char*)report_buffer, PUBLIC_KEY_SIZE);
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <Exchange_Public_Key+0x98>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2240      	movs	r2, #64	; 0x40
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4809      	ldr	r0, [pc, #36]	; (8000acc <Exchange_Public_Key+0x9c>)
 8000aa8:	f007 f854 	bl	8007b54 <strncpy>
}
 8000aac:	bf00      	nop
 8000aae:	3740      	adds	r7, #64	; 0x40
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab4:	08008008 	.word	0x08008008
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	08008020 	.word	0x08008020
 8000ac0:	20000260 	.word	0x20000260
 8000ac4:	200002a4 	.word	0x200002a4
 8000ac8:	20000218 	.word	0x20000218
 8000acc:	20000264 	.word	0x20000264

08000ad0 <Handle_Signed_String>:
	// Send to host
	Send_to_Host(string_report);
}

void Handle_Signed_String()
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <HandleFingerprint>:

/*
 * To handle FingerPrint COMMANDs
 */
void HandleFingerprint()
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <Send_Status>:

/*
 * Send status of device to HOST
 */
void Send_Status()
{
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b09e      	sub	sp, #120	; 0x78
 8000af0:	af0c      	add	r7, sp, #48	; 0x30
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af6:	4817      	ldr	r0, [pc, #92]	; (8000b54 <Send_Status+0x68>)
 8000af8:	f000 fbb7 	bl	800126a <HAL_GPIO_TogglePin>
	Report report = {STATUS_CHECK, 0, "Connected"};
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <Send_Status+0x6c>)
 8000afe:	1d3c      	adds	r4, r7, #4
 8000b00:	461d      	mov	r5, r3
 8000b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t i = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	while(i<20000)
 8000b1c:	e00e      	b.n	8000b3c <Send_Status+0x50>
	Send_to_Host(report);
 8000b1e:	466d      	mov	r5, sp
 8000b20:	f107 0414 	add.w	r4, r7, #20
 8000b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b30:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b38:	f7ff ff58 	bl	80009ec <Send_to_Host>
	while(i<20000)
 8000b3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000b40:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d9ea      	bls.n	8000b1e <Send_Status+0x32>
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3748      	adds	r7, #72	; 0x48
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bdb0      	pop	{r4, r5, r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40020c00 	.word	0x40020c00
 8000b58:	08008034 	.word	0x08008034

08000b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b60:	f7ff ff32 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b66:	490d      	ldr	r1, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b68:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f007 f853 	bl	8007c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8e:	f7ff fc99 	bl	80004c4 <main>
  bx  lr    
 8000b92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8000ba0:	080080f4 	.word	0x080080f4
  ldr r2, =_sbss
 8000ba4:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8000ba8:	20000e50 	.word	0x20000e50

08000bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <HAL_Init+0x40>)
 8000bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_Init+0x40>)
 8000bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <HAL_Init+0x40>)
 8000bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f94f 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bde:	200f      	movs	r0, #15
 8000be0:	f000 f808 	bl	8000bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be4:	f7ff fda4 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023c00 	.word	0x40023c00

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_InitTick+0x54>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x58>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f967 	bl	8000ee6 <HAL_SYSTICK_Config>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00e      	b.n	8000c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d80a      	bhi.n	8000c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f000 f92f 	bl	8000e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_InitTick+0x5c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e000      	b.n	8000c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000004 	.word	0x20000004

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008
 8000c78:	200002e4 	.word	0x200002e4

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200002e4 	.word	0x200002e4

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff ffee 	bl	8000c7c <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_Delay+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ffde 	bl	8000c7c <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4907      	ldr	r1, [pc, #28]	; (8000d78 <__NVIC_EnableIRQ+0x38>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff29 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff3e 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff31 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffa2 	bl	8000e38 <SysTick_Config>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	e16b      	b.n	80011f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 815a 	bne.w	80011ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d005      	beq.n	8000f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d130      	bne.n	8000fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	f003 0201 	and.w	r2, r3, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d017      	beq.n	8000ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d123      	bne.n	8001044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	08da      	lsrs	r2, r3, #3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3208      	adds	r2, #8
 800103e:	69b9      	ldr	r1, [r7, #24]
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0203 	and.w	r2, r3, #3
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80b4 	beq.w	80011ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b60      	ldr	r3, [pc, #384]	; (800120c <HAL_GPIO_Init+0x30c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a5f      	ldr	r2, [pc, #380]	; (800120c <HAL_GPIO_Init+0x30c>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b5d      	ldr	r3, [pc, #372]	; (800120c <HAL_GPIO_Init+0x30c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a2:	4a5b      	ldr	r2, [pc, #364]	; (8001210 <HAL_GPIO_Init+0x310>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a52      	ldr	r2, [pc, #328]	; (8001214 <HAL_GPIO_Init+0x314>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d02b      	beq.n	8001126 <HAL_GPIO_Init+0x226>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a51      	ldr	r2, [pc, #324]	; (8001218 <HAL_GPIO_Init+0x318>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d025      	beq.n	8001122 <HAL_GPIO_Init+0x222>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a50      	ldr	r2, [pc, #320]	; (800121c <HAL_GPIO_Init+0x31c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01f      	beq.n	800111e <HAL_GPIO_Init+0x21e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4f      	ldr	r2, [pc, #316]	; (8001220 <HAL_GPIO_Init+0x320>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x21a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <HAL_GPIO_Init+0x324>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x216>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4d      	ldr	r2, [pc, #308]	; (8001228 <HAL_GPIO_Init+0x328>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x212>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4c      	ldr	r2, [pc, #304]	; (800122c <HAL_GPIO_Init+0x32c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x20e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4b      	ldr	r2, [pc, #300]	; (8001230 <HAL_GPIO_Init+0x330>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x20a>
 8001106:	2307      	movs	r3, #7
 8001108:	e00e      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800110a:	2308      	movs	r3, #8
 800110c:	e00c      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800110e:	2306      	movs	r3, #6
 8001110:	e00a      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001112:	2305      	movs	r3, #5
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001116:	2304      	movs	r3, #4
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001126:	2300      	movs	r3, #0
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001138:	4935      	ldr	r1, [pc, #212]	; (8001210 <HAL_GPIO_Init+0x310>)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001146:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <HAL_GPIO_Init+0x334>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116a:	4a32      	ldr	r2, [pc, #200]	; (8001234 <HAL_GPIO_Init+0x334>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <HAL_GPIO_Init+0x334>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <HAL_GPIO_Init+0x334>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <HAL_GPIO_Init+0x334>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011be:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <HAL_GPIO_Init+0x334>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <HAL_GPIO_Init+0x334>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <HAL_GPIO_Init+0x334>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	f67f ae90 	bls.w	8000f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40013800 	.word	0x40013800
 8001214:	40020000 	.word	0x40020000
 8001218:	40020400 	.word	0x40020400
 800121c:	40020800 	.word	0x40020800
 8001220:	40020c00 	.word	0x40020c00
 8001224:	40021000 	.word	0x40021000
 8001228:	40021400 	.word	0x40021400
 800122c:	40021800 	.word	0x40021800
 8001230:	40021c00 	.word	0x40021c00
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800127c:	887a      	ldrh	r2, [r7, #2]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4013      	ands	r3, r2
 8001282:	041a      	lsls	r2, r3, #16
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43d9      	mvns	r1, r3
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	400b      	ands	r3, r1
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af02      	add	r7, sp, #8
 80012a4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e101      	b.n	80014b4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d106      	bne.n	80012d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f005 fe96 	bl	8006ffc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2203      	movs	r2, #3
 80012d4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012de:	d102      	bne.n	80012e6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fbcb 	bl	8003a86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7c1a      	ldrb	r2, [r3, #16]
 80012f8:	f88d 2000 	strb.w	r2, [sp]
 80012fc:	3304      	adds	r3, #4
 80012fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001300:	f002 faaa 	bl	8003858 <USB_CoreInit>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2202      	movs	r2, #2
 800130e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e0ce      	b.n	80014b4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f002 fbc3 	bl	8003aa8 <USB_SetCurrentMode>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2202      	movs	r2, #2
 800132c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0bf      	b.n	80014b4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e04a      	b.n	80013d0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	3315      	adds	r3, #21
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	3314      	adds	r3, #20
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	b298      	uxth	r0, r3
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	332e      	adds	r3, #46	; 0x2e
 8001376:	4602      	mov	r2, r0
 8001378:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	3318      	adds	r3, #24
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800138e:	7bfa      	ldrb	r2, [r7, #15]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	331c      	adds	r3, #28
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	3320      	adds	r3, #32
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	3324      	adds	r3, #36	; 0x24
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	3301      	adds	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	791b      	ldrb	r3, [r3, #4]
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3af      	bcc.n	800133a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e044      	b.n	800146a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	f203 2355 	addw	r3, r3, #597	; 0x255
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	440b      	add	r3, r1
 8001404:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3301      	adds	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	791b      	ldrb	r3, [r3, #4]
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3b5      	bcc.n	80013e0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7c1a      	ldrb	r2, [r3, #16]
 800147c:	f88d 2000 	strb.w	r2, [sp]
 8001480:	3304      	adds	r3, #4
 8001482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001484:	f002 fb5c 	bl	8003b40 <USB_DevInit>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2202      	movs	r2, #2
 8001492:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00c      	b.n	80014b4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 fba0 	bl	8004bf2 <USB_DevDisconnect>

  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_PCD_Start+0x1c>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e022      	b.n	800151e <HAL_PCD_Start+0x62>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d009      	beq.n	8001500 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f002 faad 	bl	8003a64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f003 fb4e 	bl	8004bb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001526:	b590      	push	{r4, r7, lr}
 8001528:	b08d      	sub	sp, #52	; 0x34
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fc0c 	bl	8004d5a <USB_GetMode>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	f040 848c 	bne.w	8001e62 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fb70 	bl	8004c34 <USB_ReadInterrupts>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8482 	beq.w	8001e60 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f003 fb5d 	bl	8004c34 <USB_ReadInterrupts>
 800157a:	4603      	mov	r3, r0
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b02      	cmp	r3, #2
 8001582:	d107      	bne.n	8001594 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695a      	ldr	r2, [r3, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f002 0202 	and.w	r2, r2, #2
 8001592:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f003 fb4b 	bl	8004c34 <USB_ReadInterrupts>
 800159e:	4603      	mov	r3, r0
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2b10      	cmp	r3, #16
 80015a6:	d161      	bne.n	800166c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699a      	ldr	r2, [r3, #24]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0210 	bic.w	r2, r2, #16
 80015b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	f003 020f 	and.w	r2, r3, #15
 80015c4:	4613      	mov	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	3304      	adds	r3, #4
 80015d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	0c5b      	lsrs	r3, r3, #17
 80015dc:	f003 030f 	and.w	r3, r3, #15
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d124      	bne.n	800162e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d035      	beq.n	800165c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fe:	b29b      	uxth	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	6a38      	ldr	r0, [r7, #32]
 8001604:	f003 f982 	bl	800490c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001614:	441a      	add	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001626:	441a      	add	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	e016      	b.n	800165c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	0c5b      	lsrs	r3, r3, #17
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	2b06      	cmp	r3, #6
 8001638:	d110      	bne.n	800165c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001640:	2208      	movs	r2, #8
 8001642:	4619      	mov	r1, r3
 8001644:	6a38      	ldr	r0, [r7, #32]
 8001646:	f003 f961 	bl	800490c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001656:	441a      	add	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	699a      	ldr	r2, [r3, #24]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0210 	orr.w	r2, r2, #16
 800166a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fadf 	bl	8004c34 <USB_ReadInterrupts>
 8001676:	4603      	mov	r3, r0
 8001678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800167c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001680:	f040 80a7 	bne.w	80017d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f003 fae4 	bl	8004c5a <USB_ReadDevAllOutEpInterrupt>
 8001692:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001694:	e099      	b.n	80017ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 808e 	beq.w	80017be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f003 fb08 	bl	8004cc2 <USB_ReadDevOutEPInterrupt>
 80016b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00c      	beq.n	80016d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	015a      	lsls	r2, r3, #5
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ca:	461a      	mov	r2, r3
 80016cc:	2301      	movs	r3, #1
 80016ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 fe8a 	bl	80023ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00c      	beq.n	80016fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ee:	461a      	mov	r2, r3
 80016f0:	2308      	movs	r3, #8
 80016f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 ff60 	bl	80025bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	d008      	beq.n	8001718 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	015a      	lsls	r2, r3, #5
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	4413      	add	r3, r2
 800170e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001712:	461a      	mov	r2, r3
 8001714:	2310      	movs	r3, #16
 8001716:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d030      	beq.n	8001784 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172a:	2b80      	cmp	r3, #128	; 0x80
 800172c:	d109      	bne.n	8001742 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800173c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001740:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001744:	4613      	mov	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	3304      	adds	r3, #4
 8001756:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	78db      	ldrb	r3, [r3, #3]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d108      	bne.n	8001772 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2200      	movs	r2, #0
 8001764:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4619      	mov	r1, r3
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f005 fd4b 	bl	8007208 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	015a      	lsls	r2, r3, #5
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800177e:	461a      	mov	r2, r3
 8001780:	2302      	movs	r3, #2
 8001782:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	2b00      	cmp	r3, #0
 800178c:	d008      	beq.n	80017a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179a:	461a      	mov	r2, r3
 800179c:	2320      	movs	r3, #32
 800179e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b6:	461a      	mov	r2, r3
 80017b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	3301      	adds	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f47f af62 	bne.w	8001696 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fa2c 	bl	8004c34 <USB_ReadInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017e6:	f040 80db 	bne.w	80019a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 fa4d 	bl	8004c8e <USB_ReadDevAllInEpInterrupt>
 80017f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017fa:	e0cd      	b.n	8001998 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 80c2 	beq.w	800198c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f003 fa73 	bl	8004cfe <USB_ReadDevInEPInterrupt>
 8001818:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d057      	beq.n	80018d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	2201      	movs	r2, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43db      	mvns	r3, r3
 800183e:	69f9      	ldr	r1, [r7, #28]
 8001840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001844:	4013      	ands	r3, r2
 8001846:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	015a      	lsls	r2, r3, #5
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	4413      	add	r3, r2
 8001850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001854:	461a      	mov	r2, r3
 8001856:	2301      	movs	r3, #1
 8001858:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	799b      	ldrb	r3, [r3, #6]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d132      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	3320      	adds	r3, #32
 8001872:	6819      	ldr	r1, [r3, #0]
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4403      	add	r3, r0
 8001882:	331c      	adds	r3, #28
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4419      	add	r1, r3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188c:	4613      	mov	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4403      	add	r3, r0
 8001896:	3320      	adds	r3, #32
 8001898:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	2b00      	cmp	r3, #0
 800189e:	d113      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x3a2>
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	4613      	mov	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4413      	add	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	3324      	adds	r3, #36	; 0x24
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d108      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80018c0:	461a      	mov	r2, r3
 80018c2:	2101      	movs	r1, #1
 80018c4:	f003 fa7a 	bl	8004dbc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	4619      	mov	r1, r3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f005 fc15 	bl	80070fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ea:	461a      	mov	r2, r3
 80018ec:	2308      	movs	r3, #8
 80018ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	4413      	add	r3, r2
 8001902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001906:	461a      	mov	r2, r3
 8001908:	2310      	movs	r3, #16
 800190a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001912:	2b00      	cmp	r3, #0
 8001914:	d008      	beq.n	8001928 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001922:	461a      	mov	r2, r3
 8001924:	2340      	movs	r3, #64	; 0x40
 8001926:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d023      	beq.n	800197a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001934:	6a38      	ldr	r0, [r7, #32]
 8001936:	f002 fa67 	bl	8003e08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800193a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193c:	4613      	mov	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	3310      	adds	r3, #16
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	3304      	adds	r3, #4
 800194c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	78db      	ldrb	r3, [r3, #3]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d108      	bne.n	8001968 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2200      	movs	r2, #0
 800195a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4619      	mov	r1, r3
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f005 fc62 	bl	800722c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001974:	461a      	mov	r2, r3
 8001976:	2302      	movs	r3, #2
 8001978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fca3 	bl	80022d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	3301      	adds	r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199a:	2b00      	cmp	r3, #0
 800199c:	f47f af2e 	bne.w	80017fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f003 f945 	bl	8004c34 <USB_ReadInterrupts>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019b4:	d122      	bne.n	80019fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d108      	bne.n	80019e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019dc:	2100      	movs	r1, #0
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fe8a 	bl	80026f8 <HAL_PCDEx_LPM_Callback>
 80019e4:	e002      	b.n	80019ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f005 fc00 	bl	80071ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 f917 	bl	8004c34 <USB_ReadInterrupts>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a10:	d112      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d102      	bne.n	8001a28 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f005 fbbc 	bl	80071a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a36:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 f8f9 	bl	8004c34 <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a4c:	f040 80b7 	bne.w	8001bbe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2110      	movs	r1, #16
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 f9cc 	bl	8003e08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a74:	e046      	b.n	8001b04 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a82:	461a      	mov	r2, r3
 8001a84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a88:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	015a      	lsls	r2, r3, #5
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a9a:	0151      	lsls	r1, r2, #5
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	440a      	add	r2, r1
 8001aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001aa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001aa8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001abc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	015a      	lsls	r2, r3, #5
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ace:	0151      	lsls	r1, r2, #5
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	440a      	add	r2, r1
 8001ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ad8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001adc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aee:	0151      	lsls	r1, r2, #5
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	440a      	add	r2, r1
 8001af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001af8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001afc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	3301      	adds	r3, #1
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	791b      	ldrb	r3, [r3, #4]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d3b2      	bcc.n	8001a76 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b1e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7bdb      	ldrb	r3, [r3, #15]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d016      	beq.n	8001b5a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b3c:	f043 030b 	orr.w	r3, r3, #11
 8001b40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	69fa      	ldr	r2, [r7, #28]
 8001b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b52:	f043 030b 	orr.w	r3, r3, #11
 8001b56:	6453      	str	r3, [r2, #68]	; 0x44
 8001b58:	e015      	b.n	8001b86 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b6c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b70:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b80:	f043 030b 	orr.w	r3, r3, #11
 8001b84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f003 f907 	bl	8004dbc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 f836 	bl	8004c34 <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bd2:	d123      	bne.n	8001c1c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 f8cc 	bl	8004d76 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 f989 	bl	8003efa <USB_GetDevSpeed>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461a      	mov	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681c      	ldr	r4, [r3, #0]
 8001bf4:	f001 f9f0 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8001bf8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4620      	mov	r0, r4
 8001c02:	f001 fe8d 	bl	8003920 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f005 faa1 	bl	800714e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 f807 	bl	8004c34 <USB_ReadInterrupts>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d10a      	bne.n	8001c46 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f005 fa7e 	bl	8007132 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f002 0208 	and.w	r2, r2, #8
 8001c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 fff2 	bl	8004c34 <USB_ReadInterrupts>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c56:	2b80      	cmp	r3, #128	; 0x80
 8001c58:	d123      	bne.n	8001ca2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c66:	2301      	movs	r3, #1
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6a:	e014      	b.n	8001c96 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 faf0 	bl	8002270 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	3301      	adds	r3, #1
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	791b      	ldrb	r3, [r3, #4]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d3e4      	bcc.n	8001c6c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 ffc4 	bl	8004c34 <USB_ReadInterrupts>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cb6:	d13c      	bne.n	8001d32 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cb8:	2301      	movs	r3, #1
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	e02b      	b.n	8001d16 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3318      	adds	r3, #24
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d115      	bne.n	8001d10 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ce4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	da12      	bge.n	8001d10 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3317      	adds	r3, #23
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4619      	mov	r1, r3
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fab0 	bl	8002270 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	3301      	adds	r3, #1
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	791b      	ldrb	r3, [r3, #4]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d3cd      	bcc.n	8001cbe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 ff7c 	bl	8004c34 <USB_ReadInterrupts>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d46:	d156      	bne.n	8001df6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d48:	2301      	movs	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4c:	e045      	b.n	8001dda <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d12e      	bne.n	8001dd4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da2b      	bge.n	8001dd4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001d88:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d121      	bne.n	8001dd4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10a      	bne.n	8001dd4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd0:	6053      	str	r3, [r2, #4]
            break;
 8001dd2:	e008      	b.n	8001de6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	791b      	ldrb	r3, [r3, #4]
 8001dde:	461a      	mov	r2, r3
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d3b3      	bcc.n	8001d4e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001df4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 ff1a 	bl	8004c34 <USB_ReadInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0a:	d10a      	bne.n	8001e22 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f005 fa1f 	bl	8007250 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 ff04 	bl	8004c34 <USB_ReadInterrupts>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d115      	bne.n	8001e62 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f005 fa0f 	bl	800726c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	e000      	b.n	8001e62 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001e60:	bf00      	nop
    }
  }
}
 8001e62:	3734      	adds	r7, #52	; 0x34
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd90      	pop	{r4, r7, pc}

08001e68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_PCD_SetAddress+0x1a>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e012      	b.n	8001ea8 <HAL_PCD_SetAddress+0x40>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 fe63 	bl	8004b64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	4608      	mov	r0, r1
 8001eba:	4611      	mov	r1, r2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	70fb      	strb	r3, [r7, #3]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	803b      	strh	r3, [r7, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	da0f      	bge.n	8001ef6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	f003 020f 	and.w	r2, r3, #15
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	3310      	adds	r3, #16
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	3304      	adds	r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	705a      	strb	r2, [r3, #1]
 8001ef4:	e00f      	b.n	8001f16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	f003 020f 	and.w	r2, r3, #15
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f22:	883a      	ldrh	r2, [r7, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	78ba      	ldrb	r2, [r7, #2]
 8001f2c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	785b      	ldrb	r3, [r3, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f40:	78bb      	ldrb	r3, [r7, #2]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d102      	bne.n	8001f4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_PCD_EP_Open+0xaa>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e00e      	b.n	8001f78 <HAL_PCD_EP_Open+0xc8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68f9      	ldr	r1, [r7, #12]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 ffeb 	bl	8003f44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8001f76:	7afb      	ldrb	r3, [r7, #11]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da0f      	bge.n	8001fb4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	f003 020f 	and.w	r2, r3, #15
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	3310      	adds	r3, #16
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3304      	adds	r3, #4
 8001faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	705a      	strb	r2, [r3, #1]
 8001fb2:	e00f      	b.n	8001fd4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_PCD_EP_Close+0x6e>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e00e      	b.n	800200c <HAL_PCD_EP_Close+0x8c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f002 f829 	bl	8004054 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	460b      	mov	r3, r1
 8002022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002024:	7afb      	ldrb	r3, [r7, #11]
 8002026:	f003 020f 	and.w	r2, r3, #15
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2200      	movs	r2, #0
 8002054:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002056:	7afb      	ldrb	r3, [r7, #11]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	b2da      	uxtb	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	799b      	ldrb	r3, [r3, #6]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	799b      	ldrb	r3, [r3, #6]
 8002078:	461a      	mov	r2, r3
 800207a:	6979      	ldr	r1, [r7, #20]
 800207c:	f002 f8c6 	bl	800420c <USB_EPStartXfer>

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	460b      	mov	r3, r1
 8002098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800209a:	7afb      	ldrb	r3, [r7, #11]
 800209c:	f003 020f 	and.w	r2, r3, #15
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	3310      	adds	r3, #16
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4413      	add	r3, r2
 80020ae:	3304      	adds	r3, #4
 80020b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2200      	movs	r2, #0
 80020c2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2201      	movs	r2, #1
 80020c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ca:	7afb      	ldrb	r3, [r7, #11]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	799b      	ldrb	r3, [r3, #6]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d102      	bne.n	80020e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	799b      	ldrb	r3, [r3, #6]
 80020ec:	461a      	mov	r2, r3
 80020ee:	6979      	ldr	r1, [r7, #20]
 80020f0:	f002 f88c 	bl	800420c <USB_EPStartXfer>

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	7912      	ldrb	r2, [r2, #4]
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e04f      	b.n	80021bc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800211c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002120:	2b00      	cmp	r3, #0
 8002122:	da0f      	bge.n	8002144 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	f003 020f 	and.w	r2, r3, #15
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	3310      	adds	r3, #16
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	3304      	adds	r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	705a      	strb	r2, [r3, #1]
 8002142:	e00d      	b.n	8002160 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	3304      	adds	r3, #4
 8002158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2201      	movs	r2, #1
 8002164:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	b2da      	uxtb	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_PCD_EP_SetStall+0x82>
 800217c:	2302      	movs	r3, #2
 800217e:	e01d      	b.n	80021bc <HAL_PCD_EP_SetStall+0xbe>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68f9      	ldr	r1, [r7, #12]
 800218e:	4618      	mov	r0, r3
 8002190:	f002 fc14 	bl	80049bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7999      	ldrb	r1, [r3, #6]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80021ac:	461a      	mov	r2, r3
 80021ae:	f002 fe05 	bl	8004dbc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	7912      	ldrb	r2, [r2, #4]
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e042      	b.n	8002268 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	da0f      	bge.n	800220a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 020f 	and.w	r2, r3, #15
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	3310      	adds	r3, #16
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	3304      	adds	r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	705a      	strb	r2, [r3, #1]
 8002208:	e00f      	b.n	800222a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 020f 	and.w	r2, r3, #15
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	3304      	adds	r3, #4
 8002222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	b2da      	uxtb	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_PCD_EP_ClrStall+0x86>
 8002246:	2302      	movs	r3, #2
 8002248:	e00e      	b.n	8002268 <HAL_PCD_EP_ClrStall+0xa4>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	4618      	mov	r0, r3
 800225a:	f002 fc1d 	bl	8004a98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800227c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002280:	2b00      	cmp	r3, #0
 8002282:	da0c      	bge.n	800229e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 020f 	and.w	r2, r3, #15
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	3310      	adds	r3, #16
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	3304      	adds	r3, #4
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e00c      	b.n	80022b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	f003 020f 	and.w	r2, r3, #15
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	3304      	adds	r3, #4
 80022b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68f9      	ldr	r1, [r7, #12]
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fa3c 	bl	800473c <USB_EPStopXfer>
 80022c4:	4603      	mov	r3, r0
 80022c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80022c8:	7afb      	ldrb	r3, [r7, #11]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b08a      	sub	sp, #40	; 0x28
 80022d6:	af02      	add	r7, sp, #8
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	3310      	adds	r3, #16
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	3304      	adds	r3, #4
 80022f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	429a      	cmp	r2, r3
 8002304:	d901      	bls.n	800230a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e06b      	b.n	80023e2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	d902      	bls.n	8002326 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3303      	adds	r3, #3
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800232e:	e02a      	b.n	8002386 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	429a      	cmp	r2, r3
 8002344:	d902      	bls.n	800234c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	3303      	adds	r3, #3
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	68d9      	ldr	r1, [r3, #12]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	4603      	mov	r3, r0
 8002368:	6978      	ldr	r0, [r7, #20]
 800236a:	f002 fa91 	bl	8004890 <USB_WritePacket>

    ep->xfer_buff  += len;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	441a      	add	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	441a      	add	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	429a      	cmp	r2, r3
 800239a:	d809      	bhi.n	80023b0 <PCD_WriteEmptyTxFifo+0xde>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d203      	bcs.n	80023b0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1bf      	bne.n	8002330 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d811      	bhi.n	80023e0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	2201      	movs	r2, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	6939      	ldr	r1, [r7, #16]
 80023d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023dc:	4013      	ands	r3, r2
 80023de:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	333c      	adds	r3, #60	; 0x3c
 8002404:	3304      	adds	r3, #4
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4413      	add	r3, r2
 8002412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	799b      	ldrb	r3, [r3, #6]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d17b      	bne.n	800251a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d015      	beq.n	8002458 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	4a61      	ldr	r2, [pc, #388]	; (80025b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	f240 80b9 	bls.w	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80b3 	beq.w	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4413      	add	r3, r2
 800244a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244e:	461a      	mov	r2, r3
 8002450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002454:	6093      	str	r3, [r2, #8]
 8002456:	e0a7      	b.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4413      	add	r3, r2
 800246a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246e:	461a      	mov	r2, r3
 8002470:	2320      	movs	r3, #32
 8002472:	6093      	str	r3, [r2, #8]
 8002474:	e098      	b.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800247c:	2b00      	cmp	r3, #0
 800247e:	f040 8093 	bne.w	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	4a4b      	ldr	r2, [pc, #300]	; (80025b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d90f      	bls.n	80024aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a0:	461a      	mov	r2, r3
 80024a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a6:	6093      	str	r3, [r2, #8]
 80024a8:	e07e      	b.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	3304      	adds	r3, #4
 80024be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a1a      	ldr	r2, [r3, #32]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	0159      	lsls	r1, r3, #5
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	440b      	add	r3, r1
 80024cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d6:	1ad2      	subs	r2, r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d114      	bne.n	800250c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80024f4:	461a      	mov	r2, r3
 80024f6:	2101      	movs	r1, #1
 80024f8:	f002 fc60 	bl	8004dbc <USB_EP0_OutStart>
 80024fc:	e006      	b.n	800250c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	441a      	add	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	4619      	mov	r1, r3
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f004 fdd8 	bl	80070c8 <HAL_PCD_DataOutStageCallback>
 8002518:	e046      	b.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	4a26      	ldr	r2, [pc, #152]	; (80025b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d124      	bne.n	800256c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002538:	461a      	mov	r2, r3
 800253a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800253e:	6093      	str	r3, [r2, #8]
 8002540:	e032      	b.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4413      	add	r3, r2
 8002554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002558:	461a      	mov	r2, r3
 800255a:	2320      	movs	r3, #32
 800255c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4619      	mov	r1, r3
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f004 fdaf 	bl	80070c8 <HAL_PCD_DataOutStageCallback>
 800256a:	e01d      	b.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d114      	bne.n	800259c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d108      	bne.n	800259c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002594:	461a      	mov	r2, r3
 8002596:	2100      	movs	r1, #0
 8002598:	f002 fc10 	bl	8004dbc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f004 fd90 	bl	80070c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3720      	adds	r7, #32
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	4f54300a 	.word	0x4f54300a
 80025b8:	4f54310a 	.word	0x4f54310a

080025bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	333c      	adds	r3, #60	; 0x3c
 80025d4:	3304      	adds	r3, #4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4a15      	ldr	r2, [pc, #84]	; (8002644 <PCD_EP_OutSetupPacket_int+0x88>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d90e      	bls.n	8002610 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4413      	add	r3, r2
 8002604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002608:	461a      	mov	r2, r3
 800260a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800260e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f004 fd47 	bl	80070a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <PCD_EP_OutSetupPacket_int+0x88>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d90c      	bls.n	8002638 <PCD_EP_OutSetupPacket_int+0x7c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	799b      	ldrb	r3, [r3, #6]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d108      	bne.n	8002638 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002630:	461a      	mov	r2, r3
 8002632:	2101      	movs	r1, #1
 8002634:	f002 fbc2 	bl	8004dbc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	4f54300a 	.word	0x4f54300a

08002648 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	70fb      	strb	r3, [r7, #3]
 8002654:	4613      	mov	r3, r2
 8002656:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d107      	bne.n	8002676 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002666:	883b      	ldrh	r3, [r7, #0]
 8002668:	0419      	lsls	r1, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	430a      	orrs	r2, r1
 8002672:	629a      	str	r2, [r3, #40]	; 0x28
 8002674:	e028      	b.n	80026c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	0c1b      	lsrs	r3, r3, #16
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	4413      	add	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002684:	2300      	movs	r3, #0
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	e00d      	b.n	80026a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	3340      	adds	r3, #64	; 0x40
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	4413      	add	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	3301      	adds	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d3ec      	bcc.n	800268a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026b0:	883b      	ldrh	r3, [r7, #0]
 80026b2:	0418      	lsls	r0, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	4302      	orrs	r2, r0
 80026c0:	3340      	adds	r3, #64	; 0x40
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e267      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d075      	beq.n	800281a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800272e:	4b88      	ldr	r3, [pc, #544]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b04      	cmp	r3, #4
 8002738:	d00c      	beq.n	8002754 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800273a:	4b85      	ldr	r3, [pc, #532]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002742:	2b08      	cmp	r3, #8
 8002744:	d112      	bne.n	800276c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002746:	4b82      	ldr	r3, [pc, #520]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002752:	d10b      	bne.n	800276c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	4b7e      	ldr	r3, [pc, #504]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d05b      	beq.n	8002818 <HAL_RCC_OscConfig+0x108>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d157      	bne.n	8002818 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e242      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002774:	d106      	bne.n	8002784 <HAL_RCC_OscConfig+0x74>
 8002776:	4b76      	ldr	r3, [pc, #472]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a75      	ldr	r2, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e01d      	b.n	80027c0 <HAL_RCC_OscConfig+0xb0>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x98>
 800278e:	4b70      	ldr	r3, [pc, #448]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6f      	ldr	r2, [pc, #444]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 8002794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	4b6d      	ldr	r3, [pc, #436]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a6c      	ldr	r2, [pc, #432]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e00b      	b.n	80027c0 <HAL_RCC_OscConfig+0xb0>
 80027a8:	4b69      	ldr	r3, [pc, #420]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a68      	ldr	r2, [pc, #416]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 80027ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	4b66      	ldr	r3, [pc, #408]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a65      	ldr	r2, [pc, #404]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 80027ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d013      	beq.n	80027f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe fa58 	bl	8000c7c <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d0:	f7fe fa54 	bl	8000c7c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e207      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b5b      	ldr	r3, [pc, #364]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0xc0>
 80027ee:	e014      	b.n	800281a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7fe fa44 	bl	8000c7c <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f8:	f7fe fa40 	bl	8000c7c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e1f3      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280a:	4b51      	ldr	r3, [pc, #324]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0xe8>
 8002816:	e000      	b.n	800281a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d063      	beq.n	80028ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002826:	4b4a      	ldr	r3, [pc, #296]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00b      	beq.n	800284a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800283a:	2b08      	cmp	r3, #8
 800283c:	d11c      	bne.n	8002878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283e:	4b44      	ldr	r3, [pc, #272]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d116      	bne.n	8002878 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284a:	4b41      	ldr	r3, [pc, #260]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_RCC_OscConfig+0x152>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d001      	beq.n	8002862 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e1c7      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002862:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4937      	ldr	r1, [pc, #220]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002876:	e03a      	b.n	80028ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d020      	beq.n	80028c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002880:	4b34      	ldr	r3, [pc, #208]	; (8002954 <HAL_RCC_OscConfig+0x244>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe f9f9 	bl	8000c7c <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288e:	f7fe f9f5 	bl	8000c7c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e1a8      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ac:	4b28      	ldr	r3, [pc, #160]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4925      	ldr	r1, [pc, #148]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	600b      	str	r3, [r1, #0]
 80028c0:	e015      	b.n	80028ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c2:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCC_OscConfig+0x244>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe f9d8 	bl	8000c7c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d0:	f7fe f9d4 	bl	8000c7c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e187      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e2:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d036      	beq.n	8002968 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <HAL_RCC_OscConfig+0x248>)
 8002904:	2201      	movs	r2, #1
 8002906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe f9b8 	bl	8000c7c <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002910:	f7fe f9b4 	bl	8000c7c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e167      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_OscConfig+0x240>)
 8002924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x200>
 800292e:	e01b      	b.n	8002968 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_RCC_OscConfig+0x248>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002936:	f7fe f9a1 	bl	8000c7c <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293c:	e00e      	b.n	800295c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800293e:	f7fe f99d 	bl	8000c7c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d907      	bls.n	800295c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e150      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
 8002950:	40023800 	.word	0x40023800
 8002954:	42470000 	.word	0x42470000
 8002958:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295c:	4b88      	ldr	r3, [pc, #544]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 800295e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1ea      	bne.n	800293e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8097 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297a:	4b81      	ldr	r3, [pc, #516]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10f      	bne.n	80029a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	4b7d      	ldr	r3, [pc, #500]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a7c      	ldr	r2, [pc, #496]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b7a      	ldr	r3, [pc, #488]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a2:	2301      	movs	r3, #1
 80029a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	4b77      	ldr	r3, [pc, #476]	; (8002b84 <HAL_RCC_OscConfig+0x474>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d118      	bne.n	80029e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b2:	4b74      	ldr	r3, [pc, #464]	; (8002b84 <HAL_RCC_OscConfig+0x474>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a73      	ldr	r2, [pc, #460]	; (8002b84 <HAL_RCC_OscConfig+0x474>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029be:	f7fe f95d 	bl	8000c7c <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c6:	f7fe f959 	bl	8000c7c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e10c      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <HAL_RCC_OscConfig+0x474>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x2ea>
 80029ec:	4b64      	ldr	r3, [pc, #400]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	4a63      	ldr	r2, [pc, #396]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70
 80029f8:	e01c      	b.n	8002a34 <HAL_RCC_OscConfig+0x324>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x30c>
 8002a02:	4b5f      	ldr	r3, [pc, #380]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	4a5e      	ldr	r2, [pc, #376]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0e:	4b5c      	ldr	r3, [pc, #368]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	4a5b      	ldr	r2, [pc, #364]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0x324>
 8002a1c:	4b58      	ldr	r3, [pc, #352]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a57      	ldr	r2, [pc, #348]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
 8002a28:	4b55      	ldr	r3, [pc, #340]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	4a54      	ldr	r2, [pc, #336]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	f023 0304 	bic.w	r3, r3, #4
 8002a32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d015      	beq.n	8002a68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3c:	f7fe f91e 	bl	8000c7c <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a44:	f7fe f91a 	bl	8000c7c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e0cb      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5a:	4b49      	ldr	r3, [pc, #292]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0ee      	beq.n	8002a44 <HAL_RCC_OscConfig+0x334>
 8002a66:	e014      	b.n	8002a92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a68:	f7fe f908 	bl	8000c7c <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a70:	f7fe f904 	bl	8000c7c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0b5      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a86:	4b3e      	ldr	r3, [pc, #248]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1ee      	bne.n	8002a70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a98:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	4a38      	ldr	r2, [pc, #224]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80a1 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aae:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d05c      	beq.n	8002b74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d141      	bne.n	8002b46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_RCC_OscConfig+0x478>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe f8d8 	bl	8000c7c <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe f8d4 	bl	8000c7c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e087      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	019b      	lsls	r3, r3, #6
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	085b      	lsrs	r3, r3, #1
 8002b06:	3b01      	subs	r3, #1
 8002b08:	041b      	lsls	r3, r3, #16
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	491b      	ldr	r1, [pc, #108]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_RCC_OscConfig+0x478>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1e:	f7fe f8ad 	bl	8000c7c <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b26:	f7fe f8a9 	bl	8000c7c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e05c      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x416>
 8002b44:	e054      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <HAL_RCC_OscConfig+0x478>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe f896 	bl	8000c7c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe f892 	bl	8000c7c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e045      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_RCC_OscConfig+0x470>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x444>
 8002b72:	e03d      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d107      	bne.n	8002b8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e038      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40007000 	.word	0x40007000
 8002b88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_RCC_OscConfig+0x4ec>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d028      	beq.n	8002bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d121      	bne.n	8002bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d11a      	bne.n	8002bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d111      	bne.n	8002bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800

08002c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0cc      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c14:	4b68      	ldr	r3, [pc, #416]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d90c      	bls.n	8002c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b65      	ldr	r3, [pc, #404]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b63      	ldr	r3, [pc, #396]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0b8      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c54:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c6c:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a52      	ldr	r2, [pc, #328]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c78:	4b50      	ldr	r3, [pc, #320]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	494d      	ldr	r1, [pc, #308]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d044      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d119      	bne.n	8002cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e07f      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbe:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e06f      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cce:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e067      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cde:	4b37      	ldr	r3, [pc, #220]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f023 0203 	bic.w	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4934      	ldr	r1, [pc, #208]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf0:	f7fd ffc4 	bl	8000c7c <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf8:	f7fd ffc0 	bl	8000c7c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e04f      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 020c 	and.w	r2, r3, #12
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d1eb      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d20:	4b25      	ldr	r3, [pc, #148]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d20c      	bcs.n	8002d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e032      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4916      	ldr	r1, [pc, #88]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	490e      	ldr	r1, [pc, #56]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d86:	f000 f821 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	490a      	ldr	r1, [pc, #40]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d98:	5ccb      	ldrb	r3, [r1, r3]
 8002d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9e:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd ff24 	bl	8000bf4 <HAL_InitTick>

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023c00 	.word	0x40023c00
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	080080b8 	.word	0x080080b8
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	20000004 	.word	0x20000004

08002dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd0:	b094      	sub	sp, #80	; 0x50
 8002dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd8:	2300      	movs	r3, #0
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ddc:	2300      	movs	r3, #0
 8002dde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de4:	4b79      	ldr	r3, [pc, #484]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d00d      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x40>
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	f200 80e1 	bhi.w	8002fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x34>
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d003      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dfe:	e0db      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e00:	4b73      	ldr	r3, [pc, #460]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e04:	e0db      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e06:	4b73      	ldr	r3, [pc, #460]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e0a:	e0d8      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e0c:	4b6f      	ldr	r3, [pc, #444]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e16:	4b6d      	ldr	r3, [pc, #436]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d063      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e22:	4b6a      	ldr	r3, [pc, #424]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	099b      	lsrs	r3, r3, #6
 8002e28:	2200      	movs	r2, #0
 8002e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e34:	633b      	str	r3, [r7, #48]	; 0x30
 8002e36:	2300      	movs	r3, #0
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e3e:	4622      	mov	r2, r4
 8002e40:	462b      	mov	r3, r5
 8002e42:	f04f 0000 	mov.w	r0, #0
 8002e46:	f04f 0100 	mov.w	r1, #0
 8002e4a:	0159      	lsls	r1, r3, #5
 8002e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e50:	0150      	lsls	r0, r2, #5
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4621      	mov	r1, r4
 8002e58:	1a51      	subs	r1, r2, r1
 8002e5a:	6139      	str	r1, [r7, #16]
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e70:	4659      	mov	r1, fp
 8002e72:	018b      	lsls	r3, r1, #6
 8002e74:	4651      	mov	r1, sl
 8002e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e7a:	4651      	mov	r1, sl
 8002e7c:	018a      	lsls	r2, r1, #6
 8002e7e:	4651      	mov	r1, sl
 8002e80:	ebb2 0801 	subs.w	r8, r2, r1
 8002e84:	4659      	mov	r1, fp
 8002e86:	eb63 0901 	sbc.w	r9, r3, r1
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e9e:	4690      	mov	r8, r2
 8002ea0:	4699      	mov	r9, r3
 8002ea2:	4623      	mov	r3, r4
 8002ea4:	eb18 0303 	adds.w	r3, r8, r3
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	462b      	mov	r3, r5
 8002eac:	eb49 0303 	adc.w	r3, r9, r3
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	024b      	lsls	r3, r1, #9
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ec8:	4621      	mov	r1, r4
 8002eca:	024a      	lsls	r2, r1, #9
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002edc:	f7fd f974 	bl	80001c8 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ee8:	e058      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eea:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
 8002f00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f04:	4642      	mov	r2, r8
 8002f06:	464b      	mov	r3, r9
 8002f08:	f04f 0000 	mov.w	r0, #0
 8002f0c:	f04f 0100 	mov.w	r1, #0
 8002f10:	0159      	lsls	r1, r3, #5
 8002f12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f16:	0150      	lsls	r0, r2, #5
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f22:	4649      	mov	r1, r9
 8002f24:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f3c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f40:	eb63 050b 	sbc.w	r5, r3, fp
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	00eb      	lsls	r3, r5, #3
 8002f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f52:	00e2      	lsls	r2, r4, #3
 8002f54:	4614      	mov	r4, r2
 8002f56:	461d      	mov	r5, r3
 8002f58:	4643      	mov	r3, r8
 8002f5a:	18e3      	adds	r3, r4, r3
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	464b      	mov	r3, r9
 8002f60:	eb45 0303 	adc.w	r3, r5, r3
 8002f64:	607b      	str	r3, [r7, #4]
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f72:	4629      	mov	r1, r5
 8002f74:	028b      	lsls	r3, r1, #10
 8002f76:	4621      	mov	r1, r4
 8002f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	028a      	lsls	r2, r1, #10
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f86:	2200      	movs	r2, #0
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	61fa      	str	r2, [r7, #28]
 8002f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f90:	f7fd f91a 	bl	80001c8 <__aeabi_uldivmod>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4613      	mov	r3, r2
 8002f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	0c1b      	lsrs	r3, r3, #16
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fb6:	e002      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3750      	adds	r7, #80	; 0x50
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	007a1200 	.word	0x007a1200

08002fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <HAL_RCC_GetHCLKFreq+0x14>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000000 	.word	0x20000000

08002ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ff4:	f7ff fff0 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	0a9b      	lsrs	r3, r3, #10
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4903      	ldr	r1, [pc, #12]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40023800 	.word	0x40023800
 8003014:	080080c8 	.word	0x080080c8

08003018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800301c:	f7ff ffdc 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0b5b      	lsrs	r3, r3, #13
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4903      	ldr	r1, [pc, #12]	; (800303c <HAL_RCC_GetPCLK2Freq+0x24>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40023800 	.word	0x40023800
 800303c:	080080c8 	.word	0x080080c8

08003040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e042      	b.n	80030d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd fb8a 	bl	8000780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	; 0x24
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f973 	bl	8003370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d175      	bne.n	80031ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_UART_Transmit+0x2c>
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e06e      	b.n	80031ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2221      	movs	r2, #33	; 0x21
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800311e:	f7fd fdad 	bl	8000c7c <HAL_GetTick>
 8003122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	88fa      	ldrh	r2, [r7, #6]
 800312e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003138:	d108      	bne.n	800314c <HAL_UART_Transmit+0x6c>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d104      	bne.n	800314c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	e003      	b.n	8003154 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003154:	e02e      	b.n	80031b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2200      	movs	r2, #0
 800315e:	2180      	movs	r1, #128	; 0x80
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f848 	bl	80031f6 <UART_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e03a      	b.n	80031ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10b      	bne.n	8003196 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800318c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	3302      	adds	r3, #2
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	e007      	b.n	80031a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	3301      	adds	r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1cb      	bne.n	8003156 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2200      	movs	r2, #0
 80031c6:	2140      	movs	r1, #64	; 0x40
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f814 	bl	80031f6 <UART_WaitOnFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e006      	b.n	80031ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e000      	b.n	80031ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
  }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003206:	e03b      	b.n	8003280 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320e:	d037      	beq.n	8003280 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003210:	f7fd fd34 	bl	8000c7c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	6a3a      	ldr	r2, [r7, #32]
 800321c:	429a      	cmp	r2, r3
 800321e:	d302      	bcc.n	8003226 <UART_WaitOnFlagUntilTimeout+0x30>
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e03a      	b.n	80032a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d023      	beq.n	8003280 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b80      	cmp	r3, #128	; 0x80
 800323c:	d020      	beq.n	8003280 <UART_WaitOnFlagUntilTimeout+0x8a>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	d01d      	beq.n	8003280 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b08      	cmp	r3, #8
 8003250:	d116      	bne.n	8003280 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f81d 	bl	80032a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2208      	movs	r2, #8
 8003272:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e00f      	b.n	80032a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4013      	ands	r3, r2
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	429a      	cmp	r2, r3
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	429a      	cmp	r2, r3
 800329c:	d0b4      	beq.n	8003208 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b095      	sub	sp, #84	; 0x54
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	330c      	adds	r3, #12
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ba:	e853 3f00 	ldrex	r3, [r3]
 80032be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	330c      	adds	r3, #12
 80032ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032d0:	643a      	str	r2, [r7, #64]	; 0x40
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032d8:	e841 2300 	strex	r3, r2, [r1]
 80032dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e5      	bne.n	80032b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3314      	adds	r3, #20
 80032ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	e853 3f00 	ldrex	r3, [r3]
 80032f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3314      	adds	r3, #20
 8003302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003304:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800330a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e5      	bne.n	80032e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	2b01      	cmp	r3, #1
 800331e:	d119      	bne.n	8003354 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	330c      	adds	r3, #12
 8003326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	e853 3f00 	ldrex	r3, [r3]
 800332e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f023 0310 	bic.w	r3, r3, #16
 8003336:	647b      	str	r3, [r7, #68]	; 0x44
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003340:	61ba      	str	r2, [r7, #24]
 8003342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003344:	6979      	ldr	r1, [r7, #20]
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	e841 2300 	strex	r3, r2, [r1]
 800334c:	613b      	str	r3, [r7, #16]
   return(result);
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e5      	bne.n	8003320 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003362:	bf00      	nop
 8003364:	3754      	adds	r7, #84	; 0x54
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b0c0      	sub	sp, #256	; 0x100
 8003376:	af00      	add	r7, sp, #0
 8003378:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338c:	68d9      	ldr	r1, [r3, #12]
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	ea40 0301 	orr.w	r3, r0, r1
 8003398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033c8:	f021 010c 	bic.w	r1, r1, #12
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033d6:	430b      	orrs	r3, r1
 80033d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ea:	6999      	ldr	r1, [r3, #24]
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	ea40 0301 	orr.w	r3, r0, r1
 80033f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b8f      	ldr	r3, [pc, #572]	; (800363c <UART_SetConfig+0x2cc>)
 8003400:	429a      	cmp	r2, r3
 8003402:	d005      	beq.n	8003410 <UART_SetConfig+0xa0>
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b8d      	ldr	r3, [pc, #564]	; (8003640 <UART_SetConfig+0x2d0>)
 800340c:	429a      	cmp	r2, r3
 800340e:	d104      	bne.n	800341a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003410:	f7ff fe02 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8003414:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003418:	e003      	b.n	8003422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800341a:	f7ff fde9 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 800341e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342c:	f040 810c 	bne.w	8003648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003434:	2200      	movs	r2, #0
 8003436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800343a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800343e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003442:	4622      	mov	r2, r4
 8003444:	462b      	mov	r3, r5
 8003446:	1891      	adds	r1, r2, r2
 8003448:	65b9      	str	r1, [r7, #88]	; 0x58
 800344a:	415b      	adcs	r3, r3
 800344c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800344e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003452:	4621      	mov	r1, r4
 8003454:	eb12 0801 	adds.w	r8, r2, r1
 8003458:	4629      	mov	r1, r5
 800345a:	eb43 0901 	adc.w	r9, r3, r1
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003472:	4690      	mov	r8, r2
 8003474:	4699      	mov	r9, r3
 8003476:	4623      	mov	r3, r4
 8003478:	eb18 0303 	adds.w	r3, r8, r3
 800347c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003480:	462b      	mov	r3, r5
 8003482:	eb49 0303 	adc.w	r3, r9, r3
 8003486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003496:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800349a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800349e:	460b      	mov	r3, r1
 80034a0:	18db      	adds	r3, r3, r3
 80034a2:	653b      	str	r3, [r7, #80]	; 0x50
 80034a4:	4613      	mov	r3, r2
 80034a6:	eb42 0303 	adc.w	r3, r2, r3
 80034aa:	657b      	str	r3, [r7, #84]	; 0x54
 80034ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034b4:	f7fc fe88 	bl	80001c8 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4b61      	ldr	r3, [pc, #388]	; (8003644 <UART_SetConfig+0x2d4>)
 80034be:	fba3 2302 	umull	r2, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	011c      	lsls	r4, r3, #4
 80034c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	1891      	adds	r1, r2, r2
 80034de:	64b9      	str	r1, [r7, #72]	; 0x48
 80034e0:	415b      	adcs	r3, r3
 80034e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034e8:	4641      	mov	r1, r8
 80034ea:	eb12 0a01 	adds.w	sl, r2, r1
 80034ee:	4649      	mov	r1, r9
 80034f0:	eb43 0b01 	adc.w	fp, r3, r1
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003508:	4692      	mov	sl, r2
 800350a:	469b      	mov	fp, r3
 800350c:	4643      	mov	r3, r8
 800350e:	eb1a 0303 	adds.w	r3, sl, r3
 8003512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003516:	464b      	mov	r3, r9
 8003518:	eb4b 0303 	adc.w	r3, fp, r3
 800351c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800352c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003534:	460b      	mov	r3, r1
 8003536:	18db      	adds	r3, r3, r3
 8003538:	643b      	str	r3, [r7, #64]	; 0x40
 800353a:	4613      	mov	r3, r2
 800353c:	eb42 0303 	adc.w	r3, r2, r3
 8003540:	647b      	str	r3, [r7, #68]	; 0x44
 8003542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800354a:	f7fc fe3d 	bl	80001c8 <__aeabi_uldivmod>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4611      	mov	r1, r2
 8003554:	4b3b      	ldr	r3, [pc, #236]	; (8003644 <UART_SetConfig+0x2d4>)
 8003556:	fba3 2301 	umull	r2, r3, r3, r1
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2264      	movs	r2, #100	; 0x64
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	1acb      	subs	r3, r1, r3
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800356a:	4b36      	ldr	r3, [pc, #216]	; (8003644 <UART_SetConfig+0x2d4>)
 800356c:	fba3 2302 	umull	r2, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003578:	441c      	add	r4, r3
 800357a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003584:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800358c:	4642      	mov	r2, r8
 800358e:	464b      	mov	r3, r9
 8003590:	1891      	adds	r1, r2, r2
 8003592:	63b9      	str	r1, [r7, #56]	; 0x38
 8003594:	415b      	adcs	r3, r3
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800359c:	4641      	mov	r1, r8
 800359e:	1851      	adds	r1, r2, r1
 80035a0:	6339      	str	r1, [r7, #48]	; 0x30
 80035a2:	4649      	mov	r1, r9
 80035a4:	414b      	adcs	r3, r1
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035b4:	4659      	mov	r1, fp
 80035b6:	00cb      	lsls	r3, r1, #3
 80035b8:	4651      	mov	r1, sl
 80035ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035be:	4651      	mov	r1, sl
 80035c0:	00ca      	lsls	r2, r1, #3
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	4642      	mov	r2, r8
 80035ca:	189b      	adds	r3, r3, r2
 80035cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035d0:	464b      	mov	r3, r9
 80035d2:	460a      	mov	r2, r1
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035f0:	460b      	mov	r3, r1
 80035f2:	18db      	adds	r3, r3, r3
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f6:	4613      	mov	r3, r2
 80035f8:	eb42 0303 	adc.w	r3, r2, r3
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003606:	f7fc fddf 	bl	80001c8 <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <UART_SetConfig+0x2d4>)
 8003610:	fba3 1302 	umull	r1, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	2164      	movs	r1, #100	; 0x64
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	3332      	adds	r3, #50	; 0x32
 8003622:	4a08      	ldr	r2, [pc, #32]	; (8003644 <UART_SetConfig+0x2d4>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	f003 0207 	and.w	r2, r3, #7
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4422      	add	r2, r4
 8003636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003638:	e106      	b.n	8003848 <UART_SetConfig+0x4d8>
 800363a:	bf00      	nop
 800363c:	40011000 	.word	0x40011000
 8003640:	40011400 	.word	0x40011400
 8003644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800364c:	2200      	movs	r2, #0
 800364e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003652:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800365a:	4642      	mov	r2, r8
 800365c:	464b      	mov	r3, r9
 800365e:	1891      	adds	r1, r2, r2
 8003660:	6239      	str	r1, [r7, #32]
 8003662:	415b      	adcs	r3, r3
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
 8003666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800366a:	4641      	mov	r1, r8
 800366c:	1854      	adds	r4, r2, r1
 800366e:	4649      	mov	r1, r9
 8003670:	eb43 0501 	adc.w	r5, r3, r1
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	00eb      	lsls	r3, r5, #3
 800367e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003682:	00e2      	lsls	r2, r4, #3
 8003684:	4614      	mov	r4, r2
 8003686:	461d      	mov	r5, r3
 8003688:	4643      	mov	r3, r8
 800368a:	18e3      	adds	r3, r4, r3
 800368c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003690:	464b      	mov	r3, r9
 8003692:	eb45 0303 	adc.w	r3, r5, r3
 8003696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036b6:	4629      	mov	r1, r5
 80036b8:	008b      	lsls	r3, r1, #2
 80036ba:	4621      	mov	r1, r4
 80036bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036c0:	4621      	mov	r1, r4
 80036c2:	008a      	lsls	r2, r1, #2
 80036c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036c8:	f7fc fd7e 	bl	80001c8 <__aeabi_uldivmod>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4b60      	ldr	r3, [pc, #384]	; (8003854 <UART_SetConfig+0x4e4>)
 80036d2:	fba3 2302 	umull	r2, r3, r3, r2
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	011c      	lsls	r4, r3, #4
 80036da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036ec:	4642      	mov	r2, r8
 80036ee:	464b      	mov	r3, r9
 80036f0:	1891      	adds	r1, r2, r2
 80036f2:	61b9      	str	r1, [r7, #24]
 80036f4:	415b      	adcs	r3, r3
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fc:	4641      	mov	r1, r8
 80036fe:	1851      	adds	r1, r2, r1
 8003700:	6139      	str	r1, [r7, #16]
 8003702:	4649      	mov	r1, r9
 8003704:	414b      	adcs	r3, r1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003714:	4659      	mov	r1, fp
 8003716:	00cb      	lsls	r3, r1, #3
 8003718:	4651      	mov	r1, sl
 800371a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800371e:	4651      	mov	r1, sl
 8003720:	00ca      	lsls	r2, r1, #3
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	4603      	mov	r3, r0
 8003728:	4642      	mov	r2, r8
 800372a:	189b      	adds	r3, r3, r2
 800372c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003730:	464b      	mov	r3, r9
 8003732:	460a      	mov	r2, r1
 8003734:	eb42 0303 	adc.w	r3, r2, r3
 8003738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	67bb      	str	r3, [r7, #120]	; 0x78
 8003746:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003754:	4649      	mov	r1, r9
 8003756:	008b      	lsls	r3, r1, #2
 8003758:	4641      	mov	r1, r8
 800375a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800375e:	4641      	mov	r1, r8
 8003760:	008a      	lsls	r2, r1, #2
 8003762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003766:	f7fc fd2f 	bl	80001c8 <__aeabi_uldivmod>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4611      	mov	r1, r2
 8003770:	4b38      	ldr	r3, [pc, #224]	; (8003854 <UART_SetConfig+0x4e4>)
 8003772:	fba3 2301 	umull	r2, r3, r3, r1
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2264      	movs	r2, #100	; 0x64
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	1acb      	subs	r3, r1, r3
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	3332      	adds	r3, #50	; 0x32
 8003784:	4a33      	ldr	r2, [pc, #204]	; (8003854 <UART_SetConfig+0x4e4>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003790:	441c      	add	r4, r3
 8003792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003796:	2200      	movs	r2, #0
 8003798:	673b      	str	r3, [r7, #112]	; 0x70
 800379a:	677a      	str	r2, [r7, #116]	; 0x74
 800379c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	1891      	adds	r1, r2, r2
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	415b      	adcs	r3, r3
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037b0:	4641      	mov	r1, r8
 80037b2:	1851      	adds	r1, r2, r1
 80037b4:	6039      	str	r1, [r7, #0]
 80037b6:	4649      	mov	r1, r9
 80037b8:	414b      	adcs	r3, r1
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037c8:	4659      	mov	r1, fp
 80037ca:	00cb      	lsls	r3, r1, #3
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d2:	4651      	mov	r1, sl
 80037d4:	00ca      	lsls	r2, r1, #3
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	4642      	mov	r2, r8
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80037e2:	464b      	mov	r3, r9
 80037e4:	460a      	mov	r2, r1
 80037e6:	eb42 0303 	adc.w	r3, r2, r3
 80037ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	663b      	str	r3, [r7, #96]	; 0x60
 80037f6:	667a      	str	r2, [r7, #100]	; 0x64
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003804:	4649      	mov	r1, r9
 8003806:	008b      	lsls	r3, r1, #2
 8003808:	4641      	mov	r1, r8
 800380a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380e:	4641      	mov	r1, r8
 8003810:	008a      	lsls	r2, r1, #2
 8003812:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003816:	f7fc fcd7 	bl	80001c8 <__aeabi_uldivmod>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <UART_SetConfig+0x4e4>)
 8003820:	fba3 1302 	umull	r1, r3, r3, r2
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	2164      	movs	r1, #100	; 0x64
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	3332      	adds	r3, #50	; 0x32
 8003832:	4a08      	ldr	r2, [pc, #32]	; (8003854 <UART_SetConfig+0x4e4>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	f003 020f 	and.w	r2, r3, #15
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4422      	add	r2, r4
 8003846:	609a      	str	r2, [r3, #8]
}
 8003848:	bf00      	nop
 800384a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800384e:	46bd      	mov	sp, r7
 8003850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003854:	51eb851f 	.word	0x51eb851f

08003858 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003858:	b084      	sub	sp, #16
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	f107 001c 	add.w	r0, r7, #28
 8003866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800386a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800386e:	2b01      	cmp	r3, #1
 8003870:	d123      	bne.n	80038ba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800389a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d105      	bne.n	80038ae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f001 fae2 	bl	8004e78 <USB_CoreReset>
 80038b4:	4603      	mov	r3, r0
 80038b6:	73fb      	strb	r3, [r7, #15]
 80038b8:	e01b      	b.n	80038f2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f001 fad6 	bl	8004e78 <USB_CoreReset>
 80038cc:	4603      	mov	r3, r0
 80038ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80038d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d106      	bne.n	80038e6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
 80038e4:	e005      	b.n	80038f2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80038f2:	7fbb      	ldrb	r3, [r7, #30]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d10b      	bne.n	8003910 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f043 0206 	orr.w	r2, r3, #6
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800391c:	b004      	add	sp, #16
 800391e:	4770      	bx	lr

08003920 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	4613      	mov	r3, r2
 800392c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d165      	bne.n	8003a00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4a41      	ldr	r2, [pc, #260]	; (8003a3c <USB_SetTurnaroundTime+0x11c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d906      	bls.n	800394a <USB_SetTurnaroundTime+0x2a>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4a40      	ldr	r2, [pc, #256]	; (8003a40 <USB_SetTurnaroundTime+0x120>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d202      	bcs.n	800394a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003944:	230f      	movs	r3, #15
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	e062      	b.n	8003a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4a3c      	ldr	r2, [pc, #240]	; (8003a40 <USB_SetTurnaroundTime+0x120>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d306      	bcc.n	8003960 <USB_SetTurnaroundTime+0x40>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4a3b      	ldr	r2, [pc, #236]	; (8003a44 <USB_SetTurnaroundTime+0x124>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d202      	bcs.n	8003960 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800395a:	230e      	movs	r3, #14
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e057      	b.n	8003a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4a38      	ldr	r2, [pc, #224]	; (8003a44 <USB_SetTurnaroundTime+0x124>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d306      	bcc.n	8003976 <USB_SetTurnaroundTime+0x56>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4a37      	ldr	r2, [pc, #220]	; (8003a48 <USB_SetTurnaroundTime+0x128>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d202      	bcs.n	8003976 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003970:	230d      	movs	r3, #13
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	e04c      	b.n	8003a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4a33      	ldr	r2, [pc, #204]	; (8003a48 <USB_SetTurnaroundTime+0x128>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d306      	bcc.n	800398c <USB_SetTurnaroundTime+0x6c>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4a32      	ldr	r2, [pc, #200]	; (8003a4c <USB_SetTurnaroundTime+0x12c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d802      	bhi.n	800398c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003986:	230c      	movs	r3, #12
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	e041      	b.n	8003a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <USB_SetTurnaroundTime+0x12c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d906      	bls.n	80039a2 <USB_SetTurnaroundTime+0x82>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4a2e      	ldr	r2, [pc, #184]	; (8003a50 <USB_SetTurnaroundTime+0x130>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d802      	bhi.n	80039a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800399c:	230b      	movs	r3, #11
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	e036      	b.n	8003a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <USB_SetTurnaroundTime+0x130>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d906      	bls.n	80039b8 <USB_SetTurnaroundTime+0x98>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4a29      	ldr	r2, [pc, #164]	; (8003a54 <USB_SetTurnaroundTime+0x134>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d802      	bhi.n	80039b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80039b2:	230a      	movs	r3, #10
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e02b      	b.n	8003a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <USB_SetTurnaroundTime+0x134>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d906      	bls.n	80039ce <USB_SetTurnaroundTime+0xae>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <USB_SetTurnaroundTime+0x138>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d202      	bcs.n	80039ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80039c8:	2309      	movs	r3, #9
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e020      	b.n	8003a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <USB_SetTurnaroundTime+0x138>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d306      	bcc.n	80039e4 <USB_SetTurnaroundTime+0xc4>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4a20      	ldr	r2, [pc, #128]	; (8003a5c <USB_SetTurnaroundTime+0x13c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d802      	bhi.n	80039e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80039de:	2308      	movs	r3, #8
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e015      	b.n	8003a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <USB_SetTurnaroundTime+0x13c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d906      	bls.n	80039fa <USB_SetTurnaroundTime+0xda>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <USB_SetTurnaroundTime+0x140>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d202      	bcs.n	80039fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80039f4:	2307      	movs	r3, #7
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	e00a      	b.n	8003a10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80039fa:	2306      	movs	r3, #6
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e007      	b.n	8003a10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003a06:	2309      	movs	r3, #9
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e001      	b.n	8003a10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a0c:	2309      	movs	r3, #9
 8003a0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	029b      	lsls	r3, r3, #10
 8003a24:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	00d8acbf 	.word	0x00d8acbf
 8003a40:	00e4e1c0 	.word	0x00e4e1c0
 8003a44:	00f42400 	.word	0x00f42400
 8003a48:	01067380 	.word	0x01067380
 8003a4c:	011a499f 	.word	0x011a499f
 8003a50:	01312cff 	.word	0x01312cff
 8003a54:	014ca43f 	.word	0x014ca43f
 8003a58:	016e3600 	.word	0x016e3600
 8003a5c:	01a6ab1f 	.word	0x01a6ab1f
 8003a60:	01e84800 	.word	0x01e84800

08003a64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f043 0201 	orr.w	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f023 0201 	bic.w	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d115      	bne.n	8003af6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ad6:	200a      	movs	r0, #10
 8003ad8:	f7fd f8dc 	bl	8000c94 <HAL_Delay>
      ms += 10U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	330a      	adds	r3, #10
 8003ae0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f001 f939 	bl	8004d5a <USB_GetMode>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d01e      	beq.n	8003b2c <USB_SetCurrentMode+0x84>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2bc7      	cmp	r3, #199	; 0xc7
 8003af2:	d9f0      	bls.n	8003ad6 <USB_SetCurrentMode+0x2e>
 8003af4:	e01a      	b.n	8003b2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d115      	bne.n	8003b28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b08:	200a      	movs	r0, #10
 8003b0a:	f7fd f8c3 	bl	8000c94 <HAL_Delay>
      ms += 10U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	330a      	adds	r3, #10
 8003b12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f001 f920 	bl	8004d5a <USB_GetMode>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <USB_SetCurrentMode+0x84>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2bc7      	cmp	r3, #199	; 0xc7
 8003b24:	d9f0      	bls.n	8003b08 <USB_SetCurrentMode+0x60>
 8003b26:	e001      	b.n	8003b2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e005      	b.n	8003b38 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2bc8      	cmp	r3, #200	; 0xc8
 8003b30:	d101      	bne.n	8003b36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b40:	b084      	sub	sp, #16
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b086      	sub	sp, #24
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	e009      	b.n	8003b74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	3340      	adds	r3, #64	; 0x40
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	3301      	adds	r3, #1
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b0e      	cmp	r3, #14
 8003b78:	d9f2      	bls.n	8003b60 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d11c      	bne.n	8003bbc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
 8003bba:	e00b      	b.n	8003bd4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003be0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d10d      	bne.n	8003c04 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d104      	bne.n	8003bfa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f968 	bl	8003ec8 <USB_SetDevSpeed>
 8003bf8:	e008      	b.n	8003c0c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f963 	bl	8003ec8 <USB_SetDevSpeed>
 8003c02:	e003      	b.n	8003c0c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c04:	2103      	movs	r1, #3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f95e 	bl	8003ec8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c0c:	2110      	movs	r1, #16
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8fa 	bl	8003e08 <USB_FlushTxFifo>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f924 	bl	8003e6c <USB_FlushRxFifo>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c34:	461a      	mov	r2, r3
 8003c36:	2300      	movs	r3, #0
 8003c38:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c40:	461a      	mov	r2, r3
 8003c42:	2300      	movs	r3, #0
 8003c44:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	e043      	b.n	8003ce0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c6e:	d118      	bne.n	8003ca2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c82:	461a      	mov	r2, r3
 8003c84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e013      	b.n	8003cb4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	e008      	b.n	8003cb4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d3b5      	bcc.n	8003c58 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	e043      	b.n	8003d7a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d08:	d118      	bne.n	8003d3c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	e013      	b.n	8003d4e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	461a      	mov	r2, r3
 8003d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e008      	b.n	8003d4e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	3301      	adds	r3, #1
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d7e:	461a      	mov	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d3b5      	bcc.n	8003cf2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d98:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003da6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003da8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f043 0210 	orr.w	r2, r3, #16
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <USB_DevInit+0x2c4>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003dc8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	f043 0208 	orr.w	r2, r3, #8
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ddc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d107      	bne.n	8003df4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dec:	f043 0304 	orr.w	r3, r3, #4
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e00:	b004      	add	sp, #16
 8003e02:	4770      	bx	lr
 8003e04:	803c3800 	.word	0x803c3800

08003e08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e22:	d901      	bls.n	8003e28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e01b      	b.n	8003e60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	daf2      	bge.n	8003e16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	019b      	lsls	r3, r3, #6
 8003e38:	f043 0220 	orr.w	r2, r3, #32
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3301      	adds	r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e4c:	d901      	bls.n	8003e52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e006      	b.n	8003e60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d0f0      	beq.n	8003e40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e84:	d901      	bls.n	8003e8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e018      	b.n	8003ebc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	daf2      	bge.n	8003e78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2210      	movs	r2, #16
 8003e9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ea8:	d901      	bls.n	8003eae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e006      	b.n	8003ebc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b10      	cmp	r3, #16
 8003eb8:	d0f0      	beq.n	8003e9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	68f9      	ldr	r1, [r7, #12]
 8003ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b087      	sub	sp, #28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0306 	and.w	r3, r3, #6
 8003f12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]
 8003f1e:	e00a      	b.n	8003f36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d002      	beq.n	8003f2c <USB_GetDevSpeed+0x32>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b06      	cmp	r3, #6
 8003f2a:	d102      	bne.n	8003f32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	75fb      	strb	r3, [r7, #23]
 8003f30:	e001      	b.n	8003f36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f32:	230f      	movs	r3, #15
 8003f34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	785b      	ldrb	r3, [r3, #1]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d13a      	bne.n	8003fd6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	2101      	movs	r1, #1
 8003f72:	fa01 f303 	lsl.w	r3, r1, r3
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	68f9      	ldr	r1, [r7, #12]
 8003f7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d155      	bne.n	8004044 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	791b      	ldrb	r3, [r3, #4]
 8003fb2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fb4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	059b      	lsls	r3, r3, #22
 8003fba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	0151      	lsls	r1, r2, #5
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	440a      	add	r2, r1
 8003fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	e036      	b.n	8004044 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fdc:	69da      	ldr	r2, [r3, #28]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d11a      	bne.n	8004044 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	791b      	ldrb	r3, [r3, #4]
 8004028:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800402a:	430b      	orrs	r3, r1
 800402c:	4313      	orrs	r3, r2
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004042:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d161      	bne.n	8004134 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004086:	d11f      	bne.n	80040c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	0151      	lsls	r1, r2, #5
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	440a      	add	r2, r1
 800409e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	0151      	lsls	r1, r2, #5
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	440a      	add	r2, r1
 80040be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	2101      	movs	r1, #1
 80040da:	fa01 f303 	lsl.w	r3, r1, r3
 80040de:	b29b      	uxth	r3, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	68f9      	ldr	r1, [r7, #12]
 80040e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040e8:	4013      	ands	r3, r2
 80040ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	b29b      	uxth	r3, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	68f9      	ldr	r1, [r7, #12]
 8004108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800410c:	4013      	ands	r3, r2
 800410e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	0159      	lsls	r1, r3, #5
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	440b      	add	r3, r1
 8004126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412a:	4619      	mov	r1, r3
 800412c:	4b35      	ldr	r3, [pc, #212]	; (8004204 <USB_DeactivateEndpoint+0x1b0>)
 800412e:	4013      	ands	r3, r2
 8004130:	600b      	str	r3, [r1, #0]
 8004132:	e060      	b.n	80041f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800414a:	d11f      	bne.n	800418c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	0151      	lsls	r1, r2, #5
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	440a      	add	r2, r1
 8004162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800416a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	0151      	lsls	r1, r2, #5
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	440a      	add	r2, r1
 8004182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004186:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800418a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	2101      	movs	r1, #1
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	041b      	lsls	r3, r3, #16
 80041a4:	43db      	mvns	r3, r3
 80041a6:	68f9      	ldr	r1, [r7, #12]
 80041a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ac:	4013      	ands	r3, r2
 80041ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	2101      	movs	r1, #1
 80041c2:	fa01 f303 	lsl.w	r3, r1, r3
 80041c6:	041b      	lsls	r3, r3, #16
 80041c8:	43db      	mvns	r3, r3
 80041ca:	68f9      	ldr	r1, [r7, #12]
 80041cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041d0:	4013      	ands	r3, r2
 80041d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	0159      	lsls	r1, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	440b      	add	r3, r1
 80041ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ee:	4619      	mov	r1, r3
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <USB_DeactivateEndpoint+0x1b4>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	ec337800 	.word	0xec337800
 8004208:	eff37800 	.word	0xeff37800

0800420c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	4613      	mov	r3, r2
 8004218:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	785b      	ldrb	r3, [r3, #1]
 8004228:	2b01      	cmp	r3, #1
 800422a:	f040 817a 	bne.w	8004522 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d132      	bne.n	800429c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	440a      	add	r2, r1
 800424c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004250:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004254:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004258:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	440a      	add	r2, r1
 8004270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004274:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004278:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	0151      	lsls	r1, r2, #5
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	440a      	add	r2, r1
 8004290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004294:	0cdb      	lsrs	r3, r3, #19
 8004296:	04db      	lsls	r3, r3, #19
 8004298:	6113      	str	r3, [r2, #16]
 800429a:	e092      	b.n	80043c2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	0151      	lsls	r1, r2, #5
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	440a      	add	r2, r1
 80042b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b6:	0cdb      	lsrs	r3, r3, #19
 80042b8:	04db      	lsls	r3, r3, #19
 80042ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	0151      	lsls	r1, r2, #5
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	440a      	add	r2, r1
 80042d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042de:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d11a      	bne.n	800431c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d903      	bls.n	80042fa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	0151      	lsls	r1, r2, #5
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	440a      	add	r2, r1
 8004310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004318:	6113      	str	r3, [r2, #16]
 800431a:	e01b      	b.n	8004354 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004328:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	6919      	ldr	r1, [r3, #16]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	440b      	add	r3, r1
 8004334:	1e59      	subs	r1, r3, #1
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	fbb1 f3f3 	udiv	r3, r1, r3
 800433e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004340:	4ba2      	ldr	r3, [pc, #648]	; (80045cc <USB_EPStartXfer+0x3c0>)
 8004342:	400b      	ands	r3, r1
 8004344:	69b9      	ldr	r1, [r7, #24]
 8004346:	0148      	lsls	r0, r1, #5
 8004348:	69f9      	ldr	r1, [r7, #28]
 800434a:	4401      	add	r1, r0
 800434c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004350:	4313      	orrs	r3, r2
 8004352:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436a:	69b9      	ldr	r1, [r7, #24]
 800436c:	0148      	lsls	r0, r1, #5
 800436e:	69f9      	ldr	r1, [r7, #28]
 8004370:	4401      	add	r1, r0
 8004372:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004376:	4313      	orrs	r3, r2
 8004378:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	791b      	ldrb	r3, [r3, #4]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d11f      	bne.n	80043c2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	0151      	lsls	r1, r2, #5
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	440a      	add	r2, r1
 8004398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80043a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	0151      	lsls	r1, r2, #5
 80043b4:	69fa      	ldr	r2, [r7, #28]
 80043b6:	440a      	add	r2, r1
 80043b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d14b      	bne.n	8004460 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043dc:	461a      	mov	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	791b      	ldrb	r3, [r3, #4]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d128      	bne.n	800443e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d110      	bne.n	800441e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004416:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	e00f      	b.n	800443e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	0151      	lsls	r1, r2, #5
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	440a      	add	r2, r1
 8004434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	0151      	lsls	r1, r2, #5
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	440a      	add	r2, r1
 8004454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004458:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e165      	b.n	800472c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	0151      	lsls	r1, r2, #5
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	440a      	add	r2, r1
 8004476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800447e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	791b      	ldrb	r3, [r3, #4]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d015      	beq.n	80044b4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 814d 	beq.w	800472c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	2101      	movs	r1, #1
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	69f9      	ldr	r1, [r7, #28]
 80044aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044ae:	4313      	orrs	r3, r2
 80044b0:	634b      	str	r3, [r1, #52]	; 0x34
 80044b2:	e13b      	b.n	800472c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d110      	bne.n	80044e6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	0151      	lsls	r1, r2, #5
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	440a      	add	r2, r1
 80044da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	e00f      	b.n	8004506 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004504:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	68d9      	ldr	r1, [r3, #12]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	781a      	ldrb	r2, [r3, #0]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	b298      	uxth	r0, r3
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	4603      	mov	r3, r0
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f9b8 	bl	8004890 <USB_WritePacket>
 8004520:	e104      	b.n	800472c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	0151      	lsls	r1, r2, #5
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	440a      	add	r2, r1
 8004538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800453c:	0cdb      	lsrs	r3, r3, #19
 800453e:	04db      	lsls	r3, r3, #19
 8004540:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	0151      	lsls	r1, r2, #5
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	440a      	add	r2, r1
 8004558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800455c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004560:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004564:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d131      	bne.n	80045d0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459a:	69b9      	ldr	r1, [r7, #24]
 800459c:	0148      	lsls	r0, r1, #5
 800459e:	69f9      	ldr	r1, [r7, #28]
 80045a0:	4401      	add	r1, r0
 80045a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045a6:	4313      	orrs	r3, r2
 80045a8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	0151      	lsls	r1, r2, #5
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	440a      	add	r2, r1
 80045c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045c8:	6113      	str	r3, [r2, #16]
 80045ca:	e061      	b.n	8004690 <USB_EPStartXfer+0x484>
 80045cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d123      	bne.n	8004620 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ee:	69b9      	ldr	r1, [r7, #24]
 80045f0:	0148      	lsls	r0, r1, #5
 80045f2:	69f9      	ldr	r1, [r7, #28]
 80045f4:	4401      	add	r1, r0
 80045f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045fa:	4313      	orrs	r3, r2
 80045fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	0151      	lsls	r1, r2, #5
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	440a      	add	r2, r1
 8004614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800461c:	6113      	str	r3, [r2, #16]
 800461e:	e037      	b.n	8004690 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	4413      	add	r3, r2
 800462a:	1e5a      	subs	r2, r3, #1
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	8afa      	ldrh	r2, [r7, #22]
 800463c:	fb03 f202 	mul.w	r2, r3, r2
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	8afb      	ldrh	r3, [r7, #22]
 8004654:	04d9      	lsls	r1, r3, #19
 8004656:	4b38      	ldr	r3, [pc, #224]	; (8004738 <USB_EPStartXfer+0x52c>)
 8004658:	400b      	ands	r3, r1
 800465a:	69b9      	ldr	r1, [r7, #24]
 800465c:	0148      	lsls	r0, r1, #5
 800465e:	69f9      	ldr	r1, [r7, #28]
 8004660:	4401      	add	r1, r0
 8004662:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004666:	4313      	orrs	r3, r2
 8004668:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004680:	69b9      	ldr	r1, [r7, #24]
 8004682:	0148      	lsls	r0, r1, #5
 8004684:	69f9      	ldr	r1, [r7, #28]
 8004686:	4401      	add	r1, r0
 8004688:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800468c:	4313      	orrs	r3, r2
 800468e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d10d      	bne.n	80046b2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	68d9      	ldr	r1, [r3, #12]
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ae:	460a      	mov	r2, r1
 80046b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	791b      	ldrb	r3, [r3, #4]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d128      	bne.n	800470c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d110      	bne.n	80046ec <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	e00f      	b.n	800470c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	0151      	lsls	r1, r2, #5
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	440a      	add	r2, r1
 8004702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004726:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800472a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3720      	adds	r7, #32
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	1ff80000 	.word	0x1ff80000

0800473c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d14a      	bne.n	80047f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800476e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004772:	f040 8086 	bne.w	8004882 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	7812      	ldrb	r2, [r2, #0]
 800478a:	0151      	lsls	r1, r2, #5
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	440a      	add	r2, r1
 8004790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004794:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004798:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	7812      	ldrb	r2, [r2, #0]
 80047ae:	0151      	lsls	r1, r2, #5
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	440a      	add	r2, r1
 80047b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3301      	adds	r3, #1
 80047c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d902      	bls.n	80047d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	75fb      	strb	r3, [r7, #23]
          break;
 80047d2:	e056      	b.n	8004882 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ec:	d0e7      	beq.n	80047be <USB_EPStopXfer+0x82>
 80047ee:	e048      	b.n	8004882 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004808:	d13b      	bne.n	8004882 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	7812      	ldrb	r2, [r2, #0]
 800481e:	0151      	lsls	r1, r2, #5
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	440a      	add	r2, r1
 8004824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004828:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800482c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	7812      	ldrb	r2, [r2, #0]
 8004842:	0151      	lsls	r1, r2, #5
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	440a      	add	r2, r1
 8004848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800484c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004850:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3301      	adds	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f242 7210 	movw	r2, #10000	; 0x2710
 800485e:	4293      	cmp	r3, r2
 8004860:	d902      	bls.n	8004868 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
          break;
 8004866:	e00c      	b.n	8004882 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800487c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004880:	d0e7      	beq.n	8004852 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004882:	7dfb      	ldrb	r3, [r7, #23]
}
 8004884:	4618      	mov	r0, r3
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004890:	b480      	push	{r7}
 8004892:	b089      	sub	sp, #36	; 0x24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	4611      	mov	r1, r2
 800489c:	461a      	mov	r2, r3
 800489e:	460b      	mov	r3, r1
 80048a0:	71fb      	strb	r3, [r7, #7]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80048ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d123      	bne.n	80048fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048b6:	88bb      	ldrh	r3, [r7, #4]
 80048b8:	3303      	adds	r3, #3
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048be:	2300      	movs	r3, #0
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	e018      	b.n	80048f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	031a      	lsls	r2, r3, #12
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d0:	461a      	mov	r2, r3
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	3301      	adds	r3, #1
 80048dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3301      	adds	r3, #1
 80048e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	3301      	adds	r3, #1
 80048e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	3301      	adds	r3, #1
 80048ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	3301      	adds	r3, #1
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d3e2      	bcc.n	80048c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3724      	adds	r7, #36	; 0x24
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800490c:	b480      	push	{r7}
 800490e:	b08b      	sub	sp, #44	; 0x2c
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	4613      	mov	r3, r2
 8004918:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	b29b      	uxth	r3, r3
 8004928:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004932:	2300      	movs	r3, #0
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	e014      	b.n	8004962 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	601a      	str	r2, [r3, #0]
    pDest++;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	3301      	adds	r3, #1
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	3301      	adds	r3, #1
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	3301      	adds	r3, #1
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	3301      	adds	r3, #1
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	3301      	adds	r3, #1
 8004960:	623b      	str	r3, [r7, #32]
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	429a      	cmp	r2, r3
 8004968:	d3e6      	bcc.n	8004938 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800496a:	8bfb      	ldrh	r3, [r7, #30]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01e      	beq.n	80049ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497a:	461a      	mov	r2, r3
 800497c:	f107 0310 	add.w	r3, r7, #16
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
 8004990:	b2da      	uxtb	r2, r3
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	701a      	strb	r2, [r3, #0]
      i++;
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	3301      	adds	r3, #1
 800499a:	623b      	str	r3, [r7, #32]
      pDest++;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	3301      	adds	r3, #1
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049a2:	8bfb      	ldrh	r3, [r7, #30]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049a8:	8bfb      	ldrh	r3, [r7, #30]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1ea      	bne.n	8004984 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	372c      	adds	r7, #44	; 0x2c
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	785b      	ldrb	r3, [r3, #1]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d12c      	bne.n	8004a32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	db12      	blt.n	8004a10 <USB_EPSetStall+0x54>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00f      	beq.n	8004a10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	0151      	lsls	r1, r2, #5
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	440a      	add	r2, r1
 8004a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	0151      	lsls	r1, r2, #5
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	440a      	add	r2, r1
 8004a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	e02b      	b.n	8004a8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	db12      	blt.n	8004a6a <USB_EPSetStall+0xae>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00f      	beq.n	8004a6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	0151      	lsls	r1, r2, #5
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	440a      	add	r2, r1
 8004a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	0151      	lsls	r1, r2, #5
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	440a      	add	r2, r1
 8004a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d128      	bne.n	8004b06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ad2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	791b      	ldrb	r3, [r3, #4]
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d003      	beq.n	8004ae4 <USB_EPClearStall+0x4c>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	791b      	ldrb	r3, [r3, #4]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d138      	bne.n	8004b56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e027      	b.n	8004b56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	0151      	lsls	r1, r2, #5
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	440a      	add	r2, r1
 8004b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	791b      	ldrb	r3, [r3, #4]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d003      	beq.n	8004b36 <USB_EPClearStall+0x9e>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	791b      	ldrb	r3, [r3, #4]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d10f      	bne.n	8004b56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	0151      	lsls	r1, r2, #5
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	440a      	add	r2, r1
 8004b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b98:	68f9      	ldr	r1, [r7, #12]
 8004b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bde:	f023 0302 	bic.w	r3, r3, #2
 8004be2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c0c:	f023 0303 	bic.w	r3, r3, #3
 8004c10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c20:	f043 0302 	orr.w	r3, r3, #2
 8004c24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b085      	sub	sp, #20
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	0c1b      	lsrs	r3, r3, #16
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	b29b      	uxth	r3, r3
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4013      	ands	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b087      	sub	sp, #28
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	460b      	mov	r3, r1
 8004d08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d20:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	01db      	lsls	r3, r3, #7
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f003 0301 	and.w	r3, r3, #1
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d94:	f023 0307 	bic.w	r3, r3, #7
 8004d98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	333c      	adds	r3, #60	; 0x3c
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4a26      	ldr	r2, [pc, #152]	; (8004e74 <USB_EP0_OutStart+0xb8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d90a      	bls.n	8004df6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004df0:	d101      	bne.n	8004df6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e037      	b.n	8004e66 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	2300      	movs	r3, #0
 8004e00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e24:	f043 0318 	orr.w	r3, r3, #24
 8004e28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e38:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e3c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e3e:	7afb      	ldrb	r3, [r7, #11]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d10f      	bne.n	8004e64 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	4f54300a 	.word	0x4f54300a

08004e78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3301      	adds	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e90:	d901      	bls.n	8004e96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e01b      	b.n	8004ece <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	daf2      	bge.n	8004e84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f043 0201 	orr.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004eba:	d901      	bls.n	8004ec0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e006      	b.n	8004ece <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d0f0      	beq.n	8004eae <USB_CoreReset+0x36>

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8004eda:	b480      	push	{r7}
 8004edc:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8004ede:	bf00      	nop
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004ef4:	2054      	movs	r0, #84	; 0x54
 8004ef6:	f002 fb3f 	bl	8007578 <USBD_static_malloc>
 8004efa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	32b0      	adds	r2, #176	; 0xb0
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004f12:	2302      	movs	r3, #2
 8004f14:	e08b      	b.n	800502e <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	32b0      	adds	r2, #176	; 0xb0
 8004f20:	68f9      	ldr	r1, [r7, #12]
 8004f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	32b0      	adds	r2, #176	; 0xb0
 8004f30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	7c1b      	ldrb	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d11b      	bne.n	8004f7a <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004f42:	4b3d      	ldr	r3, [pc, #244]	; (8005038 <USBD_CUSTOM_HID_Init+0x150>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	f003 020f 	and.w	r2, r3, #15
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	3326      	adds	r3, #38	; 0x26
 8004f58:	2205      	movs	r2, #5
 8004f5a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004f5c:	4b37      	ldr	r3, [pc, #220]	; (800503c <USBD_CUSTOM_HID_Init+0x154>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	f003 020f 	and.w	r2, r3, #15
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	440b      	add	r3, r1
 8004f70:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8004f74:	2205      	movs	r2, #5
 8004f76:	801a      	strh	r2, [r3, #0]
 8004f78:	e01a      	b.n	8004fb0 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004f7a:	4b2f      	ldr	r3, [pc, #188]	; (8005038 <USBD_CUSTOM_HID_Init+0x150>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	f003 020f 	and.w	r2, r3, #15
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	3326      	adds	r3, #38	; 0x26
 8004f90:	2205      	movs	r2, #5
 8004f92:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004f94:	4b29      	ldr	r3, [pc, #164]	; (800503c <USBD_CUSTOM_HID_Init+0x154>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	f003 020f 	and.w	r2, r3, #15
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8004fac:	2205      	movs	r2, #5
 8004fae:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004fb0:	4b21      	ldr	r3, [pc, #132]	; (8005038 <USBD_CUSTOM_HID_Init+0x150>)
 8004fb2:	7819      	ldrb	r1, [r3, #0]
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f002 f9cc 	bl	8007356 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004fbe:	4b1e      	ldr	r3, [pc, #120]	; (8005038 <USBD_CUSTOM_HID_Init+0x150>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	f003 020f 	and.w	r2, r3, #15
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	3324      	adds	r3, #36	; 0x24
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004fd8:	4b18      	ldr	r3, [pc, #96]	; (800503c <USBD_CUSTOM_HID_Init+0x154>)
 8004fda:	7819      	ldrb	r1, [r3, #0]
 8004fdc:	2302      	movs	r3, #2
 8004fde:	2203      	movs	r2, #3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f002 f9b8 	bl	8007356 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8004fe6:	4b15      	ldr	r3, [pc, #84]	; (800503c <USBD_CUSTOM_HID_Init+0x154>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	f003 020f 	and.w	r2, r3, #15
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ffe:	2201      	movs	r2, #1
 8005000:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	33b0      	adds	r3, #176	; 0xb0
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800501e:	4b07      	ldr	r3, [pc, #28]	; (800503c <USBD_CUSTOM_HID_Init+0x154>)
 8005020:	7819      	ldrb	r1, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	2340      	movs	r3, #64	; 0x40
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f002 fa84 	bl	8007534 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000092 	.word	0x20000092
 800503c:	20000093 	.word	0x20000093

08005040 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800504c:	4b37      	ldr	r3, [pc, #220]	; (800512c <USBD_CUSTOM_HID_DeInit+0xec>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f002 f9a5 	bl	80073a2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8005058:	4b34      	ldr	r3, [pc, #208]	; (800512c <USBD_CUSTOM_HID_DeInit+0xec>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	f003 020f 	and.w	r2, r3, #15
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	3324      	adds	r3, #36	; 0x24
 800506e:	2200      	movs	r2, #0
 8005070:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8005072:	4b2e      	ldr	r3, [pc, #184]	; (800512c <USBD_CUSTOM_HID_DeInit+0xec>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	f003 020f 	and.w	r2, r3, #15
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	3326      	adds	r3, #38	; 0x26
 8005088:	2200      	movs	r2, #0
 800508a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800508c:	4b28      	ldr	r3, [pc, #160]	; (8005130 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f002 f985 	bl	80073a2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8005098:	4b25      	ldr	r3, [pc, #148]	; (8005130 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f003 020f 	and.w	r2, r3, #15
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050b0:	2200      	movs	r2, #0
 80050b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80050b4:	4b1e      	ldr	r3, [pc, #120]	; (8005130 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	f003 020f 	and.w	r2, r3, #15
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80050cc:	2200      	movs	r2, #0
 80050ce:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	32b0      	adds	r2, #176	; 0xb0
 80050da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01f      	beq.n	8005122 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	33b0      	adds	r3, #176	; 0xb0
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	32b0      	adds	r2, #176	; 0xb0
 8005100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005104:	4618      	mov	r0, r3
 8005106:	f002 fa45 	bl	8007594 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	32b0      	adds	r2, #176	; 0xb0
 8005114:	2100      	movs	r1, #0
 8005116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000092 	.word	0x20000092
 8005130:	20000093 	.word	0x20000093

08005134 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	32b0      	adds	r2, #176	; 0xb0
 8005148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8005164:	2303      	movs	r3, #3
 8005166:	e0f8      	b.n	800535a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005170:	2b00      	cmp	r3, #0
 8005172:	d056      	beq.n	8005222 <USBD_CUSTOM_HID_Setup+0xee>
 8005174:	2b20      	cmp	r3, #32
 8005176:	f040 80e8 	bne.w	800534a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	785b      	ldrb	r3, [r3, #1]
 800517e:	3b02      	subs	r3, #2
 8005180:	2b09      	cmp	r3, #9
 8005182:	d846      	bhi.n	8005212 <USBD_CUSTOM_HID_Setup+0xde>
 8005184:	a201      	add	r2, pc, #4	; (adr r2, 800518c <USBD_CUSTOM_HID_Setup+0x58>)
 8005186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518a:	bf00      	nop
 800518c:	080051e5 	.word	0x080051e5
 8005190:	080051c3 	.word	0x080051c3
 8005194:	08005213 	.word	0x08005213
 8005198:	08005213 	.word	0x08005213
 800519c:	08005213 	.word	0x08005213
 80051a0:	08005213 	.word	0x08005213
 80051a4:	08005213 	.word	0x08005213
 80051a8:	080051f5 	.word	0x080051f5
 80051ac:	080051d3 	.word	0x080051d3
 80051b0:	080051b5 	.word	0x080051b5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	885b      	ldrh	r3, [r3, #2]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	461a      	mov	r2, r3
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80051c0:	e02e      	b.n	8005220 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	3340      	adds	r3, #64	; 0x40
 80051c6:	2201      	movs	r2, #1
 80051c8:	4619      	mov	r1, r3
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f001 fcfe 	bl	8006bcc <USBD_CtlSendData>
          break;
 80051d0:	e026      	b.n	8005220 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	885b      	ldrh	r3, [r3, #2]
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	b29b      	uxth	r3, r3
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 80051e2:	e01d      	b.n	8005220 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	3344      	adds	r3, #68	; 0x44
 80051e8:	2201      	movs	r2, #1
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f001 fced 	bl	8006bcc <USBD_CtlSendData>
          break;
 80051f2:	e015      	b.n	8005220 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2201      	movs	r2, #1
 80051f8:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80051fa:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	88db      	ldrh	r3, [r3, #6]
 8005200:	2b40      	cmp	r3, #64	; 0x40
 8005202:	bf28      	it	cs
 8005204:	2340      	movcs	r3, #64	; 0x40
 8005206:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005208:	461a      	mov	r2, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f001 fd0a 	bl	8006c24 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005210:	e006      	b.n	8005220 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8005212:	6839      	ldr	r1, [r7, #0]
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f001 fc68 	bl	8006aea <USBD_CtlError>
          ret = USBD_FAIL;
 800521a:	2303      	movs	r3, #3
 800521c:	75fb      	strb	r3, [r7, #23]
          break;
 800521e:	bf00      	nop
      }
      break;
 8005220:	e09a      	b.n	8005358 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	2b0b      	cmp	r3, #11
 8005228:	f200 8086 	bhi.w	8005338 <USBD_CUSTOM_HID_Setup+0x204>
 800522c:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <USBD_CUSTOM_HID_Setup+0x100>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	08005265 	.word	0x08005265
 8005238:	08005347 	.word	0x08005347
 800523c:	08005339 	.word	0x08005339
 8005240:	08005339 	.word	0x08005339
 8005244:	08005339 	.word	0x08005339
 8005248:	08005339 	.word	0x08005339
 800524c:	0800528f 	.word	0x0800528f
 8005250:	08005339 	.word	0x08005339
 8005254:	08005339 	.word	0x08005339
 8005258:	08005339 	.word	0x08005339
 800525c:	080052e7 	.word	0x080052e7
 8005260:	08005311 	.word	0x08005311
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b03      	cmp	r3, #3
 800526e:	d107      	bne.n	8005280 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005270:	f107 030e 	add.w	r3, r7, #14
 8005274:	2202      	movs	r2, #2
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 fca7 	bl	8006bcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800527e:	e063      	b.n	8005348 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f001 fc31 	bl	8006aea <USBD_CtlError>
            ret = USBD_FAIL;
 8005288:	2303      	movs	r3, #3
 800528a:	75fb      	strb	r3, [r7, #23]
          break;
 800528c:	e05c      	b.n	8005348 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	885b      	ldrh	r3, [r3, #2]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b22      	cmp	r3, #34	; 0x22
 8005298:	d110      	bne.n	80052bc <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	88db      	ldrh	r3, [r3, #6]
 800529e:	2b62      	cmp	r3, #98	; 0x62
 80052a0:	bf28      	it	cs
 80052a2:	2362      	movcs	r3, #98	; 0x62
 80052a4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	33b0      	adds	r3, #176	; 0xb0
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	e00d      	b.n	80052d8 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	885b      	ldrh	r3, [r3, #2]
 80052c0:	0a1b      	lsrs	r3, r3, #8
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b21      	cmp	r3, #33	; 0x21
 80052c6:	d107      	bne.n	80052d8 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80052c8:	4b26      	ldr	r3, [pc, #152]	; (8005364 <USBD_CUSTOM_HID_Setup+0x230>)
 80052ca:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	88db      	ldrh	r3, [r3, #6]
 80052d0:	2b09      	cmp	r3, #9
 80052d2:	bf28      	it	cs
 80052d4:	2309      	movcs	r3, #9
 80052d6:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80052d8:	8bfb      	ldrh	r3, [r7, #30]
 80052da:	461a      	mov	r2, r3
 80052dc:	69b9      	ldr	r1, [r7, #24]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 fc74 	bl	8006bcc <USBD_CtlSendData>
          break;
 80052e4:	e030      	b.n	8005348 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d107      	bne.n	8005302 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3348      	adds	r3, #72	; 0x48
 80052f6:	2201      	movs	r2, #1
 80052f8:	4619      	mov	r1, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f001 fc66 	bl	8006bcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005300:	e022      	b.n	8005348 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 fbf0 	bl	8006aea <USBD_CtlError>
            ret = USBD_FAIL;
 800530a:	2303      	movs	r3, #3
 800530c:	75fb      	strb	r3, [r7, #23]
          break;
 800530e:	e01b      	b.n	8005348 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b03      	cmp	r3, #3
 800531a:	d106      	bne.n	800532a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	885b      	ldrh	r3, [r3, #2]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005328:	e00e      	b.n	8005348 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f001 fbdc 	bl	8006aea <USBD_CtlError>
            ret = USBD_FAIL;
 8005332:	2303      	movs	r3, #3
 8005334:	75fb      	strb	r3, [r7, #23]
          break;
 8005336:	e007      	b.n	8005348 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f001 fbd5 	bl	8006aea <USBD_CtlError>
          ret = USBD_FAIL;
 8005340:	2303      	movs	r3, #3
 8005342:	75fb      	strb	r3, [r7, #23]
          break;
 8005344:	e000      	b.n	8005348 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8005346:	bf00      	nop
      }
      break;
 8005348:	e006      	b.n	8005358 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f001 fbcc 	bl	8006aea <USBD_CtlError>
      ret = USBD_FAIL;
 8005352:	2303      	movs	r3, #3
 8005354:	75fb      	strb	r3, [r7, #23]
      break;
 8005356:	bf00      	nop
  }
  return (uint8_t)ret;
 8005358:	7dfb      	ldrb	r3, [r7, #23]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	2000007c 	.word	0x2000007c

08005368 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	4613      	mov	r3, r2
 8005374:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	32b0      	adds	r2, #176	; 0xb0
 8005380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005384:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800538c:	2303      	movs	r3, #3
 800538e:	e019      	b.n	80053c4 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b03      	cmp	r3, #3
 800539a:	d112      	bne.n	80053c2 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10b      	bne.n	80053be <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80053ae:	4b07      	ldr	r3, [pc, #28]	; (80053cc <USBD_CUSTOM_HID_SendReport+0x64>)
 80053b0:	7819      	ldrb	r1, [r3, #0]
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f002 f89b 	bl	80074f2 <USBD_LL_Transmit>
 80053bc:	e001      	b.n	80053c2 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20000092 	.word	0x20000092

080053d0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80053d8:	2181      	movs	r1, #129	; 0x81
 80053da:	4815      	ldr	r0, [pc, #84]	; (8005430 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80053dc:	f000 fd4d 	bl	8005e7a <USBD_GetEpDesc>
 80053e0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80053e2:	2101      	movs	r1, #1
 80053e4:	4812      	ldr	r0, [pc, #72]	; (8005430 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80053e6:	f000 fd48 	bl	8005e7a <USBD_GetEpDesc>
 80053ea:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f042 0202 	orr.w	r2, r2, #2
 80053fa:	711a      	strb	r2, [r3, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2205      	movs	r2, #5
 8005404:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d009      	beq.n	8005420 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2200      	movs	r2, #0
 8005410:	f042 0202 	orr.w	r2, r2, #2
 8005414:	711a      	strb	r2, [r3, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2205      	movs	r2, #5
 800541e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2237      	movs	r2, #55	; 0x37
 8005424:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005426:	4b02      	ldr	r3, [pc, #8]	; (8005430 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20000044 	.word	0x20000044

08005434 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800543c:	2181      	movs	r1, #129	; 0x81
 800543e:	4815      	ldr	r0, [pc, #84]	; (8005494 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005440:	f000 fd1b 	bl	8005e7a <USBD_GetEpDesc>
 8005444:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005446:	2101      	movs	r1, #1
 8005448:	4812      	ldr	r0, [pc, #72]	; (8005494 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800544a:	f000 fd16 	bl	8005e7a <USBD_GetEpDesc>
 800544e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d009      	beq.n	800546a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f042 0202 	orr.w	r2, r2, #2
 800545e:	711a      	strb	r2, [r3, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2205      	movs	r2, #5
 8005468:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d009      	beq.n	8005484 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2200      	movs	r2, #0
 8005474:	f042 0202 	orr.w	r2, r2, #2
 8005478:	711a      	strb	r2, [r3, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2205      	movs	r2, #5
 8005482:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2237      	movs	r2, #55	; 0x37
 8005488:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800548a:	4b02      	ldr	r3, [pc, #8]	; (8005494 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20000044 	.word	0x20000044

08005498 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80054a0:	2181      	movs	r1, #129	; 0x81
 80054a2:	4815      	ldr	r0, [pc, #84]	; (80054f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80054a4:	f000 fce9 	bl	8005e7a <USBD_GetEpDesc>
 80054a8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80054aa:	2101      	movs	r1, #1
 80054ac:	4812      	ldr	r0, [pc, #72]	; (80054f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80054ae:	f000 fce4 	bl	8005e7a <USBD_GetEpDesc>
 80054b2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d009      	beq.n	80054ce <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f042 0202 	orr.w	r2, r2, #2
 80054c2:	711a      	strb	r2, [r3, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2205      	movs	r2, #5
 80054cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d009      	beq.n	80054e8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f042 0202 	orr.w	r2, r2, #2
 80054dc:	711a      	strb	r2, [r3, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2205      	movs	r2, #5
 80054e6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2237      	movs	r2, #55	; 0x37
 80054ec:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80054ee:	4b02      	ldr	r3, [pc, #8]	; (80054f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	20000044 	.word	0x20000044

080054fc <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	32b0      	adds	r2, #176	; 0xb0
 8005512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800552c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	32b0      	adds	r2, #176	; 0xb0
 8005542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800554a:	2303      	movs	r3, #3
 800554c:	e03f      	b.n	80055ce <USBD_CUSTOM_HID_DataOut+0xa2>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	32b0      	adds	r2, #176	; 0xb0
 8005558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555c:	60fb      	str	r3, [r7, #12]

  // Handle the OUT endpoint
  operation     = hhid->Report_buf[0];
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	781a      	ldrb	r2, [r3, #0]
 8005562:	4b1d      	ldr	r3, [pc, #116]	; (80055d8 <USBD_CUSTOM_HID_DataOut+0xac>)
 8005564:	701a      	strb	r2, [r3, #0]
  IN_ = *(Report*) hhid->Report_buf;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4a1c      	ldr	r2, [pc, #112]	; (80055dc <USBD_CUSTOM_HID_DataOut+0xb0>)
 800556a:	4610      	mov	r0, r2
 800556c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005570:	4602      	mov	r2, r0
 8005572:	4619      	mov	r1, r3
 8005574:	f8d1 c000 	ldr.w	ip, [r1]
 8005578:	684e      	ldr	r6, [r1, #4]
 800557a:	688d      	ldr	r5, [r1, #8]
 800557c:	68c9      	ldr	r1, [r1, #12]
 800557e:	f8c2 c000 	str.w	ip, [r2]
 8005582:	6056      	str	r6, [r2, #4]
 8005584:	6095      	str	r5, [r2, #8]
 8005586:	60d1      	str	r1, [r2, #12]
 8005588:	3310      	adds	r3, #16
 800558a:	3010      	adds	r0, #16
 800558c:	42a3      	cmp	r3, r4
 800558e:	d1ef      	bne.n	8005570 <USBD_CUSTOM_HID_DataOut+0x44>

  if(operation != STATUS_CHECK)
 8005590:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <USBD_CUSTOM_HID_DataOut+0xac>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b04      	cmp	r3, #4
 8005596:	d005      	beq.n	80055a4 <USBD_CUSTOM_HID_DataOut+0x78>
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8005598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800559c:	4810      	ldr	r0, [pc, #64]	; (80055e0 <USBD_CUSTOM_HID_DataOut+0xb4>)
 800559e:	f7fb fe64 	bl	800126a <HAL_GPIO_TogglePin>
 80055a2:	e004      	b.n	80055ae <USBD_CUSTOM_HID_DataOut+0x82>
  }
  else
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80055a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055a8:	480d      	ldr	r0, [pc, #52]	; (80055e0 <USBD_CUSTOM_HID_DataOut+0xb4>)
 80055aa:	f7fb fe5e 	bl	800126a <HAL_GPIO_TogglePin>
  }

//  report_buffer = hhid->Report_buf+2;
  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	33b0      	adds	r3, #176	; 0xb0
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	7810      	ldrb	r0, [r2, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	7852      	ldrb	r2, [r2, #1]
 80055c8:	4611      	mov	r1, r2
 80055ca:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000260 	.word	0x20000260
 80055dc:	20000220 	.word	0x20000220
 80055e0:	40020c00 	.word	0x40020c00

080055e4 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	32b0      	adds	r2, #176	; 0xb0
 80055f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80055fe:	2303      	movs	r3, #3
 8005600:	e00f      	b.n	8005622 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	32b0      	adds	r2, #176	; 0xb0
 800560c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005610:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005612:	4b06      	ldr	r3, [pc, #24]	; (800562c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005614:	7819      	ldrb	r1, [r3, #0]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	2340      	movs	r3, #64	; 0x40
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 ff8a 	bl	8007534 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000093 	.word	0x20000093

08005630 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	32b0      	adds	r2, #176	; 0xb0
 8005642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005646:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800564e:	2303      	movs	r3, #3
 8005650:	e016      	b.n	8005680 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	2b01      	cmp	r3, #1
 8005658:	d111      	bne.n	800567e <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	33b0      	adds	r3, #176	; 0xb0
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	7810      	ldrb	r0, [r2, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	7852      	ldrb	r2, [r2, #1]
 8005674:	4611      	mov	r1, r2
 8005676:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	220a      	movs	r2, #10
 8005694:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005696:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	20000088 	.word	0x20000088

080056a8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e009      	b.n	80056d0 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	33b0      	adds	r3, #176	; 0xb0
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	4613      	mov	r3, r2
 80056e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e01f      	b.n	8005734 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	79fa      	ldrb	r2, [r7, #7]
 8005726:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f001 fdad 	bl	8007288 <USBD_LL_Init>
 800572e:	4603      	mov	r3, r0
 8005730:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005732:	7dfb      	ldrb	r3, [r7, #23]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005750:	2303      	movs	r3, #3
 8005752:	e025      	b.n	80057a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	32ae      	adds	r2, #174	; 0xae
 8005766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00f      	beq.n	8005790 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	32ae      	adds	r2, #174	; 0xae
 800577a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	f107 020e 	add.w	r2, r7, #14
 8005784:	4610      	mov	r0, r2
 8005786:	4798      	blx	r3
 8005788:	4602      	mov	r2, r0
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 fdb5 	bl	8007320 <USBD_LL_Start>
 80057b6:	4603      	mov	r3, r0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	460b      	mov	r3, r1
 80057e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	4611      	mov	r1, r2
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	4798      	blx	r3
 8005800:	4603      	mov	r3, r0
 8005802:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005804:	7bfb      	ldrb	r3, [r7, #15]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	460b      	mov	r3, r1
 8005818:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	78fa      	ldrb	r2, [r7, #3]
 8005828:	4611      	mov	r1, r2
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	4798      	blx	r3
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005834:	2303      	movs	r3, #3
 8005836:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f001 f90e 	bl	8006a76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005868:	461a      	mov	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	2b02      	cmp	r3, #2
 800587c:	d01a      	beq.n	80058b4 <USBD_LL_SetupStage+0x72>
 800587e:	2b02      	cmp	r3, #2
 8005880:	d822      	bhi.n	80058c8 <USBD_LL_SetupStage+0x86>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <USBD_LL_SetupStage+0x4a>
 8005886:	2b01      	cmp	r3, #1
 8005888:	d00a      	beq.n	80058a0 <USBD_LL_SetupStage+0x5e>
 800588a:	e01d      	b.n	80058c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fb65 	bl	8005f64 <USBD_StdDevReq>
 800589a:	4603      	mov	r3, r0
 800589c:	73fb      	strb	r3, [r7, #15]
      break;
 800589e:	e020      	b.n	80058e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fbcd 	bl	8006048 <USBD_StdItfReq>
 80058ae:	4603      	mov	r3, r0
 80058b0:	73fb      	strb	r3, [r7, #15]
      break;
 80058b2:	e016      	b.n	80058e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058ba:	4619      	mov	r1, r3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fc2f 	bl	8006120 <USBD_StdEPReq>
 80058c2:	4603      	mov	r3, r0
 80058c4:	73fb      	strb	r3, [r7, #15]
      break;
 80058c6:	e00c      	b.n	80058e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80058ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 fd82 	bl	80073e0 <USBD_LL_StallEP>
 80058dc:	4603      	mov	r3, r0
 80058de:	73fb      	strb	r3, [r7, #15]
      break;
 80058e0:	bf00      	nop
  }

  return ret;
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	460b      	mov	r3, r1
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80058fe:	7afb      	ldrb	r3, [r7, #11]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d16e      	bne.n	80059e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800590a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005912:	2b03      	cmp	r3, #3
 8005914:	f040 8098 	bne.w	8005a48 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	429a      	cmp	r2, r3
 8005922:	d913      	bls.n	800594c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	1ad2      	subs	r2, r2, r3
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	4293      	cmp	r3, r2
 800593c:	bf28      	it	cs
 800593e:	4613      	movcs	r3, r2
 8005940:	461a      	mov	r2, r3
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f001 f98a 	bl	8006c5e <USBD_CtlContinueRx>
 800594a:	e07d      	b.n	8005a48 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	2b02      	cmp	r3, #2
 8005958:	d014      	beq.n	8005984 <USBD_LL_DataOutStage+0x98>
 800595a:	2b02      	cmp	r3, #2
 800595c:	d81d      	bhi.n	800599a <USBD_LL_DataOutStage+0xae>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <USBD_LL_DataOutStage+0x7c>
 8005962:	2b01      	cmp	r3, #1
 8005964:	d003      	beq.n	800596e <USBD_LL_DataOutStage+0x82>
 8005966:	e018      	b.n	800599a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	75bb      	strb	r3, [r7, #22]
            break;
 800596c:	e018      	b.n	80059a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005974:	b2db      	uxtb	r3, r3
 8005976:	4619      	mov	r1, r3
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fa64 	bl	8005e46 <USBD_CoreFindIF>
 800597e:	4603      	mov	r3, r0
 8005980:	75bb      	strb	r3, [r7, #22]
            break;
 8005982:	e00d      	b.n	80059a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800598a:	b2db      	uxtb	r3, r3
 800598c:	4619      	mov	r1, r3
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 fa66 	bl	8005e60 <USBD_CoreFindEP>
 8005994:	4603      	mov	r3, r0
 8005996:	75bb      	strb	r3, [r7, #22]
            break;
 8005998:	e002      	b.n	80059a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	75bb      	strb	r3, [r7, #22]
            break;
 800599e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80059a0:	7dbb      	ldrb	r3, [r7, #22]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d119      	bne.n	80059da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d113      	bne.n	80059da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80059b2:	7dba      	ldrb	r2, [r7, #22]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	32ae      	adds	r2, #174	; 0xae
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80059c2:	7dba      	ldrb	r2, [r7, #22]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80059ca:	7dba      	ldrb	r2, [r7, #22]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	32ae      	adds	r2, #174	; 0xae
 80059d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f001 f950 	bl	8006c80 <USBD_CtlSendStatus>
 80059e0:	e032      	b.n	8005a48 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80059e2:	7afb      	ldrb	r3, [r7, #11]
 80059e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	4619      	mov	r1, r3
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 fa37 	bl	8005e60 <USBD_CoreFindEP>
 80059f2:	4603      	mov	r3, r0
 80059f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059f6:	7dbb      	ldrb	r3, [r7, #22]
 80059f8:	2bff      	cmp	r3, #255	; 0xff
 80059fa:	d025      	beq.n	8005a48 <USBD_LL_DataOutStage+0x15c>
 80059fc:	7dbb      	ldrb	r3, [r7, #22]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d122      	bne.n	8005a48 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d117      	bne.n	8005a3e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005a0e:	7dba      	ldrb	r2, [r7, #22]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	32ae      	adds	r2, #174	; 0xae
 8005a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00f      	beq.n	8005a3e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005a1e:	7dba      	ldrb	r2, [r7, #22]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005a26:	7dba      	ldrb	r2, [r7, #22]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	32ae      	adds	r2, #174	; 0xae
 8005a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	7afa      	ldrb	r2, [r7, #11]
 8005a34:	4611      	mov	r1, r2
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	4798      	blx	r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005a44:	7dfb      	ldrb	r3, [r7, #23]
 8005a46:	e000      	b.n	8005a4a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b086      	sub	sp, #24
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005a60:	7afb      	ldrb	r3, [r7, #11]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d16f      	bne.n	8005b46 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3314      	adds	r3, #20
 8005a6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d15a      	bne.n	8005b2c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d914      	bls.n	8005aac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	1ad2      	subs	r2, r2, r3
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	461a      	mov	r2, r3
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f001 f8b2 	bl	8006c02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f001 fd45 	bl	8007534 <USBD_LL_PrepareReceive>
 8005aaa:	e03f      	b.n	8005b2c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d11c      	bne.n	8005af2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d316      	bcc.n	8005af2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d20f      	bcs.n	8005af2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f001 f893 	bl	8006c02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2100      	movs	r1, #0
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f001 fd22 	bl	8007534 <USBD_LL_PrepareReceive>
 8005af0:	e01c      	b.n	8005b2c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d10f      	bne.n	8005b1e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d009      	beq.n	8005b1e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b1e:	2180      	movs	r1, #128	; 0x80
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f001 fc5d 	bl	80073e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f001 f8bd 	bl	8006ca6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d03a      	beq.n	8005bac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f7ff fe42 	bl	80057c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b44:	e032      	b.n	8005bac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005b46:	7afb      	ldrb	r3, [r7, #11]
 8005b48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	4619      	mov	r1, r3
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 f985 	bl	8005e60 <USBD_CoreFindEP>
 8005b56:	4603      	mov	r3, r0
 8005b58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
 8005b5c:	2bff      	cmp	r3, #255	; 0xff
 8005b5e:	d025      	beq.n	8005bac <USBD_LL_DataInStage+0x15a>
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d122      	bne.n	8005bac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d11c      	bne.n	8005bac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005b72:	7dfa      	ldrb	r2, [r7, #23]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	32ae      	adds	r2, #174	; 0xae
 8005b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d014      	beq.n	8005bac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005b82:	7dfa      	ldrb	r2, [r7, #23]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005b8a:	7dfa      	ldrb	r2, [r7, #23]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	32ae      	adds	r2, #174	; 0xae
 8005b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	7afa      	ldrb	r2, [r7, #11]
 8005b98:	4611      	mov	r1, r2
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	4798      	blx	r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005ba2:	7dbb      	ldrb	r3, [r7, #22]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ba8:	7dbb      	ldrb	r3, [r7, #22]
 8005baa:	e000      	b.n	8005bae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d014      	beq.n	8005c1c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00e      	beq.n	8005c1c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6852      	ldr	r2, [r2, #4]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	4798      	blx	r3
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c1c:	2340      	movs	r3, #64	; 0x40
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2100      	movs	r1, #0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 fb97 	bl	8007356 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2240      	movs	r2, #64	; 0x40
 8005c34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c38:	2340      	movs	r3, #64	; 0x40
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2180      	movs	r1, #128	; 0x80
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f001 fb89 	bl	8007356 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2240      	movs	r2, #64	; 0x40
 8005c4e:	621a      	str	r2, [r3, #32]

  return ret;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	78fa      	ldrb	r2, [r7, #3]
 8005c6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d006      	beq.n	8005c9c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d106      	bne.n	8005cd4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d110      	bne.n	8005d18 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00b      	beq.n	8005d18 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	32ae      	adds	r2, #174	; 0xae
 8005d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e01c      	b.n	8005d7e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d115      	bne.n	8005d7c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	32ae      	adds	r2, #174	; 0xae
 8005d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00b      	beq.n	8005d7c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	32ae      	adds	r2, #174	; 0xae
 8005d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	78fa      	ldrb	r2, [r7, #3]
 8005d76:	4611      	mov	r1, r2
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	32ae      	adds	r2, #174	; 0xae
 8005d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e01c      	b.n	8005de2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d115      	bne.n	8005de0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	32ae      	adds	r2, #174	; 0xae
 8005dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00b      	beq.n	8005de0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	32ae      	adds	r2, #174	; 0xae
 8005dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	78fa      	ldrb	r2, [r7, #3]
 8005dda:	4611      	mov	r1, r2
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00e      	beq.n	8005e3c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6852      	ldr	r2, [r2, #4]
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	4798      	blx	r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b086      	sub	sp, #24
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	460b      	mov	r3, r1
 8005e84:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	885b      	ldrh	r3, [r3, #2]
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d920      	bls.n	8005ee4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005eaa:	e013      	b.n	8005ed4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005eac:	f107 030a 	add.w	r3, r7, #10
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6978      	ldr	r0, [r7, #20]
 8005eb4:	f000 f81b 	bl	8005eee <USBD_GetNextDesc>
 8005eb8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	785b      	ldrb	r3, [r3, #1]
 8005ebe:	2b05      	cmp	r3, #5
 8005ec0:	d108      	bne.n	8005ed4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	789b      	ldrb	r3, [r3, #2]
 8005eca:	78fa      	ldrb	r2, [r7, #3]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d008      	beq.n	8005ee2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	885b      	ldrh	r3, [r3, #2]
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	897b      	ldrh	r3, [r7, #10]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d8e5      	bhi.n	8005eac <USBD_GetEpDesc+0x32>
 8005ee0:	e000      	b.n	8005ee4 <USBD_GetEpDesc+0x6a>
          break;
 8005ee2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005ee4:	693b      	ldr	r3, [r7, #16]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b085      	sub	sp, #20
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	881a      	ldrh	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4413      	add	r3, r2
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4413      	add	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f46:	8a3b      	ldrh	r3, [r7, #16]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	b21a      	sxth	r2, r3
 8005f4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	b21b      	sxth	r3, r3
 8005f54:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f56:	89fb      	ldrh	r3, [r7, #14]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	d005      	beq.n	8005f8a <USBD_StdDevReq+0x26>
 8005f7e:	2b40      	cmp	r3, #64	; 0x40
 8005f80:	d857      	bhi.n	8006032 <USBD_StdDevReq+0xce>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00f      	beq.n	8005fa6 <USBD_StdDevReq+0x42>
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	d153      	bne.n	8006032 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	32ae      	adds	r2, #174	; 0xae
 8005f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	4798      	blx	r3
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa4:	e04a      	b.n	800603c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	2b09      	cmp	r3, #9
 8005fac:	d83b      	bhi.n	8006026 <USBD_StdDevReq+0xc2>
 8005fae:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <USBD_StdDevReq+0x50>)
 8005fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb4:	08006009 	.word	0x08006009
 8005fb8:	0800601d 	.word	0x0800601d
 8005fbc:	08006027 	.word	0x08006027
 8005fc0:	08006013 	.word	0x08006013
 8005fc4:	08006027 	.word	0x08006027
 8005fc8:	08005fe7 	.word	0x08005fe7
 8005fcc:	08005fdd 	.word	0x08005fdd
 8005fd0:	08006027 	.word	0x08006027
 8005fd4:	08005fff 	.word	0x08005fff
 8005fd8:	08005ff1 	.word	0x08005ff1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005fdc:	6839      	ldr	r1, [r7, #0]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fa3c 	bl	800645c <USBD_GetDescriptor>
          break;
 8005fe4:	e024      	b.n	8006030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fba1 	bl	8006730 <USBD_SetAddress>
          break;
 8005fee:	e01f      	b.n	8006030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fbe0 	bl	80067b8 <USBD_SetConfig>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	73fb      	strb	r3, [r7, #15]
          break;
 8005ffc:	e018      	b.n	8006030 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fc83 	bl	800690c <USBD_GetConfig>
          break;
 8006006:	e013      	b.n	8006030 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fcb4 	bl	8006978 <USBD_GetStatus>
          break;
 8006010:	e00e      	b.n	8006030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fce3 	bl	80069e0 <USBD_SetFeature>
          break;
 800601a:	e009      	b.n	8006030 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fd07 	bl	8006a32 <USBD_ClrFeature>
          break;
 8006024:	e004      	b.n	8006030 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fd5e 	bl	8006aea <USBD_CtlError>
          break;
 800602e:	bf00      	nop
      }
      break;
 8006030:	e004      	b.n	800603c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006032:	6839      	ldr	r1, [r7, #0]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fd58 	bl	8006aea <USBD_CtlError>
      break;
 800603a:	bf00      	nop
  }

  return ret;
 800603c:	7bfb      	ldrb	r3, [r7, #15]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop

08006048 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800605e:	2b40      	cmp	r3, #64	; 0x40
 8006060:	d005      	beq.n	800606e <USBD_StdItfReq+0x26>
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	d852      	bhi.n	800610c <USBD_StdItfReq+0xc4>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <USBD_StdItfReq+0x26>
 800606a:	2b20      	cmp	r3, #32
 800606c:	d14e      	bne.n	800610c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006074:	b2db      	uxtb	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	2b02      	cmp	r3, #2
 800607a:	d840      	bhi.n	80060fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	889b      	ldrh	r3, [r3, #4]
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b01      	cmp	r3, #1
 8006084:	d836      	bhi.n	80060f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	889b      	ldrh	r3, [r3, #4]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff fed9 	bl	8005e46 <USBD_CoreFindIF>
 8006094:	4603      	mov	r3, r0
 8006096:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006098:	7bbb      	ldrb	r3, [r7, #14]
 800609a:	2bff      	cmp	r3, #255	; 0xff
 800609c:	d01d      	beq.n	80060da <USBD_StdItfReq+0x92>
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d11a      	bne.n	80060da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80060a4:	7bba      	ldrb	r2, [r7, #14]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	32ae      	adds	r2, #174	; 0xae
 80060aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00f      	beq.n	80060d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80060b4:	7bba      	ldrb	r2, [r7, #14]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060bc:	7bba      	ldrb	r2, [r7, #14]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	32ae      	adds	r2, #174	; 0xae
 80060c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	4798      	blx	r3
 80060ce:	4603      	mov	r3, r0
 80060d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80060d2:	e004      	b.n	80060de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80060d4:	2303      	movs	r3, #3
 80060d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80060d8:	e001      	b.n	80060de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80060da:	2303      	movs	r3, #3
 80060dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	88db      	ldrh	r3, [r3, #6]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d110      	bne.n	8006108 <USBD_StdItfReq+0xc0>
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10d      	bne.n	8006108 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fdc7 	bl	8006c80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80060f2:	e009      	b.n	8006108 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fcf7 	bl	8006aea <USBD_CtlError>
          break;
 80060fc:	e004      	b.n	8006108 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fcf2 	bl	8006aea <USBD_CtlError>
          break;
 8006106:	e000      	b.n	800610a <USBD_StdItfReq+0xc2>
          break;
 8006108:	bf00      	nop
      }
      break;
 800610a:	e004      	b.n	8006116 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fceb 	bl	8006aea <USBD_CtlError>
      break;
 8006114:	bf00      	nop
  }

  return ret;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	889b      	ldrh	r3, [r3, #4]
 8006132:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800613c:	2b40      	cmp	r3, #64	; 0x40
 800613e:	d007      	beq.n	8006150 <USBD_StdEPReq+0x30>
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	f200 817f 	bhi.w	8006444 <USBD_StdEPReq+0x324>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d02a      	beq.n	80061a0 <USBD_StdEPReq+0x80>
 800614a:	2b20      	cmp	r3, #32
 800614c:	f040 817a 	bne.w	8006444 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006150:	7bbb      	ldrb	r3, [r7, #14]
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff fe83 	bl	8005e60 <USBD_CoreFindEP>
 800615a:	4603      	mov	r3, r0
 800615c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800615e:	7b7b      	ldrb	r3, [r7, #13]
 8006160:	2bff      	cmp	r3, #255	; 0xff
 8006162:	f000 8174 	beq.w	800644e <USBD_StdEPReq+0x32e>
 8006166:	7b7b      	ldrb	r3, [r7, #13]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f040 8170 	bne.w	800644e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800616e:	7b7a      	ldrb	r2, [r7, #13]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006176:	7b7a      	ldrb	r2, [r7, #13]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	32ae      	adds	r2, #174	; 0xae
 800617c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8163 	beq.w	800644e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006188:	7b7a      	ldrb	r2, [r7, #13]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	32ae      	adds	r2, #174	; 0xae
 800618e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	4798      	blx	r3
 800619a:	4603      	mov	r3, r0
 800619c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800619e:	e156      	b.n	800644e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	785b      	ldrb	r3, [r3, #1]
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d008      	beq.n	80061ba <USBD_StdEPReq+0x9a>
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	f300 8145 	bgt.w	8006438 <USBD_StdEPReq+0x318>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 809b 	beq.w	80062ea <USBD_StdEPReq+0x1ca>
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d03c      	beq.n	8006232 <USBD_StdEPReq+0x112>
 80061b8:	e13e      	b.n	8006438 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d002      	beq.n	80061cc <USBD_StdEPReq+0xac>
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d016      	beq.n	80061f8 <USBD_StdEPReq+0xd8>
 80061ca:	e02c      	b.n	8006226 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00d      	beq.n	80061ee <USBD_StdEPReq+0xce>
 80061d2:	7bbb      	ldrb	r3, [r7, #14]
 80061d4:	2b80      	cmp	r3, #128	; 0x80
 80061d6:	d00a      	beq.n	80061ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80061d8:	7bbb      	ldrb	r3, [r7, #14]
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 f8ff 	bl	80073e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061e2:	2180      	movs	r1, #128	; 0x80
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f001 f8fb 	bl	80073e0 <USBD_LL_StallEP>
 80061ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061ec:	e020      	b.n	8006230 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fc7a 	bl	8006aea <USBD_CtlError>
              break;
 80061f6:	e01b      	b.n	8006230 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	885b      	ldrh	r3, [r3, #2]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10e      	bne.n	800621e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <USBD_StdEPReq+0xfe>
 8006206:	7bbb      	ldrb	r3, [r7, #14]
 8006208:	2b80      	cmp	r3, #128	; 0x80
 800620a:	d008      	beq.n	800621e <USBD_StdEPReq+0xfe>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	88db      	ldrh	r3, [r3, #6]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d104      	bne.n	800621e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 f8e1 	bl	80073e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fd2e 	bl	8006c80 <USBD_CtlSendStatus>

              break;
 8006224:	e004      	b.n	8006230 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fc5e 	bl	8006aea <USBD_CtlError>
              break;
 800622e:	bf00      	nop
          }
          break;
 8006230:	e107      	b.n	8006442 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d002      	beq.n	8006244 <USBD_StdEPReq+0x124>
 800623e:	2b03      	cmp	r3, #3
 8006240:	d016      	beq.n	8006270 <USBD_StdEPReq+0x150>
 8006242:	e04b      	b.n	80062dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006244:	7bbb      	ldrb	r3, [r7, #14]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00d      	beq.n	8006266 <USBD_StdEPReq+0x146>
 800624a:	7bbb      	ldrb	r3, [r7, #14]
 800624c:	2b80      	cmp	r3, #128	; 0x80
 800624e:	d00a      	beq.n	8006266 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006250:	7bbb      	ldrb	r3, [r7, #14]
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 f8c3 	bl	80073e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800625a:	2180      	movs	r1, #128	; 0x80
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f001 f8bf 	bl	80073e0 <USBD_LL_StallEP>
 8006262:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006264:	e040      	b.n	80062e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fc3e 	bl	8006aea <USBD_CtlError>
              break;
 800626e:	e03b      	b.n	80062e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	885b      	ldrh	r3, [r3, #2]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d136      	bne.n	80062e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006278:	7bbb      	ldrb	r3, [r7, #14]
 800627a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800627e:	2b00      	cmp	r3, #0
 8006280:	d004      	beq.n	800628c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f001 f8c9 	bl	800741e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fcf7 	bl	8006c80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006292:	7bbb      	ldrb	r3, [r7, #14]
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff fde2 	bl	8005e60 <USBD_CoreFindEP>
 800629c:	4603      	mov	r3, r0
 800629e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062a0:	7b7b      	ldrb	r3, [r7, #13]
 80062a2:	2bff      	cmp	r3, #255	; 0xff
 80062a4:	d01f      	beq.n	80062e6 <USBD_StdEPReq+0x1c6>
 80062a6:	7b7b      	ldrb	r3, [r7, #13]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d11c      	bne.n	80062e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80062ac:	7b7a      	ldrb	r2, [r7, #13]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80062b4:	7b7a      	ldrb	r2, [r7, #13]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	32ae      	adds	r2, #174	; 0xae
 80062ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d010      	beq.n	80062e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80062c4:	7b7a      	ldrb	r2, [r7, #13]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	32ae      	adds	r2, #174	; 0xae
 80062ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
 80062d6:	4603      	mov	r3, r0
 80062d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80062da:	e004      	b.n	80062e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fc03 	bl	8006aea <USBD_CtlError>
              break;
 80062e4:	e000      	b.n	80062e8 <USBD_StdEPReq+0x1c8>
              break;
 80062e6:	bf00      	nop
          }
          break;
 80062e8:	e0ab      	b.n	8006442 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d002      	beq.n	80062fc <USBD_StdEPReq+0x1dc>
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d032      	beq.n	8006360 <USBD_StdEPReq+0x240>
 80062fa:	e097      	b.n	800642c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d007      	beq.n	8006312 <USBD_StdEPReq+0x1f2>
 8006302:	7bbb      	ldrb	r3, [r7, #14]
 8006304:	2b80      	cmp	r3, #128	; 0x80
 8006306:	d004      	beq.n	8006312 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fbed 	bl	8006aea <USBD_CtlError>
                break;
 8006310:	e091      	b.n	8006436 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006316:	2b00      	cmp	r3, #0
 8006318:	da0b      	bge.n	8006332 <USBD_StdEPReq+0x212>
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006320:	4613      	mov	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	3310      	adds	r3, #16
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	4413      	add	r3, r2
 800632e:	3304      	adds	r3, #4
 8006330:	e00b      	b.n	800634a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	4413      	add	r3, r2
 8006348:	3304      	adds	r3, #4
 800634a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2202      	movs	r2, #2
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fc37 	bl	8006bcc <USBD_CtlSendData>
              break;
 800635e:	e06a      	b.n	8006436 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006364:	2b00      	cmp	r3, #0
 8006366:	da11      	bge.n	800638c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	f003 020f 	and.w	r2, r3, #15
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	440b      	add	r3, r1
 800637a:	3324      	adds	r3, #36	; 0x24
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d117      	bne.n	80063b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fbb0 	bl	8006aea <USBD_CtlError>
                  break;
 800638a:	e054      	b.n	8006436 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800638c:	7bbb      	ldrb	r3, [r7, #14]
 800638e:	f003 020f 	and.w	r2, r3, #15
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fb9d 	bl	8006aea <USBD_CtlError>
                  break;
 80063b0:	e041      	b.n	8006436 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	da0b      	bge.n	80063d2 <USBD_StdEPReq+0x2b2>
 80063ba:	7bbb      	ldrb	r3, [r7, #14]
 80063bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	3310      	adds	r3, #16
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	4413      	add	r3, r2
 80063ce:	3304      	adds	r3, #4
 80063d0:	e00b      	b.n	80063ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	4413      	add	r3, r2
 80063e8:	3304      	adds	r3, #4
 80063ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80063ec:	7bbb      	ldrb	r3, [r7, #14]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <USBD_StdEPReq+0x2d8>
 80063f2:	7bbb      	ldrb	r3, [r7, #14]
 80063f4:	2b80      	cmp	r3, #128	; 0x80
 80063f6:	d103      	bne.n	8006400 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e00e      	b.n	800641e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 f829 	bl	800745c <USBD_LL_IsStallEP>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2201      	movs	r2, #1
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	e002      	b.n	800641e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2202      	movs	r2, #2
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fbd1 	bl	8006bcc <USBD_CtlSendData>
              break;
 800642a:	e004      	b.n	8006436 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fb5b 	bl	8006aea <USBD_CtlError>
              break;
 8006434:	bf00      	nop
          }
          break;
 8006436:	e004      	b.n	8006442 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fb55 	bl	8006aea <USBD_CtlError>
          break;
 8006440:	bf00      	nop
      }
      break;
 8006442:	e005      	b.n	8006450 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fb4f 	bl	8006aea <USBD_CtlError>
      break;
 800644c:	e000      	b.n	8006450 <USBD_StdEPReq+0x330>
      break;
 800644e:	bf00      	nop
  }

  return ret;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	885b      	ldrh	r3, [r3, #2]
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	2b06      	cmp	r3, #6
 800647e:	f200 8128 	bhi.w	80066d2 <USBD_GetDescriptor+0x276>
 8006482:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <USBD_GetDescriptor+0x2c>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	080064a5 	.word	0x080064a5
 800648c:	080064bd 	.word	0x080064bd
 8006490:	080064fd 	.word	0x080064fd
 8006494:	080066d3 	.word	0x080066d3
 8006498:	080066d3 	.word	0x080066d3
 800649c:	08006673 	.word	0x08006673
 80064a0:	0800669f 	.word	0x0800669f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	7c12      	ldrb	r2, [r2, #16]
 80064b0:	f107 0108 	add.w	r1, r7, #8
 80064b4:	4610      	mov	r0, r2
 80064b6:	4798      	blx	r3
 80064b8:	60f8      	str	r0, [r7, #12]
      break;
 80064ba:	e112      	b.n	80066e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	7c1b      	ldrb	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10d      	bne.n	80064e0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	f107 0208 	add.w	r2, r7, #8
 80064d0:	4610      	mov	r0, r2
 80064d2:	4798      	blx	r3
 80064d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3301      	adds	r3, #1
 80064da:	2202      	movs	r2, #2
 80064dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80064de:	e100      	b.n	80066e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	f107 0208 	add.w	r2, r7, #8
 80064ec:	4610      	mov	r0, r2
 80064ee:	4798      	blx	r3
 80064f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	2202      	movs	r2, #2
 80064f8:	701a      	strb	r2, [r3, #0]
      break;
 80064fa:	e0f2      	b.n	80066e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	885b      	ldrh	r3, [r3, #2]
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b05      	cmp	r3, #5
 8006504:	f200 80ac 	bhi.w	8006660 <USBD_GetDescriptor+0x204>
 8006508:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <USBD_GetDescriptor+0xb4>)
 800650a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650e:	bf00      	nop
 8006510:	08006529 	.word	0x08006529
 8006514:	0800655d 	.word	0x0800655d
 8006518:	08006591 	.word	0x08006591
 800651c:	080065c5 	.word	0x080065c5
 8006520:	080065f9 	.word	0x080065f9
 8006524:	0800662d 	.word	0x0800662d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00b      	beq.n	800654c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	7c12      	ldrb	r2, [r2, #16]
 8006540:	f107 0108 	add.w	r1, r7, #8
 8006544:	4610      	mov	r0, r2
 8006546:	4798      	blx	r3
 8006548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800654a:	e091      	b.n	8006670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 facb 	bl	8006aea <USBD_CtlError>
            err++;
 8006554:	7afb      	ldrb	r3, [r7, #11]
 8006556:	3301      	adds	r3, #1
 8006558:	72fb      	strb	r3, [r7, #11]
          break;
 800655a:	e089      	b.n	8006670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	7c12      	ldrb	r2, [r2, #16]
 8006574:	f107 0108 	add.w	r1, r7, #8
 8006578:	4610      	mov	r0, r2
 800657a:	4798      	blx	r3
 800657c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800657e:	e077      	b.n	8006670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fab1 	bl	8006aea <USBD_CtlError>
            err++;
 8006588:	7afb      	ldrb	r3, [r7, #11]
 800658a:	3301      	adds	r3, #1
 800658c:	72fb      	strb	r3, [r7, #11]
          break;
 800658e:	e06f      	b.n	8006670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	7c12      	ldrb	r2, [r2, #16]
 80065a8:	f107 0108 	add.w	r1, r7, #8
 80065ac:	4610      	mov	r0, r2
 80065ae:	4798      	blx	r3
 80065b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065b2:	e05d      	b.n	8006670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fa97 	bl	8006aea <USBD_CtlError>
            err++;
 80065bc:	7afb      	ldrb	r3, [r7, #11]
 80065be:	3301      	adds	r3, #1
 80065c0:	72fb      	strb	r3, [r7, #11]
          break;
 80065c2:	e055      	b.n	8006670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00b      	beq.n	80065e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	7c12      	ldrb	r2, [r2, #16]
 80065dc:	f107 0108 	add.w	r1, r7, #8
 80065e0:	4610      	mov	r0, r2
 80065e2:	4798      	blx	r3
 80065e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065e6:	e043      	b.n	8006670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fa7d 	bl	8006aea <USBD_CtlError>
            err++;
 80065f0:	7afb      	ldrb	r3, [r7, #11]
 80065f2:	3301      	adds	r3, #1
 80065f4:	72fb      	strb	r3, [r7, #11]
          break;
 80065f6:	e03b      	b.n	8006670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	7c12      	ldrb	r2, [r2, #16]
 8006610:	f107 0108 	add.w	r1, r7, #8
 8006614:	4610      	mov	r0, r2
 8006616:	4798      	blx	r3
 8006618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800661a:	e029      	b.n	8006670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fa63 	bl	8006aea <USBD_CtlError>
            err++;
 8006624:	7afb      	ldrb	r3, [r7, #11]
 8006626:	3301      	adds	r3, #1
 8006628:	72fb      	strb	r3, [r7, #11]
          break;
 800662a:	e021      	b.n	8006670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	7c12      	ldrb	r2, [r2, #16]
 8006644:	f107 0108 	add.w	r1, r7, #8
 8006648:	4610      	mov	r0, r2
 800664a:	4798      	blx	r3
 800664c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800664e:	e00f      	b.n	8006670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa49 	bl	8006aea <USBD_CtlError>
            err++;
 8006658:	7afb      	ldrb	r3, [r7, #11]
 800665a:	3301      	adds	r3, #1
 800665c:	72fb      	strb	r3, [r7, #11]
          break;
 800665e:	e007      	b.n	8006670 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa41 	bl	8006aea <USBD_CtlError>
          err++;
 8006668:	7afb      	ldrb	r3, [r7, #11]
 800666a:	3301      	adds	r3, #1
 800666c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800666e:	bf00      	nop
      }
      break;
 8006670:	e037      	b.n	80066e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	7c1b      	ldrb	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d109      	bne.n	800668e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006682:	f107 0208 	add.w	r2, r7, #8
 8006686:	4610      	mov	r0, r2
 8006688:	4798      	blx	r3
 800668a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800668c:	e029      	b.n	80066e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fa2a 	bl	8006aea <USBD_CtlError>
        err++;
 8006696:	7afb      	ldrb	r3, [r7, #11]
 8006698:	3301      	adds	r3, #1
 800669a:	72fb      	strb	r3, [r7, #11]
      break;
 800669c:	e021      	b.n	80066e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	7c1b      	ldrb	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10d      	bne.n	80066c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	f107 0208 	add.w	r2, r7, #8
 80066b2:	4610      	mov	r0, r2
 80066b4:	4798      	blx	r3
 80066b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3301      	adds	r3, #1
 80066bc:	2207      	movs	r2, #7
 80066be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066c0:	e00f      	b.n	80066e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fa10 	bl	8006aea <USBD_CtlError>
        err++;
 80066ca:	7afb      	ldrb	r3, [r7, #11]
 80066cc:	3301      	adds	r3, #1
 80066ce:	72fb      	strb	r3, [r7, #11]
      break;
 80066d0:	e007      	b.n	80066e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fa08 	bl	8006aea <USBD_CtlError>
      err++;
 80066da:	7afb      	ldrb	r3, [r7, #11]
 80066dc:	3301      	adds	r3, #1
 80066de:	72fb      	strb	r3, [r7, #11]
      break;
 80066e0:	bf00      	nop
  }

  if (err != 0U)
 80066e2:	7afb      	ldrb	r3, [r7, #11]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d11e      	bne.n	8006726 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	88db      	ldrh	r3, [r3, #6]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d016      	beq.n	800671e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80066f0:	893b      	ldrh	r3, [r7, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00e      	beq.n	8006714 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	88da      	ldrh	r2, [r3, #6]
 80066fa:	893b      	ldrh	r3, [r7, #8]
 80066fc:	4293      	cmp	r3, r2
 80066fe:	bf28      	it	cs
 8006700:	4613      	movcs	r3, r2
 8006702:	b29b      	uxth	r3, r3
 8006704:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006706:	893b      	ldrh	r3, [r7, #8]
 8006708:	461a      	mov	r2, r3
 800670a:	68f9      	ldr	r1, [r7, #12]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fa5d 	bl	8006bcc <USBD_CtlSendData>
 8006712:	e009      	b.n	8006728 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f9e7 	bl	8006aea <USBD_CtlError>
 800671c:	e004      	b.n	8006728 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 faae 	bl	8006c80 <USBD_CtlSendStatus>
 8006724:	e000      	b.n	8006728 <USBD_GetDescriptor+0x2cc>
    return;
 8006726:	bf00      	nop
  }
}
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop

08006730 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	889b      	ldrh	r3, [r3, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d131      	bne.n	80067a6 <USBD_SetAddress+0x76>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	88db      	ldrh	r3, [r3, #6]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d12d      	bne.n	80067a6 <USBD_SetAddress+0x76>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	885b      	ldrh	r3, [r3, #2]
 800674e:	2b7f      	cmp	r3, #127	; 0x7f
 8006750:	d829      	bhi.n	80067a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	885b      	ldrh	r3, [r3, #2]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800675c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b03      	cmp	r3, #3
 8006768:	d104      	bne.n	8006774 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f9bc 	bl	8006aea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006772:	e01d      	b.n	80067b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	7bfa      	ldrb	r2, [r7, #15]
 8006778:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fe97 	bl	80074b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa7a 	bl	8006c80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2202      	movs	r2, #2
 8006796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800679a:	e009      	b.n	80067b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067a4:	e004      	b.n	80067b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f99e 	bl	8006aea <USBD_CtlError>
  }
}
 80067ae:	bf00      	nop
 80067b0:	bf00      	nop
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	885b      	ldrh	r3, [r3, #2]
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	4b4e      	ldr	r3, [pc, #312]	; (8006908 <USBD_SetConfig+0x150>)
 80067ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80067d0:	4b4d      	ldr	r3, [pc, #308]	; (8006908 <USBD_SetConfig+0x150>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d905      	bls.n	80067e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f985 	bl	8006aea <USBD_CtlError>
    return USBD_FAIL;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e08c      	b.n	80068fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d002      	beq.n	80067f6 <USBD_SetConfig+0x3e>
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d029      	beq.n	8006848 <USBD_SetConfig+0x90>
 80067f4:	e075      	b.n	80068e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80067f6:	4b44      	ldr	r3, [pc, #272]	; (8006908 <USBD_SetConfig+0x150>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d020      	beq.n	8006840 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80067fe:	4b42      	ldr	r3, [pc, #264]	; (8006908 <USBD_SetConfig+0x150>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006808:	4b3f      	ldr	r3, [pc, #252]	; (8006908 <USBD_SetConfig+0x150>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fe ffe1 	bl	80057d6 <USBD_SetClassConfig>
 8006814:	4603      	mov	r3, r0
 8006816:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006818:	7bfb      	ldrb	r3, [r7, #15]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d008      	beq.n	8006830 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f962 	bl	8006aea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2202      	movs	r2, #2
 800682a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800682e:	e065      	b.n	80068fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fa25 	bl	8006c80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2203      	movs	r2, #3
 800683a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800683e:	e05d      	b.n	80068fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fa1d 	bl	8006c80 <USBD_CtlSendStatus>
      break;
 8006846:	e059      	b.n	80068fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006848:	4b2f      	ldr	r3, [pc, #188]	; (8006908 <USBD_SetConfig+0x150>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d112      	bne.n	8006876 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006858:	4b2b      	ldr	r3, [pc, #172]	; (8006908 <USBD_SetConfig+0x150>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	461a      	mov	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006862:	4b29      	ldr	r3, [pc, #164]	; (8006908 <USBD_SetConfig+0x150>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fe ffd0 	bl	800580e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fa06 	bl	8006c80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006874:	e042      	b.n	80068fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006876:	4b24      	ldr	r3, [pc, #144]	; (8006908 <USBD_SetConfig+0x150>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d02a      	beq.n	80068da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7fe ffbe 	bl	800580e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006892:	4b1d      	ldr	r3, [pc, #116]	; (8006908 <USBD_SetConfig+0x150>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800689c:	4b1a      	ldr	r3, [pc, #104]	; (8006908 <USBD_SetConfig+0x150>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fe ff97 	bl	80057d6 <USBD_SetClassConfig>
 80068a8:	4603      	mov	r3, r0
 80068aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00f      	beq.n	80068d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f918 	bl	8006aea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fe ffa3 	bl	800580e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80068d0:	e014      	b.n	80068fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f9d4 	bl	8006c80 <USBD_CtlSendStatus>
      break;
 80068d8:	e010      	b.n	80068fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f9d0 	bl	8006c80 <USBD_CtlSendStatus>
      break;
 80068e0:	e00c      	b.n	80068fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f900 	bl	8006aea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068ea:	4b07      	ldr	r3, [pc, #28]	; (8006908 <USBD_SetConfig+0x150>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fe ff8c 	bl	800580e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80068f6:	2303      	movs	r3, #3
 80068f8:	73fb      	strb	r3, [r7, #15]
      break;
 80068fa:	bf00      	nop
  }

  return ret;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	200002e8 	.word	0x200002e8

0800690c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	88db      	ldrh	r3, [r3, #6]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d004      	beq.n	8006928 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f8e2 	bl	8006aea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006926:	e023      	b.n	8006970 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	dc02      	bgt.n	800693a <USBD_GetConfig+0x2e>
 8006934:	2b00      	cmp	r3, #0
 8006936:	dc03      	bgt.n	8006940 <USBD_GetConfig+0x34>
 8006938:	e015      	b.n	8006966 <USBD_GetConfig+0x5a>
 800693a:	2b03      	cmp	r3, #3
 800693c:	d00b      	beq.n	8006956 <USBD_GetConfig+0x4a>
 800693e:	e012      	b.n	8006966 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3308      	adds	r3, #8
 800694a:	2201      	movs	r2, #1
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f93c 	bl	8006bcc <USBD_CtlSendData>
        break;
 8006954:	e00c      	b.n	8006970 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	3304      	adds	r3, #4
 800695a:	2201      	movs	r2, #1
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f934 	bl	8006bcc <USBD_CtlSendData>
        break;
 8006964:	e004      	b.n	8006970 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f8be 	bl	8006aea <USBD_CtlError>
        break;
 800696e:	bf00      	nop
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006988:	b2db      	uxtb	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	2b02      	cmp	r3, #2
 800698e:	d81e      	bhi.n	80069ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	88db      	ldrh	r3, [r3, #6]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d004      	beq.n	80069a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f8a5 	bl	8006aea <USBD_CtlError>
        break;
 80069a0:	e01a      	b.n	80069d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f043 0202 	orr.w	r2, r3, #2
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	330c      	adds	r3, #12
 80069c2:	2202      	movs	r2, #2
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f900 	bl	8006bcc <USBD_CtlSendData>
      break;
 80069cc:	e004      	b.n	80069d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f88a 	bl	8006aea <USBD_CtlError>
      break;
 80069d6:	bf00      	nop
  }
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	885b      	ldrh	r3, [r3, #2]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d107      	bne.n	8006a02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f940 	bl	8006c80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006a00:	e013      	b.n	8006a2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	885b      	ldrh	r3, [r3, #2]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d10b      	bne.n	8006a22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	889b      	ldrh	r3, [r3, #4]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f930 	bl	8006c80 <USBD_CtlSendStatus>
}
 8006a20:	e003      	b.n	8006a2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f860 	bl	8006aea <USBD_CtlError>
}
 8006a2a:	bf00      	nop
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d80b      	bhi.n	8006a62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	885b      	ldrh	r3, [r3, #2]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d10c      	bne.n	8006a6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f910 	bl	8006c80 <USBD_CtlSendStatus>
      }
      break;
 8006a60:	e004      	b.n	8006a6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f840 	bl	8006aea <USBD_CtlError>
      break;
 8006a6a:	e000      	b.n	8006a6e <USBD_ClrFeature+0x3c>
      break;
 8006a6c:	bf00      	nop
  }
}
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	781a      	ldrb	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	781a      	ldrb	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f7ff fa41 	bl	8005f28 <SWAPBYTE>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f7ff fa34 	bl	8005f28 <SWAPBYTE>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3301      	adds	r3, #1
 8006acc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f7ff fa27 	bl	8005f28 <SWAPBYTE>
 8006ada:	4603      	mov	r3, r0
 8006adc:	461a      	mov	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	80da      	strh	r2, [r3, #6]
}
 8006ae2:	bf00      	nop
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006af4:	2180      	movs	r1, #128	; 0x80
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fc72 	bl	80073e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006afc:	2100      	movs	r1, #0
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fc6e 	bl	80073e0 <USBD_LL_StallEP>
}
 8006b04:	bf00      	nop
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d036      	beq.n	8006b90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006b26:	6938      	ldr	r0, [r7, #16]
 8006b28:	f000 f836 	bl	8006b98 <USBD_GetLen>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	3301      	adds	r3, #1
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	4413      	add	r3, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	7812      	ldrb	r2, [r2, #0]
 8006b44:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	4413      	add	r3, r2
 8006b52:	2203      	movs	r2, #3
 8006b54:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b5c:	e013      	b.n	8006b86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	4413      	add	r3, r2
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	7812      	ldrb	r2, [r2, #0]
 8006b68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	613b      	str	r3, [r7, #16]
    idx++;
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	3301      	adds	r3, #1
 8006b74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	3301      	adds	r3, #1
 8006b84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e7      	bne.n	8006b5e <USBD_GetString+0x52>
 8006b8e:	e000      	b.n	8006b92 <USBD_GetString+0x86>
    return;
 8006b90:	bf00      	nop
  }
}
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ba8:	e005      	b.n	8006bb6 <USBD_GetLen+0x1e>
  {
    len++;
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	3301      	adds	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f5      	bne.n	8006baa <USBD_GetLen+0x12>
  }

  return len;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 fc7d 	bl	80074f2 <USBD_LL_Transmit>

  return USBD_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	2100      	movs	r1, #0
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fc6c 	bl	80074f2 <USBD_LL_Transmit>

  return USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2203      	movs	r2, #3
 8006c34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 fc70 	bl	8007534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	2100      	movs	r1, #0
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 fc5f 	bl	8007534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2204      	movs	r2, #4
 8006c8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c90:	2300      	movs	r3, #0
 8006c92:	2200      	movs	r2, #0
 8006c94:	2100      	movs	r1, #0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fc2b 	bl	80074f2 <USBD_LL_Transmit>

  return USBD_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2205      	movs	r2, #5
 8006cb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2100      	movs	r1, #0
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fc39 	bl	8007534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4918      	ldr	r1, [pc, #96]	; (8006d34 <MX_USB_DEVICE_Init+0x68>)
 8006cd4:	4818      	ldr	r0, [pc, #96]	; (8006d38 <MX_USB_DEVICE_Init+0x6c>)
 8006cd6:	f7fe fd01 	bl	80056dc <USBD_Init>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ce0:	f7f9 fd20 	bl	8000724 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006ce4:	4915      	ldr	r1, [pc, #84]	; (8006d3c <MX_USB_DEVICE_Init+0x70>)
 8006ce6:	4814      	ldr	r0, [pc, #80]	; (8006d38 <MX_USB_DEVICE_Init+0x6c>)
 8006ce8:	f7fe fd28 	bl	800573c <USBD_RegisterClass>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006cf2:	f7f9 fd17 	bl	8000724 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006cf6:	4912      	ldr	r1, [pc, #72]	; (8006d40 <MX_USB_DEVICE_Init+0x74>)
 8006cf8:	480f      	ldr	r0, [pc, #60]	; (8006d38 <MX_USB_DEVICE_Init+0x6c>)
 8006cfa:	f7fe fcd5 	bl	80056a8 <USBD_CUSTOM_HID_RegisterInterface>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d04:	f7f9 fd0e 	bl	8000724 <Error_Handler>
  }

	USBD_LL_OpenEP(&hUsbDeviceFS, 0x01, USBD_EP_TYPE_BULK, 64);
 8006d08:	2340      	movs	r3, #64	; 0x40
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	480a      	ldr	r0, [pc, #40]	; (8006d38 <MX_USB_DEVICE_Init+0x6c>)
 8006d10:	f000 fb21 	bl	8007356 <USBD_LL_OpenEP>
	USBD_LL_OpenEP(&hUsbDeviceFS, 0x81, USBD_EP_TYPE_BULK, 64);
 8006d14:	2340      	movs	r3, #64	; 0x40
 8006d16:	2202      	movs	r2, #2
 8006d18:	2181      	movs	r1, #129	; 0x81
 8006d1a:	4807      	ldr	r0, [pc, #28]	; (8006d38 <MX_USB_DEVICE_Init+0x6c>)
 8006d1c:	f000 fb1b 	bl	8007356 <USBD_LL_OpenEP>

  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d20:	4805      	ldr	r0, [pc, #20]	; (8006d38 <MX_USB_DEVICE_Init+0x6c>)
 8006d22:	f7fe fd41 	bl	80057a8 <USBD_Start>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <MX_USB_DEVICE_Init+0x64>
  {
    Error_Handler();
 8006d2c:	f7f9 fcfa 	bl	8000724 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d30:	bf00      	nop
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	20000108 	.word	0x20000108
 8006d38:	200002ec 	.word	0x200002ec
 8006d3c:	2000000c 	.word	0x2000000c
 8006d40:	200000f8 	.word	0x200000f8

08006d44 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006d58:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	460a      	mov	r2, r1
 8006d6e:	71fb      	strb	r3, [r7, #7]
 8006d70:	4613      	mov	r3, r2
 8006d72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8006d74:	4806      	ldr	r0, [pc, #24]	; (8006d90 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8006d76:	f7fe fc35 	bl	80055e4 <USBD_CUSTOM_HID_ReceivePacket>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8006d80:	f04f 33ff 	mov.w	r3, #4294967295
 8006d84:	e000      	b.n	8006d88 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8006d86:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	200002ec 	.word	0x200002ec

08006d94 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  report: The report to be sent
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8006da0:	887b      	ldrh	r3, [r7, #2]
 8006da2:	461a      	mov	r2, r3
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	4804      	ldr	r0, [pc, #16]	; (8006db8 <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 8006da8:	f7fe fade 	bl	8005368 <USBD_CUSTOM_HID_SendReport>
 8006dac:	4603      	mov	r3, r0
 8006dae:	b25b      	sxtb	r3, r3
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	200002ec 	.word	0x200002ec

08006dbc <send_report>:

/* USER CODE END 7 */

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int8_t send_report(uint8_t* report, uint16_t len)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	807b      	strh	r3, [r7, #2]
	return USBD_CUSTOM_HID_SendReport_FS(report, len);
 8006dc8:	887b      	ldrh	r3, [r7, #2]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff ffe1 	bl	8006d94 <USBD_CUSTOM_HID_SendReport_FS>
 8006dd2:	4603      	mov	r3, r0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	6039      	str	r1, [r7, #0]
 8006de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2212      	movs	r2, #18
 8006dec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006dee:	4b03      	ldr	r3, [pc, #12]	; (8006dfc <USBD_FS_DeviceDescriptor+0x20>)
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	20000124 	.word	0x20000124

08006e00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	6039      	str	r1, [r7, #0]
 8006e0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e12:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	20000138 	.word	0x20000138

08006e24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	6039      	str	r1, [r7, #0]
 8006e2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d105      	bne.n	8006e42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	4907      	ldr	r1, [pc, #28]	; (8006e58 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e3a:	4808      	ldr	r0, [pc, #32]	; (8006e5c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e3c:	f7ff fe66 	bl	8006b0c <USBD_GetString>
 8006e40:	e004      	b.n	8006e4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	4904      	ldr	r1, [pc, #16]	; (8006e58 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e46:	4805      	ldr	r0, [pc, #20]	; (8006e5c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e48:	f7ff fe60 	bl	8006b0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e4c:	4b02      	ldr	r3, [pc, #8]	; (8006e58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	200005c8 	.word	0x200005c8
 8006e5c:	08008074 	.word	0x08008074

08006e60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	6039      	str	r1, [r7, #0]
 8006e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	4904      	ldr	r1, [pc, #16]	; (8006e80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e70:	4804      	ldr	r0, [pc, #16]	; (8006e84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e72:	f7ff fe4b 	bl	8006b0c <USBD_GetString>
  return USBD_StrDesc;
 8006e76:	4b02      	ldr	r3, [pc, #8]	; (8006e80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	200005c8 	.word	0x200005c8
 8006e84:	08008084 	.word	0x08008084

08006e88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	6039      	str	r1, [r7, #0]
 8006e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	221a      	movs	r2, #26
 8006e98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e9a:	f000 f843 	bl	8006f24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e9e:	4b02      	ldr	r3, [pc, #8]	; (8006ea8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	2000013c 	.word	0x2000013c

08006eac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	6039      	str	r1, [r7, #0]
 8006eb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006eb8:	79fb      	ldrb	r3, [r7, #7]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d105      	bne.n	8006eca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	4907      	ldr	r1, [pc, #28]	; (8006ee0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ec2:	4808      	ldr	r0, [pc, #32]	; (8006ee4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ec4:	f7ff fe22 	bl	8006b0c <USBD_GetString>
 8006ec8:	e004      	b.n	8006ed4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	4904      	ldr	r1, [pc, #16]	; (8006ee0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ece:	4805      	ldr	r0, [pc, #20]	; (8006ee4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ed0:	f7ff fe1c 	bl	8006b0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ed4:	4b02      	ldr	r3, [pc, #8]	; (8006ee0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	200005c8 	.word	0x200005c8
 8006ee4:	0800808c 	.word	0x0800808c

08006ee8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	6039      	str	r1, [r7, #0]
 8006ef2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d105      	bne.n	8006f06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	4907      	ldr	r1, [pc, #28]	; (8006f1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006efe:	4808      	ldr	r0, [pc, #32]	; (8006f20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f00:	f7ff fe04 	bl	8006b0c <USBD_GetString>
 8006f04:	e004      	b.n	8006f10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	4904      	ldr	r1, [pc, #16]	; (8006f1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f0a:	4805      	ldr	r0, [pc, #20]	; (8006f20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f0c:	f7ff fdfe 	bl	8006b0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f10:	4b02      	ldr	r3, [pc, #8]	; (8006f1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200005c8 	.word	0x200005c8
 8006f20:	080080a0 	.word	0x080080a0

08006f24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f2a:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <Get_SerialNum+0x44>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f30:	4b0e      	ldr	r3, [pc, #56]	; (8006f6c <Get_SerialNum+0x48>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f36:	4b0e      	ldr	r3, [pc, #56]	; (8006f70 <Get_SerialNum+0x4c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4413      	add	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d009      	beq.n	8006f5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f4a:	2208      	movs	r2, #8
 8006f4c:	4909      	ldr	r1, [pc, #36]	; (8006f74 <Get_SerialNum+0x50>)
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 f814 	bl	8006f7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f54:	2204      	movs	r2, #4
 8006f56:	4908      	ldr	r1, [pc, #32]	; (8006f78 <Get_SerialNum+0x54>)
 8006f58:	68b8      	ldr	r0, [r7, #8]
 8006f5a:	f000 f80f 	bl	8006f7c <IntToUnicode>
  }
}
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	1fff7a10 	.word	0x1fff7a10
 8006f6c:	1fff7a14 	.word	0x1fff7a14
 8006f70:	1fff7a18 	.word	0x1fff7a18
 8006f74:	2000013e 	.word	0x2000013e
 8006f78:	2000014e 	.word	0x2000014e

08006f7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	4613      	mov	r3, r2
 8006f88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]
 8006f92:	e027      	b.n	8006fe4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	0f1b      	lsrs	r3, r3, #28
 8006f98:	2b09      	cmp	r3, #9
 8006f9a:	d80b      	bhi.n	8006fb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	0f1b      	lsrs	r3, r3, #28
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	440b      	add	r3, r1
 8006fac:	3230      	adds	r2, #48	; 0x30
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	e00a      	b.n	8006fca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	0f1b      	lsrs	r3, r3, #28
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	440b      	add	r3, r1
 8006fc4:	3237      	adds	r2, #55	; 0x37
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	4413      	add	r3, r2
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	75fb      	strb	r3, [r7, #23]
 8006fe4:	7dfa      	ldrb	r2, [r7, #23]
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d3d3      	bcc.n	8006f94 <IntToUnicode+0x18>
  }
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
	...

08006ffc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	; 0x28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007004:	f107 0314 	add.w	r3, r7, #20
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	605a      	str	r2, [r3, #4]
 800700e:	609a      	str	r2, [r3, #8]
 8007010:	60da      	str	r2, [r3, #12]
 8007012:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800701c:	d13a      	bne.n	8007094 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800701e:	2300      	movs	r3, #0
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	4b1e      	ldr	r3, [pc, #120]	; (800709c <HAL_PCD_MspInit+0xa0>)
 8007024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007026:	4a1d      	ldr	r2, [pc, #116]	; (800709c <HAL_PCD_MspInit+0xa0>)
 8007028:	f043 0301 	orr.w	r3, r3, #1
 800702c:	6313      	str	r3, [r2, #48]	; 0x30
 800702e:	4b1b      	ldr	r3, [pc, #108]	; (800709c <HAL_PCD_MspInit+0xa0>)
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800703a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800703e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007040:	2302      	movs	r3, #2
 8007042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007044:	2300      	movs	r3, #0
 8007046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007048:	2303      	movs	r3, #3
 800704a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800704c:	230a      	movs	r3, #10
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007050:	f107 0314 	add.w	r3, r7, #20
 8007054:	4619      	mov	r1, r3
 8007056:	4812      	ldr	r0, [pc, #72]	; (80070a0 <HAL_PCD_MspInit+0xa4>)
 8007058:	f7f9 ff52 	bl	8000f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800705c:	4b0f      	ldr	r3, [pc, #60]	; (800709c <HAL_PCD_MspInit+0xa0>)
 800705e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007060:	4a0e      	ldr	r2, [pc, #56]	; (800709c <HAL_PCD_MspInit+0xa0>)
 8007062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007066:	6353      	str	r3, [r2, #52]	; 0x34
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	4b0b      	ldr	r3, [pc, #44]	; (800709c <HAL_PCD_MspInit+0xa0>)
 800706e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007070:	4a0a      	ldr	r2, [pc, #40]	; (800709c <HAL_PCD_MspInit+0xa0>)
 8007072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007076:	6453      	str	r3, [r2, #68]	; 0x44
 8007078:	4b08      	ldr	r3, [pc, #32]	; (800709c <HAL_PCD_MspInit+0xa0>)
 800707a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007084:	2200      	movs	r2, #0
 8007086:	2100      	movs	r1, #0
 8007088:	2043      	movs	r0, #67	; 0x43
 800708a:	f7f9 ff02 	bl	8000e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800708e:	2043      	movs	r0, #67	; 0x43
 8007090:	f7f9 ff1b 	bl	8000eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007094:	bf00      	nop
 8007096:	3728      	adds	r7, #40	; 0x28
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	40023800 	.word	0x40023800
 80070a0:	40020000 	.word	0x40020000

080070a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f7fe fbc1 	bl	8005842 <USBD_LL_SetupStage>
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80070da:	78fa      	ldrb	r2, [r7, #3]
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	4619      	mov	r1, r3
 80070f2:	f7fe fbfb 	bl	80058ec <USBD_LL_DataOutStage>
}
 80070f6:	bf00      	nop
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007110:	78fa      	ldrb	r2, [r7, #3]
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	4613      	mov	r3, r2
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	4413      	add	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	3320      	adds	r3, #32
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	4619      	mov	r1, r3
 8007126:	f7fe fc94 	bl	8005a52 <USBD_LL_DataInStage>
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe fdce 	bl	8005ce2 <USBD_LL_SOF>
}
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007156:	2301      	movs	r3, #1
 8007158:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	79db      	ldrb	r3, [r3, #7]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d102      	bne.n	8007168 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007162:	2300      	movs	r3, #0
 8007164:	73fb      	strb	r3, [r7, #15]
 8007166:	e008      	b.n	800717a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	79db      	ldrb	r3, [r3, #7]
 800716c:	2b02      	cmp	r3, #2
 800716e:	d102      	bne.n	8007176 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007170:	2301      	movs	r3, #1
 8007172:	73fb      	strb	r3, [r7, #15]
 8007174:	e001      	b.n	800717a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007176:	f7f9 fad5 	bl	8000724 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007180:	7bfa      	ldrb	r2, [r7, #15]
 8007182:	4611      	mov	r1, r2
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe fd68 	bl	8005c5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe fd10 	bl	8005bb6 <USBD_LL_Reset>
}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fe fd63 	bl	8005c7a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6812      	ldr	r2, [r2, #0]
 80071c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071c6:	f043 0301 	orr.w	r3, r3, #1
 80071ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	7adb      	ldrb	r3, [r3, #11]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d005      	beq.n	80071e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071d4:	4b04      	ldr	r3, [pc, #16]	; (80071e8 <HAL_PCD_SuspendCallback+0x48>)
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	4a03      	ldr	r2, [pc, #12]	; (80071e8 <HAL_PCD_SuspendCallback+0x48>)
 80071da:	f043 0306 	orr.w	r3, r3, #6
 80071de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	e000ed00 	.word	0xe000ed00

080071ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe fd59 	bl	8005cb2 <USBD_LL_Resume>
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800721a:	78fa      	ldrb	r2, [r7, #3]
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe fdb1 	bl	8005d86 <USBD_LL_IsoOUTIncomplete>
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800723e:	78fa      	ldrb	r2, [r7, #3]
 8007240:	4611      	mov	r1, r2
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe fd6d 	bl	8005d22 <USBD_LL_IsoINIncomplete>
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800725e:	4618      	mov	r0, r3
 8007260:	f7fe fdc3 	bl	8005dea <USBD_LL_DevConnected>
}
 8007264:	bf00      	nop
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800727a:	4618      	mov	r0, r3
 800727c:	f7fe fdc0 	bl	8005e00 <USBD_LL_DevDisconnected>
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d13c      	bne.n	8007312 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007298:	4a20      	ldr	r2, [pc, #128]	; (800731c <USBD_LL_Init+0x94>)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a1e      	ldr	r2, [pc, #120]	; (800731c <USBD_LL_Init+0x94>)
 80072a4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072a8:	4b1c      	ldr	r3, [pc, #112]	; (800731c <USBD_LL_Init+0x94>)
 80072aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80072b0:	4b1a      	ldr	r3, [pc, #104]	; (800731c <USBD_LL_Init+0x94>)
 80072b2:	2204      	movs	r2, #4
 80072b4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072b6:	4b19      	ldr	r3, [pc, #100]	; (800731c <USBD_LL_Init+0x94>)
 80072b8:	2202      	movs	r2, #2
 80072ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072bc:	4b17      	ldr	r3, [pc, #92]	; (800731c <USBD_LL_Init+0x94>)
 80072be:	2200      	movs	r2, #0
 80072c0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072c2:	4b16      	ldr	r3, [pc, #88]	; (800731c <USBD_LL_Init+0x94>)
 80072c4:	2202      	movs	r2, #2
 80072c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072c8:	4b14      	ldr	r3, [pc, #80]	; (800731c <USBD_LL_Init+0x94>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072ce:	4b13      	ldr	r3, [pc, #76]	; (800731c <USBD_LL_Init+0x94>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072d4:	4b11      	ldr	r3, [pc, #68]	; (800731c <USBD_LL_Init+0x94>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80072da:	4b10      	ldr	r3, [pc, #64]	; (800731c <USBD_LL_Init+0x94>)
 80072dc:	2200      	movs	r2, #0
 80072de:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80072e0:	4b0e      	ldr	r3, [pc, #56]	; (800731c <USBD_LL_Init+0x94>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80072e6:	480d      	ldr	r0, [pc, #52]	; (800731c <USBD_LL_Init+0x94>)
 80072e8:	f7f9 ffd9 	bl	800129e <HAL_PCD_Init>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80072f2:	f7f9 fa17 	bl	8000724 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80072f6:	2180      	movs	r1, #128	; 0x80
 80072f8:	4808      	ldr	r0, [pc, #32]	; (800731c <USBD_LL_Init+0x94>)
 80072fa:	f7fb f9ec 	bl	80026d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80072fe:	2240      	movs	r2, #64	; 0x40
 8007300:	2100      	movs	r1, #0
 8007302:	4806      	ldr	r0, [pc, #24]	; (800731c <USBD_LL_Init+0x94>)
 8007304:	f7fb f9a0 	bl	8002648 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007308:	2280      	movs	r2, #128	; 0x80
 800730a:	2101      	movs	r1, #1
 800730c:	4803      	ldr	r0, [pc, #12]	; (800731c <USBD_LL_Init+0x94>)
 800730e:	f7fb f99b 	bl	8002648 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	200007c8 	.word	0x200007c8

08007320 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007336:	4618      	mov	r0, r3
 8007338:	f7fa f8c0 	bl	80014bc <HAL_PCD_Start>
 800733c:	4603      	mov	r3, r0
 800733e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	4618      	mov	r0, r3
 8007344:	f000 f930 	bl	80075a8 <USBD_Get_USB_Status>
 8007348:	4603      	mov	r3, r0
 800734a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800734c:	7bbb      	ldrb	r3, [r7, #14]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	4608      	mov	r0, r1
 8007360:	4611      	mov	r1, r2
 8007362:	461a      	mov	r2, r3
 8007364:	4603      	mov	r3, r0
 8007366:	70fb      	strb	r3, [r7, #3]
 8007368:	460b      	mov	r3, r1
 800736a:	70bb      	strb	r3, [r7, #2]
 800736c:	4613      	mov	r3, r2
 800736e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800737e:	78bb      	ldrb	r3, [r7, #2]
 8007380:	883a      	ldrh	r2, [r7, #0]
 8007382:	78f9      	ldrb	r1, [r7, #3]
 8007384:	f7fa fd94 	bl	8001eb0 <HAL_PCD_EP_Open>
 8007388:	4603      	mov	r3, r0
 800738a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800738c:	7bfb      	ldrb	r3, [r7, #15]
 800738e:	4618      	mov	r0, r3
 8007390:	f000 f90a 	bl	80075a8 <USBD_Get_USB_Status>
 8007394:	4603      	mov	r3, r0
 8007396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007398:	7bbb      	ldrb	r3, [r7, #14]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	460b      	mov	r3, r1
 80073ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073bc:	78fa      	ldrb	r2, [r7, #3]
 80073be:	4611      	mov	r1, r2
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fa fddd 	bl	8001f80 <HAL_PCD_EP_Close>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 f8eb 	bl	80075a8 <USBD_Get_USB_Status>
 80073d2:	4603      	mov	r3, r0
 80073d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073fa:	78fa      	ldrb	r2, [r7, #3]
 80073fc:	4611      	mov	r1, r2
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fa fe7d 	bl	80020fe <HAL_PCD_EP_SetStall>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	4618      	mov	r0, r3
 800740c:	f000 f8cc 	bl	80075a8 <USBD_Get_USB_Status>
 8007410:	4603      	mov	r3, r0
 8007412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007414:	7bbb      	ldrb	r3, [r7, #14]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	460b      	mov	r3, r1
 8007428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007438:	78fa      	ldrb	r2, [r7, #3]
 800743a:	4611      	mov	r1, r2
 800743c:	4618      	mov	r0, r3
 800743e:	f7fa fec1 	bl	80021c4 <HAL_PCD_EP_ClrStall>
 8007442:	4603      	mov	r3, r0
 8007444:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 f8ad 	bl	80075a8 <USBD_Get_USB_Status>
 800744e:	4603      	mov	r3, r0
 8007450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007452:	7bbb      	ldrb	r3, [r7, #14]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800746e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007474:	2b00      	cmp	r3, #0
 8007476:	da0b      	bge.n	8007490 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	4613      	mov	r3, r2
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	440b      	add	r3, r1
 800748a:	3316      	adds	r3, #22
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	e00b      	b.n	80074a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007496:	68f9      	ldr	r1, [r7, #12]
 8007498:	4613      	mov	r3, r2
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	440b      	add	r3, r1
 80074a2:	f203 2356 	addw	r3, r3, #598	; 0x256
 80074a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	4611      	mov	r1, r2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fa fcc8 	bl	8001e68 <HAL_PCD_SetAddress>
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 f862 	bl	80075a8 <USBD_Get_USB_Status>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b086      	sub	sp, #24
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
 80074fe:	460b      	mov	r3, r1
 8007500:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007510:	7af9      	ldrb	r1, [r7, #11]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	f7fa fdb8 	bl	800208a <HAL_PCD_EP_Transmit>
 800751a:	4603      	mov	r3, r0
 800751c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	4618      	mov	r0, r3
 8007522:	f000 f841 	bl	80075a8 <USBD_Get_USB_Status>
 8007526:	4603      	mov	r3, r0
 8007528:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800752a:	7dbb      	ldrb	r3, [r7, #22]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3718      	adds	r7, #24
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	607a      	str	r2, [r7, #4]
 800753e:	603b      	str	r3, [r7, #0]
 8007540:	460b      	mov	r3, r1
 8007542:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007552:	7af9      	ldrb	r1, [r7, #11]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	f7fa fd5c 	bl	8002014 <HAL_PCD_EP_Receive>
 800755c:	4603      	mov	r3, r0
 800755e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	4618      	mov	r0, r3
 8007564:	f000 f820 	bl	80075a8 <USBD_Get_USB_Status>
 8007568:	4603      	mov	r3, r0
 800756a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800756c:	7dbb      	ldrb	r3, [r7, #22]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007580:	4b03      	ldr	r3, [pc, #12]	; (8007590 <USBD_static_malloc+0x18>)
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	20000cac 	.word	0x20000cac

08007594 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]

}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d817      	bhi.n	80075ec <USBD_Get_USB_Status+0x44>
 80075bc:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <USBD_Get_USB_Status+0x1c>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	080075d5 	.word	0x080075d5
 80075c8:	080075db 	.word	0x080075db
 80075cc:	080075e1 	.word	0x080075e1
 80075d0:	080075e7 	.word	0x080075e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
    break;
 80075d8:	e00b      	b.n	80075f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075da:	2303      	movs	r3, #3
 80075dc:	73fb      	strb	r3, [r7, #15]
    break;
 80075de:	e008      	b.n	80075f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80075e0:	2301      	movs	r3, #1
 80075e2:	73fb      	strb	r3, [r7, #15]
    break;
 80075e4:	e005      	b.n	80075f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80075e6:	2303      	movs	r3, #3
 80075e8:	73fb      	strb	r3, [r7, #15]
    break;
 80075ea:	e002      	b.n	80075f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80075ec:	2303      	movs	r3, #3
 80075ee:	73fb      	strb	r3, [r7, #15]
    break;
 80075f0:	bf00      	nop
  }
  return usb_status;
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <sbrk_aligned>:
 8007600:	b570      	push	{r4, r5, r6, lr}
 8007602:	4e0e      	ldr	r6, [pc, #56]	; (800763c <sbrk_aligned+0x3c>)
 8007604:	460c      	mov	r4, r1
 8007606:	6831      	ldr	r1, [r6, #0]
 8007608:	4605      	mov	r5, r0
 800760a:	b911      	cbnz	r1, 8007612 <sbrk_aligned+0x12>
 800760c:	f000 faea 	bl	8007be4 <_sbrk_r>
 8007610:	6030      	str	r0, [r6, #0]
 8007612:	4621      	mov	r1, r4
 8007614:	4628      	mov	r0, r5
 8007616:	f000 fae5 	bl	8007be4 <_sbrk_r>
 800761a:	1c43      	adds	r3, r0, #1
 800761c:	d00a      	beq.n	8007634 <sbrk_aligned+0x34>
 800761e:	1cc4      	adds	r4, r0, #3
 8007620:	f024 0403 	bic.w	r4, r4, #3
 8007624:	42a0      	cmp	r0, r4
 8007626:	d007      	beq.n	8007638 <sbrk_aligned+0x38>
 8007628:	1a21      	subs	r1, r4, r0
 800762a:	4628      	mov	r0, r5
 800762c:	f000 fada 	bl	8007be4 <_sbrk_r>
 8007630:	3001      	adds	r0, #1
 8007632:	d101      	bne.n	8007638 <sbrk_aligned+0x38>
 8007634:	f04f 34ff 	mov.w	r4, #4294967295
 8007638:	4620      	mov	r0, r4
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	20000d08 	.word	0x20000d08

08007640 <_malloc_r>:
 8007640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007644:	1ccd      	adds	r5, r1, #3
 8007646:	f025 0503 	bic.w	r5, r5, #3
 800764a:	3508      	adds	r5, #8
 800764c:	2d0c      	cmp	r5, #12
 800764e:	bf38      	it	cc
 8007650:	250c      	movcc	r5, #12
 8007652:	2d00      	cmp	r5, #0
 8007654:	4607      	mov	r7, r0
 8007656:	db01      	blt.n	800765c <_malloc_r+0x1c>
 8007658:	42a9      	cmp	r1, r5
 800765a:	d905      	bls.n	8007668 <_malloc_r+0x28>
 800765c:	230c      	movs	r3, #12
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	2600      	movs	r6, #0
 8007662:	4630      	mov	r0, r6
 8007664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007668:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800773c <_malloc_r+0xfc>
 800766c:	f000 f868 	bl	8007740 <__malloc_lock>
 8007670:	f8d8 3000 	ldr.w	r3, [r8]
 8007674:	461c      	mov	r4, r3
 8007676:	bb5c      	cbnz	r4, 80076d0 <_malloc_r+0x90>
 8007678:	4629      	mov	r1, r5
 800767a:	4638      	mov	r0, r7
 800767c:	f7ff ffc0 	bl	8007600 <sbrk_aligned>
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	4604      	mov	r4, r0
 8007684:	d155      	bne.n	8007732 <_malloc_r+0xf2>
 8007686:	f8d8 4000 	ldr.w	r4, [r8]
 800768a:	4626      	mov	r6, r4
 800768c:	2e00      	cmp	r6, #0
 800768e:	d145      	bne.n	800771c <_malloc_r+0xdc>
 8007690:	2c00      	cmp	r4, #0
 8007692:	d048      	beq.n	8007726 <_malloc_r+0xe6>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	4631      	mov	r1, r6
 8007698:	4638      	mov	r0, r7
 800769a:	eb04 0903 	add.w	r9, r4, r3
 800769e:	f000 faa1 	bl	8007be4 <_sbrk_r>
 80076a2:	4581      	cmp	r9, r0
 80076a4:	d13f      	bne.n	8007726 <_malloc_r+0xe6>
 80076a6:	6821      	ldr	r1, [r4, #0]
 80076a8:	1a6d      	subs	r5, r5, r1
 80076aa:	4629      	mov	r1, r5
 80076ac:	4638      	mov	r0, r7
 80076ae:	f7ff ffa7 	bl	8007600 <sbrk_aligned>
 80076b2:	3001      	adds	r0, #1
 80076b4:	d037      	beq.n	8007726 <_malloc_r+0xe6>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	442b      	add	r3, r5
 80076ba:	6023      	str	r3, [r4, #0]
 80076bc:	f8d8 3000 	ldr.w	r3, [r8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d038      	beq.n	8007736 <_malloc_r+0xf6>
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	42a2      	cmp	r2, r4
 80076c8:	d12b      	bne.n	8007722 <_malloc_r+0xe2>
 80076ca:	2200      	movs	r2, #0
 80076cc:	605a      	str	r2, [r3, #4]
 80076ce:	e00f      	b.n	80076f0 <_malloc_r+0xb0>
 80076d0:	6822      	ldr	r2, [r4, #0]
 80076d2:	1b52      	subs	r2, r2, r5
 80076d4:	d41f      	bmi.n	8007716 <_malloc_r+0xd6>
 80076d6:	2a0b      	cmp	r2, #11
 80076d8:	d917      	bls.n	800770a <_malloc_r+0xca>
 80076da:	1961      	adds	r1, r4, r5
 80076dc:	42a3      	cmp	r3, r4
 80076de:	6025      	str	r5, [r4, #0]
 80076e0:	bf18      	it	ne
 80076e2:	6059      	strne	r1, [r3, #4]
 80076e4:	6863      	ldr	r3, [r4, #4]
 80076e6:	bf08      	it	eq
 80076e8:	f8c8 1000 	streq.w	r1, [r8]
 80076ec:	5162      	str	r2, [r4, r5]
 80076ee:	604b      	str	r3, [r1, #4]
 80076f0:	4638      	mov	r0, r7
 80076f2:	f104 060b 	add.w	r6, r4, #11
 80076f6:	f000 f829 	bl	800774c <__malloc_unlock>
 80076fa:	f026 0607 	bic.w	r6, r6, #7
 80076fe:	1d23      	adds	r3, r4, #4
 8007700:	1af2      	subs	r2, r6, r3
 8007702:	d0ae      	beq.n	8007662 <_malloc_r+0x22>
 8007704:	1b9b      	subs	r3, r3, r6
 8007706:	50a3      	str	r3, [r4, r2]
 8007708:	e7ab      	b.n	8007662 <_malloc_r+0x22>
 800770a:	42a3      	cmp	r3, r4
 800770c:	6862      	ldr	r2, [r4, #4]
 800770e:	d1dd      	bne.n	80076cc <_malloc_r+0x8c>
 8007710:	f8c8 2000 	str.w	r2, [r8]
 8007714:	e7ec      	b.n	80076f0 <_malloc_r+0xb0>
 8007716:	4623      	mov	r3, r4
 8007718:	6864      	ldr	r4, [r4, #4]
 800771a:	e7ac      	b.n	8007676 <_malloc_r+0x36>
 800771c:	4634      	mov	r4, r6
 800771e:	6876      	ldr	r6, [r6, #4]
 8007720:	e7b4      	b.n	800768c <_malloc_r+0x4c>
 8007722:	4613      	mov	r3, r2
 8007724:	e7cc      	b.n	80076c0 <_malloc_r+0x80>
 8007726:	230c      	movs	r3, #12
 8007728:	603b      	str	r3, [r7, #0]
 800772a:	4638      	mov	r0, r7
 800772c:	f000 f80e 	bl	800774c <__malloc_unlock>
 8007730:	e797      	b.n	8007662 <_malloc_r+0x22>
 8007732:	6025      	str	r5, [r4, #0]
 8007734:	e7dc      	b.n	80076f0 <_malloc_r+0xb0>
 8007736:	605b      	str	r3, [r3, #4]
 8007738:	deff      	udf	#255	; 0xff
 800773a:	bf00      	nop
 800773c:	20000d04 	.word	0x20000d04

08007740 <__malloc_lock>:
 8007740:	4801      	ldr	r0, [pc, #4]	; (8007748 <__malloc_lock+0x8>)
 8007742:	f000 ba9c 	b.w	8007c7e <__retarget_lock_acquire_recursive>
 8007746:	bf00      	nop
 8007748:	20000e4c 	.word	0x20000e4c

0800774c <__malloc_unlock>:
 800774c:	4801      	ldr	r0, [pc, #4]	; (8007754 <__malloc_unlock+0x8>)
 800774e:	f000 ba97 	b.w	8007c80 <__retarget_lock_release_recursive>
 8007752:	bf00      	nop
 8007754:	20000e4c 	.word	0x20000e4c

08007758 <std>:
 8007758:	2300      	movs	r3, #0
 800775a:	b510      	push	{r4, lr}
 800775c:	4604      	mov	r4, r0
 800775e:	e9c0 3300 	strd	r3, r3, [r0]
 8007762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007766:	6083      	str	r3, [r0, #8]
 8007768:	8181      	strh	r1, [r0, #12]
 800776a:	6643      	str	r3, [r0, #100]	; 0x64
 800776c:	81c2      	strh	r2, [r0, #14]
 800776e:	6183      	str	r3, [r0, #24]
 8007770:	4619      	mov	r1, r3
 8007772:	2208      	movs	r2, #8
 8007774:	305c      	adds	r0, #92	; 0x5c
 8007776:	f000 f9e5 	bl	8007b44 <memset>
 800777a:	4b0d      	ldr	r3, [pc, #52]	; (80077b0 <std+0x58>)
 800777c:	6263      	str	r3, [r4, #36]	; 0x24
 800777e:	4b0d      	ldr	r3, [pc, #52]	; (80077b4 <std+0x5c>)
 8007780:	62a3      	str	r3, [r4, #40]	; 0x28
 8007782:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <std+0x60>)
 8007784:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007786:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <std+0x64>)
 8007788:	6323      	str	r3, [r4, #48]	; 0x30
 800778a:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <std+0x68>)
 800778c:	6224      	str	r4, [r4, #32]
 800778e:	429c      	cmp	r4, r3
 8007790:	d006      	beq.n	80077a0 <std+0x48>
 8007792:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007796:	4294      	cmp	r4, r2
 8007798:	d002      	beq.n	80077a0 <std+0x48>
 800779a:	33d0      	adds	r3, #208	; 0xd0
 800779c:	429c      	cmp	r4, r3
 800779e:	d105      	bne.n	80077ac <std+0x54>
 80077a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a8:	f000 ba68 	b.w	8007c7c <__retarget_lock_init_recursive>
 80077ac:	bd10      	pop	{r4, pc}
 80077ae:	bf00      	nop
 80077b0:	08007995 	.word	0x08007995
 80077b4:	080079b7 	.word	0x080079b7
 80077b8:	080079ef 	.word	0x080079ef
 80077bc:	08007a13 	.word	0x08007a13
 80077c0:	20000d0c 	.word	0x20000d0c

080077c4 <stdio_exit_handler>:
 80077c4:	4a02      	ldr	r2, [pc, #8]	; (80077d0 <stdio_exit_handler+0xc>)
 80077c6:	4903      	ldr	r1, [pc, #12]	; (80077d4 <stdio_exit_handler+0x10>)
 80077c8:	4803      	ldr	r0, [pc, #12]	; (80077d8 <stdio_exit_handler+0x14>)
 80077ca:	f000 b869 	b.w	80078a0 <_fwalk_sglue>
 80077ce:	bf00      	nop
 80077d0:	20000158 	.word	0x20000158
 80077d4:	08007e29 	.word	0x08007e29
 80077d8:	20000164 	.word	0x20000164

080077dc <cleanup_stdio>:
 80077dc:	6841      	ldr	r1, [r0, #4]
 80077de:	4b0c      	ldr	r3, [pc, #48]	; (8007810 <cleanup_stdio+0x34>)
 80077e0:	4299      	cmp	r1, r3
 80077e2:	b510      	push	{r4, lr}
 80077e4:	4604      	mov	r4, r0
 80077e6:	d001      	beq.n	80077ec <cleanup_stdio+0x10>
 80077e8:	f000 fb1e 	bl	8007e28 <_fflush_r>
 80077ec:	68a1      	ldr	r1, [r4, #8]
 80077ee:	4b09      	ldr	r3, [pc, #36]	; (8007814 <cleanup_stdio+0x38>)
 80077f0:	4299      	cmp	r1, r3
 80077f2:	d002      	beq.n	80077fa <cleanup_stdio+0x1e>
 80077f4:	4620      	mov	r0, r4
 80077f6:	f000 fb17 	bl	8007e28 <_fflush_r>
 80077fa:	68e1      	ldr	r1, [r4, #12]
 80077fc:	4b06      	ldr	r3, [pc, #24]	; (8007818 <cleanup_stdio+0x3c>)
 80077fe:	4299      	cmp	r1, r3
 8007800:	d004      	beq.n	800780c <cleanup_stdio+0x30>
 8007802:	4620      	mov	r0, r4
 8007804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007808:	f000 bb0e 	b.w	8007e28 <_fflush_r>
 800780c:	bd10      	pop	{r4, pc}
 800780e:	bf00      	nop
 8007810:	20000d0c 	.word	0x20000d0c
 8007814:	20000d74 	.word	0x20000d74
 8007818:	20000ddc 	.word	0x20000ddc

0800781c <global_stdio_init.part.0>:
 800781c:	b510      	push	{r4, lr}
 800781e:	4b0b      	ldr	r3, [pc, #44]	; (800784c <global_stdio_init.part.0+0x30>)
 8007820:	4c0b      	ldr	r4, [pc, #44]	; (8007850 <global_stdio_init.part.0+0x34>)
 8007822:	4a0c      	ldr	r2, [pc, #48]	; (8007854 <global_stdio_init.part.0+0x38>)
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	4620      	mov	r0, r4
 8007828:	2200      	movs	r2, #0
 800782a:	2104      	movs	r1, #4
 800782c:	f7ff ff94 	bl	8007758 <std>
 8007830:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007834:	2201      	movs	r2, #1
 8007836:	2109      	movs	r1, #9
 8007838:	f7ff ff8e 	bl	8007758 <std>
 800783c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007840:	2202      	movs	r2, #2
 8007842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007846:	2112      	movs	r1, #18
 8007848:	f7ff bf86 	b.w	8007758 <std>
 800784c:	20000e44 	.word	0x20000e44
 8007850:	20000d0c 	.word	0x20000d0c
 8007854:	080077c5 	.word	0x080077c5

08007858 <__sfp_lock_acquire>:
 8007858:	4801      	ldr	r0, [pc, #4]	; (8007860 <__sfp_lock_acquire+0x8>)
 800785a:	f000 ba10 	b.w	8007c7e <__retarget_lock_acquire_recursive>
 800785e:	bf00      	nop
 8007860:	20000e4d 	.word	0x20000e4d

08007864 <__sfp_lock_release>:
 8007864:	4801      	ldr	r0, [pc, #4]	; (800786c <__sfp_lock_release+0x8>)
 8007866:	f000 ba0b 	b.w	8007c80 <__retarget_lock_release_recursive>
 800786a:	bf00      	nop
 800786c:	20000e4d 	.word	0x20000e4d

08007870 <__sinit>:
 8007870:	b510      	push	{r4, lr}
 8007872:	4604      	mov	r4, r0
 8007874:	f7ff fff0 	bl	8007858 <__sfp_lock_acquire>
 8007878:	6a23      	ldr	r3, [r4, #32]
 800787a:	b11b      	cbz	r3, 8007884 <__sinit+0x14>
 800787c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007880:	f7ff bff0 	b.w	8007864 <__sfp_lock_release>
 8007884:	4b04      	ldr	r3, [pc, #16]	; (8007898 <__sinit+0x28>)
 8007886:	6223      	str	r3, [r4, #32]
 8007888:	4b04      	ldr	r3, [pc, #16]	; (800789c <__sinit+0x2c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1f5      	bne.n	800787c <__sinit+0xc>
 8007890:	f7ff ffc4 	bl	800781c <global_stdio_init.part.0>
 8007894:	e7f2      	b.n	800787c <__sinit+0xc>
 8007896:	bf00      	nop
 8007898:	080077dd 	.word	0x080077dd
 800789c:	20000e44 	.word	0x20000e44

080078a0 <_fwalk_sglue>:
 80078a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a4:	4607      	mov	r7, r0
 80078a6:	4688      	mov	r8, r1
 80078a8:	4614      	mov	r4, r2
 80078aa:	2600      	movs	r6, #0
 80078ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078b0:	f1b9 0901 	subs.w	r9, r9, #1
 80078b4:	d505      	bpl.n	80078c2 <_fwalk_sglue+0x22>
 80078b6:	6824      	ldr	r4, [r4, #0]
 80078b8:	2c00      	cmp	r4, #0
 80078ba:	d1f7      	bne.n	80078ac <_fwalk_sglue+0xc>
 80078bc:	4630      	mov	r0, r6
 80078be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078c2:	89ab      	ldrh	r3, [r5, #12]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d907      	bls.n	80078d8 <_fwalk_sglue+0x38>
 80078c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078cc:	3301      	adds	r3, #1
 80078ce:	d003      	beq.n	80078d8 <_fwalk_sglue+0x38>
 80078d0:	4629      	mov	r1, r5
 80078d2:	4638      	mov	r0, r7
 80078d4:	47c0      	blx	r8
 80078d6:	4306      	orrs	r6, r0
 80078d8:	3568      	adds	r5, #104	; 0x68
 80078da:	e7e9      	b.n	80078b0 <_fwalk_sglue+0x10>

080078dc <_puts_r>:
 80078dc:	6a03      	ldr	r3, [r0, #32]
 80078de:	b570      	push	{r4, r5, r6, lr}
 80078e0:	6884      	ldr	r4, [r0, #8]
 80078e2:	4605      	mov	r5, r0
 80078e4:	460e      	mov	r6, r1
 80078e6:	b90b      	cbnz	r3, 80078ec <_puts_r+0x10>
 80078e8:	f7ff ffc2 	bl	8007870 <__sinit>
 80078ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078ee:	07db      	lsls	r3, r3, #31
 80078f0:	d405      	bmi.n	80078fe <_puts_r+0x22>
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	0598      	lsls	r0, r3, #22
 80078f6:	d402      	bmi.n	80078fe <_puts_r+0x22>
 80078f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078fa:	f000 f9c0 	bl	8007c7e <__retarget_lock_acquire_recursive>
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	0719      	lsls	r1, r3, #28
 8007902:	d513      	bpl.n	800792c <_puts_r+0x50>
 8007904:	6923      	ldr	r3, [r4, #16]
 8007906:	b18b      	cbz	r3, 800792c <_puts_r+0x50>
 8007908:	3e01      	subs	r6, #1
 800790a:	68a3      	ldr	r3, [r4, #8]
 800790c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007910:	3b01      	subs	r3, #1
 8007912:	60a3      	str	r3, [r4, #8]
 8007914:	b9e9      	cbnz	r1, 8007952 <_puts_r+0x76>
 8007916:	2b00      	cmp	r3, #0
 8007918:	da2e      	bge.n	8007978 <_puts_r+0x9c>
 800791a:	4622      	mov	r2, r4
 800791c:	210a      	movs	r1, #10
 800791e:	4628      	mov	r0, r5
 8007920:	f000 f87b 	bl	8007a1a <__swbuf_r>
 8007924:	3001      	adds	r0, #1
 8007926:	d007      	beq.n	8007938 <_puts_r+0x5c>
 8007928:	250a      	movs	r5, #10
 800792a:	e007      	b.n	800793c <_puts_r+0x60>
 800792c:	4621      	mov	r1, r4
 800792e:	4628      	mov	r0, r5
 8007930:	f000 f8b0 	bl	8007a94 <__swsetup_r>
 8007934:	2800      	cmp	r0, #0
 8007936:	d0e7      	beq.n	8007908 <_puts_r+0x2c>
 8007938:	f04f 35ff 	mov.w	r5, #4294967295
 800793c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800793e:	07da      	lsls	r2, r3, #31
 8007940:	d405      	bmi.n	800794e <_puts_r+0x72>
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	059b      	lsls	r3, r3, #22
 8007946:	d402      	bmi.n	800794e <_puts_r+0x72>
 8007948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800794a:	f000 f999 	bl	8007c80 <__retarget_lock_release_recursive>
 800794e:	4628      	mov	r0, r5
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	2b00      	cmp	r3, #0
 8007954:	da04      	bge.n	8007960 <_puts_r+0x84>
 8007956:	69a2      	ldr	r2, [r4, #24]
 8007958:	429a      	cmp	r2, r3
 800795a:	dc06      	bgt.n	800796a <_puts_r+0x8e>
 800795c:	290a      	cmp	r1, #10
 800795e:	d004      	beq.n	800796a <_puts_r+0x8e>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	6022      	str	r2, [r4, #0]
 8007966:	7019      	strb	r1, [r3, #0]
 8007968:	e7cf      	b.n	800790a <_puts_r+0x2e>
 800796a:	4622      	mov	r2, r4
 800796c:	4628      	mov	r0, r5
 800796e:	f000 f854 	bl	8007a1a <__swbuf_r>
 8007972:	3001      	adds	r0, #1
 8007974:	d1c9      	bne.n	800790a <_puts_r+0x2e>
 8007976:	e7df      	b.n	8007938 <_puts_r+0x5c>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	250a      	movs	r5, #10
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	6022      	str	r2, [r4, #0]
 8007980:	701d      	strb	r5, [r3, #0]
 8007982:	e7db      	b.n	800793c <_puts_r+0x60>

08007984 <puts>:
 8007984:	4b02      	ldr	r3, [pc, #8]	; (8007990 <puts+0xc>)
 8007986:	4601      	mov	r1, r0
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	f7ff bfa7 	b.w	80078dc <_puts_r>
 800798e:	bf00      	nop
 8007990:	200001b0 	.word	0x200001b0

08007994 <__sread>:
 8007994:	b510      	push	{r4, lr}
 8007996:	460c      	mov	r4, r1
 8007998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800799c:	f000 f910 	bl	8007bc0 <_read_r>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	bfab      	itete	ge
 80079a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079a6:	89a3      	ldrhlt	r3, [r4, #12]
 80079a8:	181b      	addge	r3, r3, r0
 80079aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079ae:	bfac      	ite	ge
 80079b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80079b2:	81a3      	strhlt	r3, [r4, #12]
 80079b4:	bd10      	pop	{r4, pc}

080079b6 <__swrite>:
 80079b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ba:	461f      	mov	r7, r3
 80079bc:	898b      	ldrh	r3, [r1, #12]
 80079be:	05db      	lsls	r3, r3, #23
 80079c0:	4605      	mov	r5, r0
 80079c2:	460c      	mov	r4, r1
 80079c4:	4616      	mov	r6, r2
 80079c6:	d505      	bpl.n	80079d4 <__swrite+0x1e>
 80079c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079cc:	2302      	movs	r3, #2
 80079ce:	2200      	movs	r2, #0
 80079d0:	f000 f8e4 	bl	8007b9c <_lseek_r>
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079de:	81a3      	strh	r3, [r4, #12]
 80079e0:	4632      	mov	r2, r6
 80079e2:	463b      	mov	r3, r7
 80079e4:	4628      	mov	r0, r5
 80079e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ea:	f000 b90b 	b.w	8007c04 <_write_r>

080079ee <__sseek>:
 80079ee:	b510      	push	{r4, lr}
 80079f0:	460c      	mov	r4, r1
 80079f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f6:	f000 f8d1 	bl	8007b9c <_lseek_r>
 80079fa:	1c43      	adds	r3, r0, #1
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	bf15      	itete	ne
 8007a00:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a0a:	81a3      	strheq	r3, [r4, #12]
 8007a0c:	bf18      	it	ne
 8007a0e:	81a3      	strhne	r3, [r4, #12]
 8007a10:	bd10      	pop	{r4, pc}

08007a12 <__sclose>:
 8007a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a16:	f000 b8b1 	b.w	8007b7c <_close_r>

08007a1a <__swbuf_r>:
 8007a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1c:	460e      	mov	r6, r1
 8007a1e:	4614      	mov	r4, r2
 8007a20:	4605      	mov	r5, r0
 8007a22:	b118      	cbz	r0, 8007a2c <__swbuf_r+0x12>
 8007a24:	6a03      	ldr	r3, [r0, #32]
 8007a26:	b90b      	cbnz	r3, 8007a2c <__swbuf_r+0x12>
 8007a28:	f7ff ff22 	bl	8007870 <__sinit>
 8007a2c:	69a3      	ldr	r3, [r4, #24]
 8007a2e:	60a3      	str	r3, [r4, #8]
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	071a      	lsls	r2, r3, #28
 8007a34:	d525      	bpl.n	8007a82 <__swbuf_r+0x68>
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	b31b      	cbz	r3, 8007a82 <__swbuf_r+0x68>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	6922      	ldr	r2, [r4, #16]
 8007a3e:	1a98      	subs	r0, r3, r2
 8007a40:	6963      	ldr	r3, [r4, #20]
 8007a42:	b2f6      	uxtb	r6, r6
 8007a44:	4283      	cmp	r3, r0
 8007a46:	4637      	mov	r7, r6
 8007a48:	dc04      	bgt.n	8007a54 <__swbuf_r+0x3a>
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f000 f9eb 	bl	8007e28 <_fflush_r>
 8007a52:	b9e0      	cbnz	r0, 8007a8e <__swbuf_r+0x74>
 8007a54:	68a3      	ldr	r3, [r4, #8]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	60a3      	str	r3, [r4, #8]
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	6022      	str	r2, [r4, #0]
 8007a60:	701e      	strb	r6, [r3, #0]
 8007a62:	6962      	ldr	r2, [r4, #20]
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d004      	beq.n	8007a74 <__swbuf_r+0x5a>
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	07db      	lsls	r3, r3, #31
 8007a6e:	d506      	bpl.n	8007a7e <__swbuf_r+0x64>
 8007a70:	2e0a      	cmp	r6, #10
 8007a72:	d104      	bne.n	8007a7e <__swbuf_r+0x64>
 8007a74:	4621      	mov	r1, r4
 8007a76:	4628      	mov	r0, r5
 8007a78:	f000 f9d6 	bl	8007e28 <_fflush_r>
 8007a7c:	b938      	cbnz	r0, 8007a8e <__swbuf_r+0x74>
 8007a7e:	4638      	mov	r0, r7
 8007a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a82:	4621      	mov	r1, r4
 8007a84:	4628      	mov	r0, r5
 8007a86:	f000 f805 	bl	8007a94 <__swsetup_r>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d0d5      	beq.n	8007a3a <__swbuf_r+0x20>
 8007a8e:	f04f 37ff 	mov.w	r7, #4294967295
 8007a92:	e7f4      	b.n	8007a7e <__swbuf_r+0x64>

08007a94 <__swsetup_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4b2a      	ldr	r3, [pc, #168]	; (8007b40 <__swsetup_r+0xac>)
 8007a98:	4605      	mov	r5, r0
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	b118      	cbz	r0, 8007aa8 <__swsetup_r+0x14>
 8007aa0:	6a03      	ldr	r3, [r0, #32]
 8007aa2:	b90b      	cbnz	r3, 8007aa8 <__swsetup_r+0x14>
 8007aa4:	f7ff fee4 	bl	8007870 <__sinit>
 8007aa8:	89a3      	ldrh	r3, [r4, #12]
 8007aaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007aae:	0718      	lsls	r0, r3, #28
 8007ab0:	d422      	bmi.n	8007af8 <__swsetup_r+0x64>
 8007ab2:	06d9      	lsls	r1, r3, #27
 8007ab4:	d407      	bmi.n	8007ac6 <__swsetup_r+0x32>
 8007ab6:	2309      	movs	r3, #9
 8007ab8:	602b      	str	r3, [r5, #0]
 8007aba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007abe:	81a3      	strh	r3, [r4, #12]
 8007ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac4:	e034      	b.n	8007b30 <__swsetup_r+0x9c>
 8007ac6:	0758      	lsls	r0, r3, #29
 8007ac8:	d512      	bpl.n	8007af0 <__swsetup_r+0x5c>
 8007aca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007acc:	b141      	cbz	r1, 8007ae0 <__swsetup_r+0x4c>
 8007ace:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ad2:	4299      	cmp	r1, r3
 8007ad4:	d002      	beq.n	8007adc <__swsetup_r+0x48>
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f000 f8d4 	bl	8007c84 <_free_r>
 8007adc:	2300      	movs	r3, #0
 8007ade:	6363      	str	r3, [r4, #52]	; 0x34
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ae6:	81a3      	strh	r3, [r4, #12]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	6063      	str	r3, [r4, #4]
 8007aec:	6923      	ldr	r3, [r4, #16]
 8007aee:	6023      	str	r3, [r4, #0]
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	f043 0308 	orr.w	r3, r3, #8
 8007af6:	81a3      	strh	r3, [r4, #12]
 8007af8:	6923      	ldr	r3, [r4, #16]
 8007afa:	b94b      	cbnz	r3, 8007b10 <__swsetup_r+0x7c>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b06:	d003      	beq.n	8007b10 <__swsetup_r+0x7c>
 8007b08:	4621      	mov	r1, r4
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f000 f9da 	bl	8007ec4 <__smakebuf_r>
 8007b10:	89a0      	ldrh	r0, [r4, #12]
 8007b12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b16:	f010 0301 	ands.w	r3, r0, #1
 8007b1a:	d00a      	beq.n	8007b32 <__swsetup_r+0x9e>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60a3      	str	r3, [r4, #8]
 8007b20:	6963      	ldr	r3, [r4, #20]
 8007b22:	425b      	negs	r3, r3
 8007b24:	61a3      	str	r3, [r4, #24]
 8007b26:	6923      	ldr	r3, [r4, #16]
 8007b28:	b943      	cbnz	r3, 8007b3c <__swsetup_r+0xa8>
 8007b2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b2e:	d1c4      	bne.n	8007aba <__swsetup_r+0x26>
 8007b30:	bd38      	pop	{r3, r4, r5, pc}
 8007b32:	0781      	lsls	r1, r0, #30
 8007b34:	bf58      	it	pl
 8007b36:	6963      	ldrpl	r3, [r4, #20]
 8007b38:	60a3      	str	r3, [r4, #8]
 8007b3a:	e7f4      	b.n	8007b26 <__swsetup_r+0x92>
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	e7f7      	b.n	8007b30 <__swsetup_r+0x9c>
 8007b40:	200001b0 	.word	0x200001b0

08007b44 <memset>:
 8007b44:	4402      	add	r2, r0
 8007b46:	4603      	mov	r3, r0
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d100      	bne.n	8007b4e <memset+0xa>
 8007b4c:	4770      	bx	lr
 8007b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b52:	e7f9      	b.n	8007b48 <memset+0x4>

08007b54 <strncpy>:
 8007b54:	b510      	push	{r4, lr}
 8007b56:	3901      	subs	r1, #1
 8007b58:	4603      	mov	r3, r0
 8007b5a:	b132      	cbz	r2, 8007b6a <strncpy+0x16>
 8007b5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b60:	f803 4b01 	strb.w	r4, [r3], #1
 8007b64:	3a01      	subs	r2, #1
 8007b66:	2c00      	cmp	r4, #0
 8007b68:	d1f7      	bne.n	8007b5a <strncpy+0x6>
 8007b6a:	441a      	add	r2, r3
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d100      	bne.n	8007b74 <strncpy+0x20>
 8007b72:	bd10      	pop	{r4, pc}
 8007b74:	f803 1b01 	strb.w	r1, [r3], #1
 8007b78:	e7f9      	b.n	8007b6e <strncpy+0x1a>
	...

08007b7c <_close_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d06      	ldr	r5, [pc, #24]	; (8007b98 <_close_r+0x1c>)
 8007b80:	2300      	movs	r3, #0
 8007b82:	4604      	mov	r4, r0
 8007b84:	4608      	mov	r0, r1
 8007b86:	602b      	str	r3, [r5, #0]
 8007b88:	f7f8 feb3 	bl	80008f2 <_close>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d102      	bne.n	8007b96 <_close_r+0x1a>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	b103      	cbz	r3, 8007b96 <_close_r+0x1a>
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	bd38      	pop	{r3, r4, r5, pc}
 8007b98:	20000e48 	.word	0x20000e48

08007b9c <_lseek_r>:
 8007b9c:	b538      	push	{r3, r4, r5, lr}
 8007b9e:	4d07      	ldr	r5, [pc, #28]	; (8007bbc <_lseek_r+0x20>)
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	4608      	mov	r0, r1
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	602a      	str	r2, [r5, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	f7f8 fec8 	bl	8000940 <_lseek>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d102      	bne.n	8007bba <_lseek_r+0x1e>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	b103      	cbz	r3, 8007bba <_lseek_r+0x1e>
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	20000e48 	.word	0x20000e48

08007bc0 <_read_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	4d07      	ldr	r5, [pc, #28]	; (8007be0 <_read_r+0x20>)
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	4608      	mov	r0, r1
 8007bc8:	4611      	mov	r1, r2
 8007bca:	2200      	movs	r2, #0
 8007bcc:	602a      	str	r2, [r5, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f7f8 fe72 	bl	80008b8 <_read>
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	d102      	bne.n	8007bde <_read_r+0x1e>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	b103      	cbz	r3, 8007bde <_read_r+0x1e>
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	20000e48 	.word	0x20000e48

08007be4 <_sbrk_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	4d06      	ldr	r5, [pc, #24]	; (8007c00 <_sbrk_r+0x1c>)
 8007be8:	2300      	movs	r3, #0
 8007bea:	4604      	mov	r4, r0
 8007bec:	4608      	mov	r0, r1
 8007bee:	602b      	str	r3, [r5, #0]
 8007bf0:	f7f8 feb4 	bl	800095c <_sbrk>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	d102      	bne.n	8007bfe <_sbrk_r+0x1a>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	b103      	cbz	r3, 8007bfe <_sbrk_r+0x1a>
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	bd38      	pop	{r3, r4, r5, pc}
 8007c00:	20000e48 	.word	0x20000e48

08007c04 <_write_r>:
 8007c04:	b538      	push	{r3, r4, r5, lr}
 8007c06:	4d07      	ldr	r5, [pc, #28]	; (8007c24 <_write_r+0x20>)
 8007c08:	4604      	mov	r4, r0
 8007c0a:	4608      	mov	r0, r1
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	2200      	movs	r2, #0
 8007c10:	602a      	str	r2, [r5, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	f7f8 fd72 	bl	80006fc <_write>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	d102      	bne.n	8007c22 <_write_r+0x1e>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	b103      	cbz	r3, 8007c22 <_write_r+0x1e>
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	20000e48 	.word	0x20000e48

08007c28 <__errno>:
 8007c28:	4b01      	ldr	r3, [pc, #4]	; (8007c30 <__errno+0x8>)
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	200001b0 	.word	0x200001b0

08007c34 <__libc_init_array>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	4d0d      	ldr	r5, [pc, #52]	; (8007c6c <__libc_init_array+0x38>)
 8007c38:	4c0d      	ldr	r4, [pc, #52]	; (8007c70 <__libc_init_array+0x3c>)
 8007c3a:	1b64      	subs	r4, r4, r5
 8007c3c:	10a4      	asrs	r4, r4, #2
 8007c3e:	2600      	movs	r6, #0
 8007c40:	42a6      	cmp	r6, r4
 8007c42:	d109      	bne.n	8007c58 <__libc_init_array+0x24>
 8007c44:	4d0b      	ldr	r5, [pc, #44]	; (8007c74 <__libc_init_array+0x40>)
 8007c46:	4c0c      	ldr	r4, [pc, #48]	; (8007c78 <__libc_init_array+0x44>)
 8007c48:	f000 f99a 	bl	8007f80 <_init>
 8007c4c:	1b64      	subs	r4, r4, r5
 8007c4e:	10a4      	asrs	r4, r4, #2
 8007c50:	2600      	movs	r6, #0
 8007c52:	42a6      	cmp	r6, r4
 8007c54:	d105      	bne.n	8007c62 <__libc_init_array+0x2e>
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
 8007c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5c:	4798      	blx	r3
 8007c5e:	3601      	adds	r6, #1
 8007c60:	e7ee      	b.n	8007c40 <__libc_init_array+0xc>
 8007c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c66:	4798      	blx	r3
 8007c68:	3601      	adds	r6, #1
 8007c6a:	e7f2      	b.n	8007c52 <__libc_init_array+0x1e>
 8007c6c:	080080ec 	.word	0x080080ec
 8007c70:	080080ec 	.word	0x080080ec
 8007c74:	080080ec 	.word	0x080080ec
 8007c78:	080080f0 	.word	0x080080f0

08007c7c <__retarget_lock_init_recursive>:
 8007c7c:	4770      	bx	lr

08007c7e <__retarget_lock_acquire_recursive>:
 8007c7e:	4770      	bx	lr

08007c80 <__retarget_lock_release_recursive>:
 8007c80:	4770      	bx	lr
	...

08007c84 <_free_r>:
 8007c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c86:	2900      	cmp	r1, #0
 8007c88:	d044      	beq.n	8007d14 <_free_r+0x90>
 8007c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8e:	9001      	str	r0, [sp, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f1a1 0404 	sub.w	r4, r1, #4
 8007c96:	bfb8      	it	lt
 8007c98:	18e4      	addlt	r4, r4, r3
 8007c9a:	f7ff fd51 	bl	8007740 <__malloc_lock>
 8007c9e:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <_free_r+0x94>)
 8007ca0:	9801      	ldr	r0, [sp, #4]
 8007ca2:	6813      	ldr	r3, [r2, #0]
 8007ca4:	b933      	cbnz	r3, 8007cb4 <_free_r+0x30>
 8007ca6:	6063      	str	r3, [r4, #4]
 8007ca8:	6014      	str	r4, [r2, #0]
 8007caa:	b003      	add	sp, #12
 8007cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cb0:	f7ff bd4c 	b.w	800774c <__malloc_unlock>
 8007cb4:	42a3      	cmp	r3, r4
 8007cb6:	d908      	bls.n	8007cca <_free_r+0x46>
 8007cb8:	6825      	ldr	r5, [r4, #0]
 8007cba:	1961      	adds	r1, r4, r5
 8007cbc:	428b      	cmp	r3, r1
 8007cbe:	bf01      	itttt	eq
 8007cc0:	6819      	ldreq	r1, [r3, #0]
 8007cc2:	685b      	ldreq	r3, [r3, #4]
 8007cc4:	1949      	addeq	r1, r1, r5
 8007cc6:	6021      	streq	r1, [r4, #0]
 8007cc8:	e7ed      	b.n	8007ca6 <_free_r+0x22>
 8007cca:	461a      	mov	r2, r3
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	b10b      	cbz	r3, 8007cd4 <_free_r+0x50>
 8007cd0:	42a3      	cmp	r3, r4
 8007cd2:	d9fa      	bls.n	8007cca <_free_r+0x46>
 8007cd4:	6811      	ldr	r1, [r2, #0]
 8007cd6:	1855      	adds	r5, r2, r1
 8007cd8:	42a5      	cmp	r5, r4
 8007cda:	d10b      	bne.n	8007cf4 <_free_r+0x70>
 8007cdc:	6824      	ldr	r4, [r4, #0]
 8007cde:	4421      	add	r1, r4
 8007ce0:	1854      	adds	r4, r2, r1
 8007ce2:	42a3      	cmp	r3, r4
 8007ce4:	6011      	str	r1, [r2, #0]
 8007ce6:	d1e0      	bne.n	8007caa <_free_r+0x26>
 8007ce8:	681c      	ldr	r4, [r3, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	6053      	str	r3, [r2, #4]
 8007cee:	440c      	add	r4, r1
 8007cf0:	6014      	str	r4, [r2, #0]
 8007cf2:	e7da      	b.n	8007caa <_free_r+0x26>
 8007cf4:	d902      	bls.n	8007cfc <_free_r+0x78>
 8007cf6:	230c      	movs	r3, #12
 8007cf8:	6003      	str	r3, [r0, #0]
 8007cfa:	e7d6      	b.n	8007caa <_free_r+0x26>
 8007cfc:	6825      	ldr	r5, [r4, #0]
 8007cfe:	1961      	adds	r1, r4, r5
 8007d00:	428b      	cmp	r3, r1
 8007d02:	bf04      	itt	eq
 8007d04:	6819      	ldreq	r1, [r3, #0]
 8007d06:	685b      	ldreq	r3, [r3, #4]
 8007d08:	6063      	str	r3, [r4, #4]
 8007d0a:	bf04      	itt	eq
 8007d0c:	1949      	addeq	r1, r1, r5
 8007d0e:	6021      	streq	r1, [r4, #0]
 8007d10:	6054      	str	r4, [r2, #4]
 8007d12:	e7ca      	b.n	8007caa <_free_r+0x26>
 8007d14:	b003      	add	sp, #12
 8007d16:	bd30      	pop	{r4, r5, pc}
 8007d18:	20000d04 	.word	0x20000d04

08007d1c <__sflush_r>:
 8007d1c:	898a      	ldrh	r2, [r1, #12]
 8007d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d22:	4605      	mov	r5, r0
 8007d24:	0710      	lsls	r0, r2, #28
 8007d26:	460c      	mov	r4, r1
 8007d28:	d458      	bmi.n	8007ddc <__sflush_r+0xc0>
 8007d2a:	684b      	ldr	r3, [r1, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	dc05      	bgt.n	8007d3c <__sflush_r+0x20>
 8007d30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	dc02      	bgt.n	8007d3c <__sflush_r+0x20>
 8007d36:	2000      	movs	r0, #0
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d3e:	2e00      	cmp	r6, #0
 8007d40:	d0f9      	beq.n	8007d36 <__sflush_r+0x1a>
 8007d42:	2300      	movs	r3, #0
 8007d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d48:	682f      	ldr	r7, [r5, #0]
 8007d4a:	6a21      	ldr	r1, [r4, #32]
 8007d4c:	602b      	str	r3, [r5, #0]
 8007d4e:	d032      	beq.n	8007db6 <__sflush_r+0x9a>
 8007d50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	075a      	lsls	r2, r3, #29
 8007d56:	d505      	bpl.n	8007d64 <__sflush_r+0x48>
 8007d58:	6863      	ldr	r3, [r4, #4]
 8007d5a:	1ac0      	subs	r0, r0, r3
 8007d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d5e:	b10b      	cbz	r3, 8007d64 <__sflush_r+0x48>
 8007d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d62:	1ac0      	subs	r0, r0, r3
 8007d64:	2300      	movs	r3, #0
 8007d66:	4602      	mov	r2, r0
 8007d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d6a:	6a21      	ldr	r1, [r4, #32]
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b0      	blx	r6
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	d106      	bne.n	8007d84 <__sflush_r+0x68>
 8007d76:	6829      	ldr	r1, [r5, #0]
 8007d78:	291d      	cmp	r1, #29
 8007d7a:	d82b      	bhi.n	8007dd4 <__sflush_r+0xb8>
 8007d7c:	4a29      	ldr	r2, [pc, #164]	; (8007e24 <__sflush_r+0x108>)
 8007d7e:	410a      	asrs	r2, r1
 8007d80:	07d6      	lsls	r6, r2, #31
 8007d82:	d427      	bmi.n	8007dd4 <__sflush_r+0xb8>
 8007d84:	2200      	movs	r2, #0
 8007d86:	6062      	str	r2, [r4, #4]
 8007d88:	04d9      	lsls	r1, r3, #19
 8007d8a:	6922      	ldr	r2, [r4, #16]
 8007d8c:	6022      	str	r2, [r4, #0]
 8007d8e:	d504      	bpl.n	8007d9a <__sflush_r+0x7e>
 8007d90:	1c42      	adds	r2, r0, #1
 8007d92:	d101      	bne.n	8007d98 <__sflush_r+0x7c>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b903      	cbnz	r3, 8007d9a <__sflush_r+0x7e>
 8007d98:	6560      	str	r0, [r4, #84]	; 0x54
 8007d9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d9c:	602f      	str	r7, [r5, #0]
 8007d9e:	2900      	cmp	r1, #0
 8007da0:	d0c9      	beq.n	8007d36 <__sflush_r+0x1a>
 8007da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007da6:	4299      	cmp	r1, r3
 8007da8:	d002      	beq.n	8007db0 <__sflush_r+0x94>
 8007daa:	4628      	mov	r0, r5
 8007dac:	f7ff ff6a 	bl	8007c84 <_free_r>
 8007db0:	2000      	movs	r0, #0
 8007db2:	6360      	str	r0, [r4, #52]	; 0x34
 8007db4:	e7c0      	b.n	8007d38 <__sflush_r+0x1c>
 8007db6:	2301      	movs	r3, #1
 8007db8:	4628      	mov	r0, r5
 8007dba:	47b0      	blx	r6
 8007dbc:	1c41      	adds	r1, r0, #1
 8007dbe:	d1c8      	bne.n	8007d52 <__sflush_r+0x36>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d0c5      	beq.n	8007d52 <__sflush_r+0x36>
 8007dc6:	2b1d      	cmp	r3, #29
 8007dc8:	d001      	beq.n	8007dce <__sflush_r+0xb2>
 8007dca:	2b16      	cmp	r3, #22
 8007dcc:	d101      	bne.n	8007dd2 <__sflush_r+0xb6>
 8007dce:	602f      	str	r7, [r5, #0]
 8007dd0:	e7b1      	b.n	8007d36 <__sflush_r+0x1a>
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dd8:	81a3      	strh	r3, [r4, #12]
 8007dda:	e7ad      	b.n	8007d38 <__sflush_r+0x1c>
 8007ddc:	690f      	ldr	r7, [r1, #16]
 8007dde:	2f00      	cmp	r7, #0
 8007de0:	d0a9      	beq.n	8007d36 <__sflush_r+0x1a>
 8007de2:	0793      	lsls	r3, r2, #30
 8007de4:	680e      	ldr	r6, [r1, #0]
 8007de6:	bf08      	it	eq
 8007de8:	694b      	ldreq	r3, [r1, #20]
 8007dea:	600f      	str	r7, [r1, #0]
 8007dec:	bf18      	it	ne
 8007dee:	2300      	movne	r3, #0
 8007df0:	eba6 0807 	sub.w	r8, r6, r7
 8007df4:	608b      	str	r3, [r1, #8]
 8007df6:	f1b8 0f00 	cmp.w	r8, #0
 8007dfa:	dd9c      	ble.n	8007d36 <__sflush_r+0x1a>
 8007dfc:	6a21      	ldr	r1, [r4, #32]
 8007dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e00:	4643      	mov	r3, r8
 8007e02:	463a      	mov	r2, r7
 8007e04:	4628      	mov	r0, r5
 8007e06:	47b0      	blx	r6
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	dc06      	bgt.n	8007e1a <__sflush_r+0xfe>
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e12:	81a3      	strh	r3, [r4, #12]
 8007e14:	f04f 30ff 	mov.w	r0, #4294967295
 8007e18:	e78e      	b.n	8007d38 <__sflush_r+0x1c>
 8007e1a:	4407      	add	r7, r0
 8007e1c:	eba8 0800 	sub.w	r8, r8, r0
 8007e20:	e7e9      	b.n	8007df6 <__sflush_r+0xda>
 8007e22:	bf00      	nop
 8007e24:	dfbffffe 	.word	0xdfbffffe

08007e28 <_fflush_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	690b      	ldr	r3, [r1, #16]
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	b913      	cbnz	r3, 8007e38 <_fflush_r+0x10>
 8007e32:	2500      	movs	r5, #0
 8007e34:	4628      	mov	r0, r5
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	b118      	cbz	r0, 8007e42 <_fflush_r+0x1a>
 8007e3a:	6a03      	ldr	r3, [r0, #32]
 8007e3c:	b90b      	cbnz	r3, 8007e42 <_fflush_r+0x1a>
 8007e3e:	f7ff fd17 	bl	8007870 <__sinit>
 8007e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0f3      	beq.n	8007e32 <_fflush_r+0xa>
 8007e4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e4c:	07d0      	lsls	r0, r2, #31
 8007e4e:	d404      	bmi.n	8007e5a <_fflush_r+0x32>
 8007e50:	0599      	lsls	r1, r3, #22
 8007e52:	d402      	bmi.n	8007e5a <_fflush_r+0x32>
 8007e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e56:	f7ff ff12 	bl	8007c7e <__retarget_lock_acquire_recursive>
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	f7ff ff5d 	bl	8007d1c <__sflush_r>
 8007e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e64:	07da      	lsls	r2, r3, #31
 8007e66:	4605      	mov	r5, r0
 8007e68:	d4e4      	bmi.n	8007e34 <_fflush_r+0xc>
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	059b      	lsls	r3, r3, #22
 8007e6e:	d4e1      	bmi.n	8007e34 <_fflush_r+0xc>
 8007e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e72:	f7ff ff05 	bl	8007c80 <__retarget_lock_release_recursive>
 8007e76:	e7dd      	b.n	8007e34 <_fflush_r+0xc>

08007e78 <__swhatbuf_r>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e80:	2900      	cmp	r1, #0
 8007e82:	b096      	sub	sp, #88	; 0x58
 8007e84:	4615      	mov	r5, r2
 8007e86:	461e      	mov	r6, r3
 8007e88:	da0d      	bge.n	8007ea6 <__swhatbuf_r+0x2e>
 8007e8a:	89a3      	ldrh	r3, [r4, #12]
 8007e8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007e90:	f04f 0100 	mov.w	r1, #0
 8007e94:	bf0c      	ite	eq
 8007e96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007e9a:	2340      	movne	r3, #64	; 0x40
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	6031      	str	r1, [r6, #0]
 8007ea0:	602b      	str	r3, [r5, #0]
 8007ea2:	b016      	add	sp, #88	; 0x58
 8007ea4:	bd70      	pop	{r4, r5, r6, pc}
 8007ea6:	466a      	mov	r2, sp
 8007ea8:	f000 f848 	bl	8007f3c <_fstat_r>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	dbec      	blt.n	8007e8a <__swhatbuf_r+0x12>
 8007eb0:	9901      	ldr	r1, [sp, #4]
 8007eb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007eb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007eba:	4259      	negs	r1, r3
 8007ebc:	4159      	adcs	r1, r3
 8007ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec2:	e7eb      	b.n	8007e9c <__swhatbuf_r+0x24>

08007ec4 <__smakebuf_r>:
 8007ec4:	898b      	ldrh	r3, [r1, #12]
 8007ec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ec8:	079d      	lsls	r5, r3, #30
 8007eca:	4606      	mov	r6, r0
 8007ecc:	460c      	mov	r4, r1
 8007ece:	d507      	bpl.n	8007ee0 <__smakebuf_r+0x1c>
 8007ed0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	6123      	str	r3, [r4, #16]
 8007ed8:	2301      	movs	r3, #1
 8007eda:	6163      	str	r3, [r4, #20]
 8007edc:	b002      	add	sp, #8
 8007ede:	bd70      	pop	{r4, r5, r6, pc}
 8007ee0:	ab01      	add	r3, sp, #4
 8007ee2:	466a      	mov	r2, sp
 8007ee4:	f7ff ffc8 	bl	8007e78 <__swhatbuf_r>
 8007ee8:	9900      	ldr	r1, [sp, #0]
 8007eea:	4605      	mov	r5, r0
 8007eec:	4630      	mov	r0, r6
 8007eee:	f7ff fba7 	bl	8007640 <_malloc_r>
 8007ef2:	b948      	cbnz	r0, 8007f08 <__smakebuf_r+0x44>
 8007ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ef8:	059a      	lsls	r2, r3, #22
 8007efa:	d4ef      	bmi.n	8007edc <__smakebuf_r+0x18>
 8007efc:	f023 0303 	bic.w	r3, r3, #3
 8007f00:	f043 0302 	orr.w	r3, r3, #2
 8007f04:	81a3      	strh	r3, [r4, #12]
 8007f06:	e7e3      	b.n	8007ed0 <__smakebuf_r+0xc>
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	6020      	str	r0, [r4, #0]
 8007f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	9b00      	ldr	r3, [sp, #0]
 8007f14:	6163      	str	r3, [r4, #20]
 8007f16:	9b01      	ldr	r3, [sp, #4]
 8007f18:	6120      	str	r0, [r4, #16]
 8007f1a:	b15b      	cbz	r3, 8007f34 <__smakebuf_r+0x70>
 8007f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f20:	4630      	mov	r0, r6
 8007f22:	f000 f81d 	bl	8007f60 <_isatty_r>
 8007f26:	b128      	cbz	r0, 8007f34 <__smakebuf_r+0x70>
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	f023 0303 	bic.w	r3, r3, #3
 8007f2e:	f043 0301 	orr.w	r3, r3, #1
 8007f32:	81a3      	strh	r3, [r4, #12]
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	431d      	orrs	r5, r3
 8007f38:	81a5      	strh	r5, [r4, #12]
 8007f3a:	e7cf      	b.n	8007edc <__smakebuf_r+0x18>

08007f3c <_fstat_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	4d07      	ldr	r5, [pc, #28]	; (8007f5c <_fstat_r+0x20>)
 8007f40:	2300      	movs	r3, #0
 8007f42:	4604      	mov	r4, r0
 8007f44:	4608      	mov	r0, r1
 8007f46:	4611      	mov	r1, r2
 8007f48:	602b      	str	r3, [r5, #0]
 8007f4a:	f7f8 fcde 	bl	800090a <_fstat>
 8007f4e:	1c43      	adds	r3, r0, #1
 8007f50:	d102      	bne.n	8007f58 <_fstat_r+0x1c>
 8007f52:	682b      	ldr	r3, [r5, #0]
 8007f54:	b103      	cbz	r3, 8007f58 <_fstat_r+0x1c>
 8007f56:	6023      	str	r3, [r4, #0]
 8007f58:	bd38      	pop	{r3, r4, r5, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20000e48 	.word	0x20000e48

08007f60 <_isatty_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d06      	ldr	r5, [pc, #24]	; (8007f7c <_isatty_r+0x1c>)
 8007f64:	2300      	movs	r3, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	4608      	mov	r0, r1
 8007f6a:	602b      	str	r3, [r5, #0]
 8007f6c:	f7f8 fcdd 	bl	800092a <_isatty>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d102      	bne.n	8007f7a <_isatty_r+0x1a>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	b103      	cbz	r3, 8007f7a <_isatty_r+0x1a>
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	bd38      	pop	{r3, r4, r5, pc}
 8007f7c:	20000e48 	.word	0x20000e48

08007f80 <_init>:
 8007f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f82:	bf00      	nop
 8007f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f86:	bc08      	pop	{r3}
 8007f88:	469e      	mov	lr, r3
 8007f8a:	4770      	bx	lr

08007f8c <_fini>:
 8007f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8e:	bf00      	nop
 8007f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f92:	bc08      	pop	{r3}
 8007f94:	469e      	mov	lr, r3
 8007f96:	4770      	bx	lr
