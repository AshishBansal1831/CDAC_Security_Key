
Security_Key.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08008570  08008570  00018570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086bc  080086bc  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  080086bc  080086bc  000186bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086c4  080086c4  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086c4  080086c4  000186c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086c8  080086c8  000186c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  080086cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201c8  2**0
                  CONTENTS
 10 .bss          00000ce4  200001c8  200001c8  000201c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000eac  20000eac  000201c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000126fd  00000000  00000000  0002023b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035fb  00000000  00000000  00032938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f90  00000000  00000000  00035f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b9c  00000000  00000000  00036ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024796  00000000  00000000  00037a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001522e  00000000  00000000  0005c1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c96c1  00000000  00000000  00071428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004440  00000000  00000000  0013aaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0013ef2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001c8 	.word	0x200001c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008558 	.word	0x08008558

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001cc 	.word	0x200001cc
 80001c4:	08008558 	.word	0x08008558

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <send_command>:
extern UART_HandleTypeDef huart5;

#define FINGERPRINT_UART &huart5

static void send_command(Packet pkt)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	463b      	mov	r3, r7
 80004f0:	e883 0003 	stmia.w	r3, {r0, r1}
	pkt.start_byte = pkt.end_byte = 0xF5;
 80004f4:	23f5      	movs	r3, #245	; 0xf5
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	703b      	strb	r3, [r7, #0]
    pkt.checksum = calculate_checksum(pkt);
 80004fc:	463b      	mov	r3, r7
 80004fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000502:	f000 f82d 	bl	8000560 <calculate_checksum>
 8000506:	4603      	mov	r3, r0
 8000508:	71bb      	strb	r3, [r7, #6]
    HAL_UART_Transmit(FINGERPRINT_UART, (uint8_t*)&pkt, sizeof(Packet), 2000);
 800050a:	4639      	mov	r1, r7
 800050c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000510:	2208      	movs	r2, #8
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <send_command+0x38>)
 8000514:	f003 f876 	bl	8003604 <HAL_UART_Transmit>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	2000022c 	.word	0x2000022c

08000524 <RecevieAck>:

static Packet RecevieAck()
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	Packet receive = {.command = 0};
 800052c:	f107 0308 	add.w	r3, r7, #8
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive(FINGERPRINT_UART, (uint8_t*)&receive , sizeof(receive), 2000);
 8000536:	f107 0108 	add.w	r1, r7, #8
 800053a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800053e:	2208      	movs	r2, #8
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <RecevieAck+0x38>)
 8000542:	f003 f8ea 	bl	800371a <HAL_UART_Receive>
	return receive;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	461a      	mov	r2, r3
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	cb03      	ldmia	r3!, {r0, r1}
 8000550:	6010      	str	r0, [r2, #0]
 8000552:	6051      	str	r1, [r2, #4]
}
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000022c 	.word	0x2000022c

08000560 <calculate_checksum>:

uint8_t calculate_checksum(Packet pkt)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	463b      	mov	r3, r7
 8000568:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t checksum = pkt.command;
 800056c:	787b      	ldrb	r3, [r7, #1]
 800056e:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 4; i++)
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	e00a      	b.n	800058c <calculate_checksum+0x2c>
    {
        checksum ^= pkt.parameter[i]; // CheckSum is calculated using XOR
 8000576:	1cba      	adds	r2, r7, #2
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	4413      	add	r3, r2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b29a      	uxth	r2, r3
 8000580:	89fb      	ldrh	r3, [r7, #14]
 8000582:	4053      	eors	r3, r2
 8000584:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 4; i++)
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	3301      	adds	r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	2b03      	cmp	r3, #3
 8000590:	ddf1      	ble.n	8000576 <calculate_checksum+0x16>
    }
    return (uint8_t)checksum;
 8000592:	89fb      	ldrh	r3, [r7, #14]
 8000594:	b2db      	uxtb	r3, r3
}
 8000596:	4618      	mov	r0, r3
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <Is_Finger_Pressed>:
    Packet led_cmd = {.command = LED_CONTROL, .parameter = {state}, 0, 0xF5};
    send_command(led_cmd);
}

uint8_t Is_Finger_Pressed(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
    Packet is_press_cmd = {.command = IS_FINGER_PRESS, .parameter = {0}};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	23b5      	movs	r3, #181	; 0xb5
 80005b4:	727b      	strb	r3, [r7, #9]
    send_command(is_press_cmd);
 80005b6:	f107 0308 	add.w	r3, r7, #8
 80005ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005be:	f7ff ff93 	bl	80004e8 <send_command>

    Packet response = RecevieAck();
 80005c2:	463b      	mov	r3, r7
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ffad 	bl	8000524 <RecevieAck>
    return response.parameter[1];
 80005ca:	78fb      	ldrb	r3, [r7, #3]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <Enroll_Fingerprint>:

void Enroll_Fingerprint(uint8_t ID)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
    Packet enroll_cmd = {.command = ENROLL, .parameter = {ID}};
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	2301      	movs	r3, #1
 80005ea:	747b      	strb	r3, [r7, #17]
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	74bb      	strb	r3, [r7, #18]
    send_command(enroll_cmd);
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005f8:	f7ff ff76 	bl	80004e8 <send_command>
    Packet receive;

    do
    {
    	receive = RecevieAck();
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ff8f 	bl	8000524 <RecevieAck>
    }while(receive.parameter[1] !=0x03); // receive the Acknowledgement
 8000606:	7afb      	ldrb	r3, [r7, #11]
 8000608:	2b03      	cmp	r3, #3
 800060a:	d1f7      	bne.n	80005fc <Enroll_Fingerprint+0x28>

}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <Delete_Fingerprint_ID>:

void Delete_Fingerprint_ID(uint8_t ID)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	4603      	mov	r3, r0
 800061e:	71fb      	strb	r3, [r7, #7]
    Packet delete_cmd = {.command = DELETE_ID, .parameter = {ID}};
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	2304      	movs	r3, #4
 800062c:	727b      	strb	r3, [r7, #9]
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	72bb      	strb	r3, [r7, #10]
    send_command(delete_cmd);
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	e893 0003 	ldmia.w	r3, {r0, r1}
 800063a:	f7ff ff55 	bl	80004e8 <send_command>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <Delete_All_Fingerprints>:

void Delete_All_Fingerprints(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
    Packet delete_all_cmd = {.command =DELETE_ALL, .parameter = {0}};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	2305      	movs	r3, #5
 8000656:	707b      	strb	r3, [r7, #1]
    send_command(delete_all_cmd);
 8000658:	463b      	mov	r3, r7
 800065a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800065e:	f7ff ff43 	bl	80004e8 <send_command>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <Identify_Fingerprint>:
    Packet response = RecevieAck();
	return response.parameter[1];
}

uint8_t Identify_Fingerprint(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b086      	sub	sp, #24
 800066e:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	75fb      	strb	r3, [r7, #23]

	// wait for the finger to be pressed
	while(counter++ < 200 && Is_Finger_Pressed() == 0);
 8000674:	bf00      	nop
 8000676:	7dfb      	ldrb	r3, [r7, #23]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	75fa      	strb	r2, [r7, #23]
 800067c:	2bc7      	cmp	r3, #199	; 0xc7
 800067e:	d804      	bhi.n	800068a <Identify_Fingerprint+0x20>
 8000680:	f7ff ff8f 	bl	80005a2 <Is_Finger_Pressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f5      	beq.n	8000676 <Identify_Fingerprint+0xc>

	if(counter > 200)
 800068a:	7dfb      	ldrb	r3, [r7, #23]
 800068c:	2bc8      	cmp	r3, #200	; 0xc8
 800068e:	d901      	bls.n	8000694 <Identify_Fingerprint+0x2a>
	{
		return 0;
 8000690:	2300      	movs	r3, #0
 8000692:	e011      	b.n	80006b8 <Identify_Fingerprint+0x4e>
	}

    Packet identify_cmd = {.command =IDENTIFY, .parameter = {0}};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	230c      	movs	r3, #12
 80006a0:	737b      	strb	r3, [r7, #13]
    send_command(identify_cmd);
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006aa:	f7ff ff1d 	bl	80004e8 <send_command>

    Packet response = RecevieAck();
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff37 	bl	8000524 <RecevieAck>
	return response.parameter[1];
 80006b6:	79fb      	ldrb	r3, [r7, #7]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Get_EntryID>:

uint8_t Get_EntryID(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
    Packet get_entry_id_cmd = {.command =GET_ENTRY_ID, .parameter = {0}};
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	230d      	movs	r3, #13
 80006d2:	727b      	strb	r3, [r7, #9]
    send_command(get_entry_id_cmd);
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006dc:	f7ff ff04 	bl	80004e8 <send_command>

    Packet response = RecevieAck();
 80006e0:	463b      	mov	r3, r7
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff1e 	bl	8000524 <RecevieAck>
	return response.parameter[1];
 80006e8:	78fb      	ldrb	r3, [r7, #3]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <Enroll_Cancel>:

void Enroll_Cancel(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
    Packet enroll_cancel_cmd = {.command =ENROLL_CANCEL, .parameter = {0}};
 80006f8:	463b      	mov	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	2392      	movs	r3, #146	; 0x92
 8000702:	707b      	strb	r3, [r7, #1]
    enroll_cancel_cmd.checksum = calculate_checksum(enroll_cancel_cmd); // Ensure the checksum is correctly calculated
 8000704:	463b      	mov	r3, r7
 8000706:	e893 0003 	ldmia.w	r3, {r0, r1}
 800070a:	f7ff ff29 	bl	8000560 <calculate_checksum>
 800070e:	4603      	mov	r3, r0
 8000710:	71bb      	strb	r3, [r7, #6]
    send_command(enroll_cancel_cmd);
 8000712:	463b      	mov	r3, r7
 8000714:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000718:	f7ff fee6 	bl	80004e8 <send_command>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <GreenON>:
	function_handler ON;
	function_handler OFF;
}LEDs;

static inline void GreenON()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GREEN_LED, SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072e:	4802      	ldr	r0, [pc, #8]	; (8000738 <GreenON+0x14>)
 8000730:	f001 f814 	bl	800175c <HAL_GPIO_WritePin>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40020c00 	.word	0x40020c00

0800073c <GreenOFF>:

static inline void GreenOFF()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GREEN_LED, RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000746:	4802      	ldr	r0, [pc, #8]	; (8000750 <GreenOFF+0x14>)
 8000748:	f001 f808 	bl	800175c <HAL_GPIO_WritePin>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40020c00 	.word	0x40020c00

08000754 <RedON>:

static inline void RedON()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, RED_LED, SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800075e:	4802      	ldr	r0, [pc, #8]	; (8000768 <RedON+0x14>)
 8000760:	f000 fffc 	bl	800175c <HAL_GPIO_WritePin>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40020c00 	.word	0x40020c00

0800076c <RedOFF>:

static inline void RedOFF()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, RED_LED, RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000776:	4802      	ldr	r0, [pc, #8]	; (8000780 <RedOFF+0x14>)
 8000778:	f000 fff0 	bl	800175c <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40020c00 	.word	0x40020c00

08000784 <BlueON>:

static inline void BlueON()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, BLUE_LED, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078e:	4802      	ldr	r0, [pc, #8]	; (8000798 <BlueON+0x14>)
 8000790:	f000 ffe4 	bl	800175c <HAL_GPIO_WritePin>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40020c00 	.word	0x40020c00

0800079c <BlueOFF>:

static inline void BlueOFF()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, BLUE_LED, RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a6:	4802      	ldr	r0, [pc, #8]	; (80007b0 <BlueOFF+0x14>)
 80007a8:	f000 ffd8 	bl	800175c <HAL_GPIO_WritePin>
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40020c00 	.word	0x40020c00

080007b4 <Error_Occured>:
void Hard_Fault_Occured();
void Everything_OK();
void ON_Going();

void Error_Occured()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	while(1)
	{
		ALL_OK.OFF();
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <Error_Occured+0x18>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	4798      	blx	r3
		OnGoing.OFF();
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <Error_Occured+0x1c>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	4798      	blx	r3
		Error.ON();
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <Error_Occured+0x20>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4798      	blx	r3
		ALL_OK.OFF();
 80007ca:	e7f5      	b.n	80007b8 <Error_Occured+0x4>
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000010 	.word	0x20000010
 80007d4:	20000000 	.word	0x20000000

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007dc:	f000 fc7a 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f816 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f000 f8d2 	bl	800098c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80007e8:	f006 fd68 	bl	80072bc <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 80007ec:	f000 f87a 	bl	80008e4 <MX_UART4_Init>
  MX_MBEDTLS_Init();
 80007f0:	f004 fe9b 	bl	800552a <MX_MBEDTLS_Init>
  MX_UART5_Init();
 80007f4:	f000 f8a0 	bl	8000938 <MX_UART5_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Operations[operation]();
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <main+0x30>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b03      	ldr	r3, [pc, #12]	; (800080c <main+0x34>)
 8000800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000804:	4798      	blx	r3
 8000806:	e7f7      	b.n	80007f8 <main+0x20>
 8000808:	200002bc 	.word	0x200002bc
 800080c:	080086a8 	.word	0x080086a8

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	2230      	movs	r2, #48	; 0x30
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f007 fc7c 	bl	800811c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <SystemClock_Config+0xcc>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a27      	ldr	r2, [pc, #156]	; (80008dc <SystemClock_Config+0xcc>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <SystemClock_Config+0xcc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <SystemClock_Config+0xd0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <SystemClock_Config+0xd0>)
 800085a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <SystemClock_Config+0xd0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086c:	2301      	movs	r3, #1
 800086e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000876:	2302      	movs	r3, #2
 8000878:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000884:	23a8      	movs	r3, #168	; 0xa8
 8000886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800088c:	2307      	movs	r3, #7
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	4618      	mov	r0, r3
 8000896:	f002 f9cd 	bl	8002c34 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a0:	f000 f8f6 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2105      	movs	r1, #5
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 fc2e 	bl	8003124 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ce:	f000 f8df 	bl	8000a90 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3750      	adds	r7, #80	; 0x50
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_UART4_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <MX_UART4_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_UART4_Init+0x4c>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_UART4_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_UART4_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_UART4_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_UART4_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_UART4_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_UART4_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_UART4_Init+0x4c>)
 800091c:	f002 fe22 	bl	8003564 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 f8b3 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200001e4 	.word	0x200001e4
 8000934:	40004c00 	.word	0x40004c00

08000938 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_UART5_Init+0x4c>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_UART5_Init+0x50>)
 8000940:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_UART5_Init+0x4c>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_UART5_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_UART5_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_UART5_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_UART5_Init+0x4c>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_UART5_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_UART5_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_UART5_Init+0x4c>)
 8000970:	f002 fdf8 	bl	8003564 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800097a:	f000 f889 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000022c 	.word	0x2000022c
 8000988:	40005000 	.word	0x40005000

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a2c      	ldr	r2, [pc, #176]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a25      	ldr	r2, [pc, #148]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <MX_GPIO_Init+0xd0>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_GPIO_Init+0xd0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a18:	4811      	ldr	r0, [pc, #68]	; (8000a60 <MX_GPIO_Init+0xd4>)
 8000a1a:	f000 fe9f 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <MX_GPIO_Init+0xd8>)
 8000a32:	f000 fcf7 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a36:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_GPIO_Init+0xd4>)
 8000a50:	f000 fce8 	bl	8001424 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020c00 	.word	0x40020c00
 8000a64:	40020000 	.word	0x40020000

08000a68 <_write>:

/*
 * To redirect write to uart4
 */
int _write(int file, char *ptr, int len)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
#ifdef DEBUG //this is defined if we are using DEBUG build configuration
	HAL_UART_Transmit(&huart4, (uint8_t*)ptr, len, 100);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	2364      	movs	r3, #100	; 0x64
 8000a7a:	68b9      	ldr	r1, [r7, #8]
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <_write+0x24>)
 8000a7e:	f002 fdc1 	bl	8003604 <HAL_UART_Transmit>
	return len;
 8000a82:	687b      	ldr	r3, [r7, #4]
#else //if not defined don't send any data
	return 0;
#endif
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200001e4 	.word	0x200001e4

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a51      	ldr	r2, [pc, #324]	; (8000c50 <HAL_UART_MspInit+0x164>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d14b      	bne.n	8000ba6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
 8000b12:	4b50      	ldr	r3, [pc, #320]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a4f      	ldr	r2, [pc, #316]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b4d      	ldr	r3, [pc, #308]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b26:	623b      	str	r3, [r7, #32]
 8000b28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
 8000b2e:	4b49      	ldr	r3, [pc, #292]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a48      	ldr	r2, [pc, #288]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b46      	ldr	r3, [pc, #280]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	4b42      	ldr	r3, [pc, #264]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a41      	ldr	r2, [pc, #260]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b62:	2302      	movs	r3, #2
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b72:	2308      	movs	r3, #8
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4836      	ldr	r0, [pc, #216]	; (8000c58 <HAL_UART_MspInit+0x16c>)
 8000b7e:	f000 fc51 	bl	8001424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b94:	2308      	movs	r3, #8
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	482f      	ldr	r0, [pc, #188]	; (8000c5c <HAL_UART_MspInit+0x170>)
 8000ba0:	f000 fc40 	bl	8001424 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000ba4:	e04f      	b.n	8000c46 <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==UART5)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <HAL_UART_MspInit+0x174>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d14a      	bne.n	8000c46 <HAL_UART_MspInit+0x15a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc0:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000bf2:	f043 0308 	orr.w	r3, r3, #8
 8000bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_UART_MspInit+0x168>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c16:	2308      	movs	r3, #8
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480e      	ldr	r0, [pc, #56]	; (8000c5c <HAL_UART_MspInit+0x170>)
 8000c22:	f000 fbff 	bl	8001424 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c26:	2304      	movs	r3, #4
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c36:	2308      	movs	r3, #8
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4808      	ldr	r0, [pc, #32]	; (8000c64 <HAL_UART_MspInit+0x178>)
 8000c42:	f000 fbef 	bl	8001424 <HAL_GPIO_Init>
}
 8000c46:	bf00      	nop
 8000c48:	3738      	adds	r7, #56	; 0x38
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40004c00 	.word	0x40004c00
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40020800 	.word	0x40020800
 8000c60:	40005000 	.word	0x40005000
 8000c64:	40020c00 	.word	0x40020c00

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 fa60 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <OTG_FS_IRQHandler+0x10>)
 8000cc2:	f000 fec2 	bl	8001a4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000824 	.word	0x20000824

08000cd0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e00a      	b.n	8000cf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ce2:	f3af 8000 	nop.w
 8000ce6:	4601      	mov	r1, r0
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dbf0      	blt.n	8000ce2 <_read+0x12>
	}

return len;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	return -1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d32:	605a      	str	r2, [r3, #4]
	return 0;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_isatty>:

int _isatty(int file)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
	return 1;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
	return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f007 fa2c 	bl	8008200 <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20020000 	.word	0x20020000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	20000278 	.word	0x20000278
 8000ddc:	20000eb0 	.word	0x20000eb0

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Send_to_Host>:

/*
 * Send the report to Host device
 */
static inline void Send_to_Host(Report report)
{
 8000e04:	b084      	sub	sp, #16
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	f107 0c08 	add.w	ip, r7, #8
 8000e0e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	send_report((uint8_t*)&report, sizeof(Report));
 8000e12:	2140      	movs	r1, #64	; 0x40
 8000e14:	f107 0008 	add.w	r0, r7, #8
 8000e18:	f006 fabc 	bl	8007394 <send_report>
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e24:	b004      	add	sp, #16
 8000e26:	4770      	bx	lr

08000e28 <no_action>:

/*
 * Don't do any action and wait for change of state of 'operation'
 */
void no_action()
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
	while(operation == NO_ACTION)
 8000e2c:	bf00      	nop
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <no_action+0x1c>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0fb      	beq.n	8000e2e <no_action+0x6>
	{

	}
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200002bc 	.word	0x200002bc

08000e48 <Exchange_Public_Key>:
/*
 * Receive Public Key from Host and Then send Device Public Key
 */

void Exchange_Public_Key()
{
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b09c      	sub	sp, #112	; 0x70
 8000e4c:	af0c      	add	r7, sp, #48	; 0x30
	printf("In Exchange Public Key\r\n");
 8000e4e:	481f      	ldr	r0, [pc, #124]	; (8000ecc <Exchange_Public_Key+0x84>)
 8000e50:	f007 f884 	bl	8007f5c <puts>
	Report report;
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000e54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e58:	481d      	ldr	r0, [pc, #116]	; (8000ed0 <Exchange_Public_Key+0x88>)
 8000e5a:	f000 fc98 	bl	800178e <HAL_GPIO_TogglePin>
	report.report_id = EXCHANGE_PUBLIC_KEY;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	703b      	strb	r3, [r7, #0]
	strcpy(report.data, "Device Public Key");
 8000e62:	463b      	mov	r3, r7
 8000e64:	3302      	adds	r3, #2
 8000e66:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <Exchange_Public_Key+0x8c>)
 8000e68:	461d      	mov	r5, r3
 8000e6a:	4614      	mov	r4, r2
 8000e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e6e:	6028      	str	r0, [r5, #0]
 8000e70:	6069      	str	r1, [r5, #4]
 8000e72:	60aa      	str	r2, [r5, #8]
 8000e74:	60eb      	str	r3, [r5, #12]
 8000e76:	8823      	ldrh	r3, [r4, #0]
 8000e78:	822b      	strh	r3, [r5, #16]
		return;
	}
#endif
	//Send Public Key

	Send_to_Host(report);
 8000e7a:	466d      	mov	r5, sp
 8000e7c:	f107 0410 	add.w	r4, r7, #16
 8000e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e8c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e90:	463b      	mov	r3, r7
 8000e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e94:	f7ff ffb6 	bl	8000e04 <Send_to_Host>
	operation = NO_ACTION;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <Exchange_Public_Key+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
	strncpy(DEVICE_Public_Key, report.data, PUBLIC_KEY_SIZE);
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	2240      	movs	r2, #64	; 0x40
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <Exchange_Public_Key+0x94>)
 8000ea8:	f007 f940 	bl	800812c <strncpy>

	//Receive Public Key from HOST
	while(operation == NO_ACTION);
 8000eac:	bf00      	nop
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <Exchange_Public_Key+0x90>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0fb      	beq.n	8000eae <Exchange_Public_Key+0x66>

	//save Host Public Key
	strncpy(HOST_Public_Key, (char*)report_buffer, PUBLIC_KEY_SIZE);
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <Exchange_Public_Key+0x98>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2240      	movs	r2, #64	; 0x40
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <Exchange_Public_Key+0x9c>)
 8000ec0:	f007 f934 	bl	800812c <strncpy>
}
 8000ec4:	bf00      	nop
 8000ec6:	3740      	adds	r7, #64	; 0x40
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bdb0      	pop	{r4, r5, r7, pc}
 8000ecc:	080085e0 	.word	0x080085e0
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	080085f8 	.word	0x080085f8
 8000ed8:	200002bc 	.word	0x200002bc
 8000edc:	20000300 	.word	0x20000300
 8000ee0:	20000274 	.word	0x20000274
 8000ee4:	200002c0 	.word	0x200002c0

08000ee8 <Receive_String>:

/*
 * Receive signed string from HOST
 */
void Receive_String()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	// Decrypt string
	// compare string
	while(IN_.report_id == 0);
 8000eec:	bf00      	nop
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <Receive_String+0x28>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0fb      	beq.n	8000eee <Receive_String+0x6>
	if(strcmp((char*)IN_.data, HOST_STRING) !=0)
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <Receive_String+0x2c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4619      	mov	r1, r3
 8000efc:	4806      	ldr	r0, [pc, #24]	; (8000f18 <Receive_String+0x30>)
 8000efe:	f7ff f963 	bl	80001c8 <strcmp>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <Receive_String+0x24>
	{
		Error_Occured();
 8000f08:	f7ff fc54 	bl	80007b4 <Error_Occured>
	}

	// if correct string received from HOST continue
	// else Error Led ON & put in no_action loop
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000027c 	.word	0x2000027c
 8000f14:	2000001c 	.word	0x2000001c
 8000f18:	2000027e 	.word	0x2000027e

08000f1c <Send_String>:

/*
 * Send signed string to HOST
 */
void Send_String()
{
 8000f1c:	b5b0      	push	{r4, r5, r7, lr}
 8000f1e:	b09c      	sub	sp, #112	; 0x70
 8000f20:	af0c      	add	r7, sp, #48	; 0x30
	Report string_report;
	string_report.report_id = SIGNED_STRING;
 8000f22:	2302      	movs	r3, #2
 8000f24:	703b      	strb	r3, [r7, #0]

	strncpy((char*)string_report.data, DEVICE_STRING, strlen(DEVICE_STRING));
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <Send_String+0x4c>)
 8000f28:	681c      	ldr	r4, [r3, #0]
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <Send_String+0x4c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff f954 	bl	80001dc <strlen>
 8000f34:	4602      	mov	r2, r0
 8000f36:	463b      	mov	r3, r7
 8000f38:	3302      	adds	r3, #2
 8000f3a:	4621      	mov	r1, r4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f007 f8f5 	bl	800812c <strncpy>
	// encrypt string

	// Send to host
	Send_to_Host(string_report);
 8000f42:	466d      	mov	r5, sp
 8000f44:	f107 0410 	add.w	r4, r7, #16
 8000f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f54:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000f58:	463b      	mov	r3, r7
 8000f5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f5c:	f7ff ff52 	bl	8000e04 <Send_to_Host>
}
 8000f60:	bf00      	nop
 8000f62:	3740      	adds	r7, #64	; 0x40
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bdb0      	pop	{r4, r5, r7, pc}
 8000f68:	20000020 	.word	0x20000020

08000f6c <Handle_Signed_String>:

void Handle_Signed_String()
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	Send_String();
 8000f70:	f7ff ffd4 	bl	8000f1c <Send_String>
	memset((void*)&IN_, 0, sizeof(IN_));
 8000f74:	2240      	movs	r2, #64	; 0x40
 8000f76:	2100      	movs	r1, #0
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <Handle_Signed_String+0x1c>)
 8000f7a:	f007 f8cf 	bl	800811c <memset>
	Receive_String();
 8000f7e:	f7ff ffb3 	bl	8000ee8 <Receive_String>
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000027c 	.word	0x2000027c

08000f8c <HandleFingerprint>:

/*
 * To handle FingerPrint COMMANDs
 */
void HandleFingerprint()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	; 0x40
 8000f90:	af00      	add	r7, sp, #0
	Report Out=  {.report_id = IN_.report_id, .paramter = IN_.paramter};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2240      	movs	r2, #64	; 0x40
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f007 f8bf 	bl	800811c <memset>
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HandleFingerprint+0x80>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	703b      	strb	r3, [r7, #0]
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <HandleFingerprint+0x80>)
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	707b      	strb	r3, [r7, #1]

	switch(IN_.paramter)
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <HandleFingerprint+0x80>)
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	3b02      	subs	r3, #2
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d827      	bhi.n	8001004 <HandleFingerprint+0x78>
 8000fb4:	a201      	add	r2, pc, #4	; (adr r2, 8000fbc <HandleFingerprint+0x30>)
 8000fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fba:	bf00      	nop
 8000fbc:	08000fd1 	.word	0x08000fd1
 8000fc0:	08000fdb 	.word	0x08000fdb
 8000fc4:	08000fed 	.word	0x08000fed
 8000fc8:	08000ff3 	.word	0x08000ff3
 8000fcc:	08000fff 	.word	0x08000fff
	{
	case F_IDENTITFY:
		Out.data[0] = Identify_Fingerprint();
 8000fd0:	f7ff fb4b 	bl	800066a <Identify_Fingerprint>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	70bb      	strb	r3, [r7, #2]
		break;
 8000fd8:	e014      	b.n	8001004 <HandleFingerprint+0x78>
	case F_ENROLL:
		Out.data[0] = Get_EntryID();
 8000fda:	f7ff fb71 	bl	80006c0 <Get_EntryID>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	70bb      	strb	r3, [r7, #2]
		Enroll_Fingerprint(Out.data[0]);
 8000fe2:	78bb      	ldrb	r3, [r7, #2]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff faf5 	bl	80005d4 <Enroll_Fingerprint>
		break;
 8000fea:	e00b      	b.n	8001004 <HandleFingerprint+0x78>
	case F_ENROLL_C:
		Enroll_Cancel();
 8000fec:	f7ff fb81 	bl	80006f2 <Enroll_Cancel>
		break;
 8000ff0:	e008      	b.n	8001004 <HandleFingerprint+0x78>
	case F_DELETE:
		Delete_Fingerprint_ID(IN_.data[0]);
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HandleFingerprint+0x80>)
 8000ff4:	789b      	ldrb	r3, [r3, #2]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fb0d 	bl	8000616 <Delete_Fingerprint_ID>
		break;
 8000ffc:	e002      	b.n	8001004 <HandleFingerprint+0x78>
	case F_DEL_ALL:
		Delete_All_Fingerprints();
 8000ffe:	f7ff fb22 	bl	8000646 <Delete_All_Fingerprints>
		break;
 8001002:	bf00      	nop
	}
}
 8001004:	bf00      	nop
 8001006:	3740      	adds	r7, #64	; 0x40
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000027c 	.word	0x2000027c

08001010 <Send_Status>:

/*
 * Send status of device to HOST
 */
void Send_Status()
{
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b09e      	sub	sp, #120	; 0x78
 8001014:	af0c      	add	r7, sp, #48	; 0x30
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001016:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101a:	4817      	ldr	r0, [pc, #92]	; (8001078 <Send_Status+0x68>)
 800101c:	f000 fbb7 	bl	800178e <HAL_GPIO_TogglePin>
	Report report = {STATUS_CHECK, 0, "Connected"};
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <Send_Status+0x6c>)
 8001022:	1d3c      	adds	r4, r7, #4
 8001024:	461d      	mov	r5, r3
 8001026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001032:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001036:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t i = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	while(i<20000)
 8001040:	e00e      	b.n	8001060 <Send_Status+0x50>
	Send_to_Host(report);
 8001042:	466d      	mov	r5, sp
 8001044:	f107 0414 	add.w	r4, r7, #20
 8001048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001050:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001054:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105c:	f7ff fed2 	bl	8000e04 <Send_to_Host>
	while(i<20000)
 8001060:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001064:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001068:	4293      	cmp	r3, r2
 800106a:	d9ea      	bls.n	8001042 <Send_Status+0x32>
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3748      	adds	r7, #72	; 0x48
 8001072:	46bd      	mov	sp, r7
 8001074:	bdb0      	pop	{r4, r5, r7, pc}
 8001076:	bf00      	nop
 8001078:	40020c00 	.word	0x40020c00
 800107c:	0800860c 	.word	0x0800860c

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001084:	f7ff feac 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	; (80010c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	; (80010cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f007 f8ad 	bl	800820c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fb91 	bl	80007d8 <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 80010c4:	080086cc 	.word	0x080086cc
  ldr r2, =_sbss
 80010c8:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 80010cc:	20000eac 	.word	0x20000eac

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_Init+0x40>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_Init+0x40>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x40>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f94f 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fcc8 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f967 	bl	800140a <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 f92f 	bl	80013b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000018 	.word	0x20000018
 8001170:	20000028 	.word	0x20000028
 8001174:	20000024 	.word	0x20000024

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000028 	.word	0x20000028
 800119c:	20000340 	.word	0x20000340

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000340 	.word	0x20000340

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000028 	.word	0x20000028

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800136c:	d301      	bcc.n	8001372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <SysTick_Config+0x40>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137a:	210f      	movs	r1, #15
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f7ff ff8e 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <SysTick_Config+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <SysTick_Config+0x40>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff29 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff3e 	bl	8001248 <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff8e 	bl	80012f4 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5d 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff31 	bl	8001264 <__NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffa2 	bl	800135c <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	e16b      	b.n	8001718 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001440:	2201      	movs	r2, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	429a      	cmp	r2, r3
 800145a:	f040 815a 	bne.w	8001712 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b01      	cmp	r3, #1
 8001468:	d005      	beq.n	8001476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001472:	2b02      	cmp	r3, #2
 8001474:	d130      	bne.n	80014d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ac:	2201      	movs	r2, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 0201 	and.w	r2, r3, #1
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d017      	beq.n	8001514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d123      	bne.n	8001568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	08da      	lsrs	r2, r3, #3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3208      	adds	r2, #8
 8001528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	220f      	movs	r2, #15
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	69b9      	ldr	r1, [r7, #24]
 8001564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0203 	and.w	r2, r3, #3
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80b4 	beq.w	8001712 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b60      	ldr	r3, [pc, #384]	; (8001730 <HAL_GPIO_Init+0x30c>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a5f      	ldr	r2, [pc, #380]	; (8001730 <HAL_GPIO_Init+0x30c>)
 80015b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b5d      	ldr	r3, [pc, #372]	; (8001730 <HAL_GPIO_Init+0x30c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c6:	4a5b      	ldr	r2, [pc, #364]	; (8001734 <HAL_GPIO_Init+0x310>)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	089b      	lsrs	r3, r3, #2
 80015cc:	3302      	adds	r3, #2
 80015ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	220f      	movs	r2, #15
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a52      	ldr	r2, [pc, #328]	; (8001738 <HAL_GPIO_Init+0x314>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d02b      	beq.n	800164a <HAL_GPIO_Init+0x226>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a51      	ldr	r2, [pc, #324]	; (800173c <HAL_GPIO_Init+0x318>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d025      	beq.n	8001646 <HAL_GPIO_Init+0x222>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a50      	ldr	r2, [pc, #320]	; (8001740 <HAL_GPIO_Init+0x31c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d01f      	beq.n	8001642 <HAL_GPIO_Init+0x21e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <HAL_GPIO_Init+0x320>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d019      	beq.n	800163e <HAL_GPIO_Init+0x21a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4e      	ldr	r2, [pc, #312]	; (8001748 <HAL_GPIO_Init+0x324>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0x216>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4d      	ldr	r2, [pc, #308]	; (800174c <HAL_GPIO_Init+0x328>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00d      	beq.n	8001636 <HAL_GPIO_Init+0x212>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4c      	ldr	r2, [pc, #304]	; (8001750 <HAL_GPIO_Init+0x32c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x20e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4b      	ldr	r2, [pc, #300]	; (8001754 <HAL_GPIO_Init+0x330>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_GPIO_Init+0x20a>
 800162a:	2307      	movs	r3, #7
 800162c:	e00e      	b.n	800164c <HAL_GPIO_Init+0x228>
 800162e:	2308      	movs	r3, #8
 8001630:	e00c      	b.n	800164c <HAL_GPIO_Init+0x228>
 8001632:	2306      	movs	r3, #6
 8001634:	e00a      	b.n	800164c <HAL_GPIO_Init+0x228>
 8001636:	2305      	movs	r3, #5
 8001638:	e008      	b.n	800164c <HAL_GPIO_Init+0x228>
 800163a:	2304      	movs	r3, #4
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x228>
 800163e:	2303      	movs	r3, #3
 8001640:	e004      	b.n	800164c <HAL_GPIO_Init+0x228>
 8001642:	2302      	movs	r3, #2
 8001644:	e002      	b.n	800164c <HAL_GPIO_Init+0x228>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x228>
 800164a:	2300      	movs	r3, #0
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	f002 0203 	and.w	r2, r2, #3
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	4093      	lsls	r3, r2
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800165c:	4935      	ldr	r1, [pc, #212]	; (8001734 <HAL_GPIO_Init+0x310>)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_GPIO_Init+0x334>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800168e:	4a32      	ldr	r2, [pc, #200]	; (8001758 <HAL_GPIO_Init+0x334>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001694:	4b30      	ldr	r3, [pc, #192]	; (8001758 <HAL_GPIO_Init+0x334>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <HAL_GPIO_Init+0x334>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_GPIO_Init+0x334>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016e2:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <HAL_GPIO_Init+0x334>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_GPIO_Init+0x334>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800170c:	4a12      	ldr	r2, [pc, #72]	; (8001758 <HAL_GPIO_Init+0x334>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3301      	adds	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2b0f      	cmp	r3, #15
 800171c:	f67f ae90 	bls.w	8001440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40013800 	.word	0x40013800
 8001738:	40020000 	.word	0x40020000
 800173c:	40020400 	.word	0x40020400
 8001740:	40020800 	.word	0x40020800
 8001744:	40020c00 	.word	0x40020c00
 8001748:	40021000 	.word	0x40021000
 800174c:	40021400 	.word	0x40021400
 8001750:	40021800 	.word	0x40021800
 8001754:	40021c00 	.word	0x40021c00
 8001758:	40013c00 	.word	0x40013c00

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001778:	e003      	b.n	8001782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	041a      	lsls	r2, r3, #16
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	619a      	str	r2, [r3, #24]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4013      	ands	r3, r2
 80017a6:	041a      	lsls	r2, r3, #16
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	400b      	ands	r3, r1
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	619a      	str	r2, [r3, #24]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af02      	add	r7, sp, #8
 80017c8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e101      	b.n	80019d8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f005 fef0 	bl	80075d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2203      	movs	r2, #3
 80017f8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001802:	d102      	bne.n	800180a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fc61 	bl	80040d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7c1a      	ldrb	r2, [r3, #16]
 800181c:	f88d 2000 	strb.w	r2, [sp]
 8001820:	3304      	adds	r3, #4
 8001822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001824:	f002 fb40 	bl	8003ea8 <USB_CoreInit>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2202      	movs	r2, #2
 8001832:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0ce      	b.n	80019d8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f002 fc59 	bl	80040f8 <USB_SetCurrentMode>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0bf      	b.n	80019d8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e04a      	b.n	80018f4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800185e:	7bfa      	ldrb	r2, [r7, #15]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	3315      	adds	r3, #21
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	3314      	adds	r3, #20
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	b298      	uxth	r0, r3
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	332e      	adds	r3, #46	; 0x2e
 800189a:	4602      	mov	r2, r0
 800189c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	3318      	adds	r3, #24
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	331c      	adds	r3, #28
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018c6:	7bfa      	ldrb	r2, [r7, #15]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3320      	adds	r3, #32
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	3324      	adds	r3, #36	; 0x24
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	3301      	adds	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	791b      	ldrb	r3, [r3, #4]
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d3af      	bcc.n	800185e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	e044      	b.n	800198e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001972:	7bfa      	ldrb	r2, [r7, #15]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	3301      	adds	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	791b      	ldrb	r3, [r3, #4]
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	429a      	cmp	r2, r3
 8001996:	d3b5      	bcc.n	8001904 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7c1a      	ldrb	r2, [r3, #16]
 80019a0:	f88d 2000 	strb.w	r2, [sp]
 80019a4:	3304      	adds	r3, #4
 80019a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019a8:	f002 fbf2 	bl	8004190 <USB_DevInit>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2202      	movs	r2, #2
 80019b6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00c      	b.n	80019d8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 fc36 	bl	8005242 <USB_DevDisconnect>

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_PCD_Start+0x1c>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e022      	b.n	8001a42 <HAL_PCD_Start+0x62>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d009      	beq.n	8001a24 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 fb43 	bl	80040b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fbe4 	bl	8005200 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a4a:	b590      	push	{r4, r7, lr}
 8001a4c:	b08d      	sub	sp, #52	; 0x34
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 fca2 	bl	80053aa <USB_GetMode>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 848c 	bne.w	8002386 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fc06 	bl	8005284 <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8482 	beq.w	8002384 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f003 fbf3 	bl	8005284 <USB_ReadInterrupts>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d107      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f002 0202 	and.w	r2, r2, #2
 8001ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 fbe1 	bl	8005284 <USB_ReadInterrupts>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b10      	cmp	r3, #16
 8001aca:	d161      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0210 	bic.w	r2, r2, #16
 8001ada:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f003 020f 	and.w	r2, r3, #15
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	3304      	adds	r3, #4
 8001afa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	0c5b      	lsrs	r3, r3, #17
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d124      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d035      	beq.n	8001b80 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	6a38      	ldr	r0, [r7, #32]
 8001b28:	f003 fa18 	bl	8004f5c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b38:	441a      	add	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b4a:	441a      	add	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	615a      	str	r2, [r3, #20]
 8001b50:	e016      	b.n	8001b80 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	0c5b      	lsrs	r3, r3, #17
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d110      	bne.n	8001b80 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001b64:	2208      	movs	r2, #8
 8001b66:	4619      	mov	r1, r3
 8001b68:	6a38      	ldr	r0, [r7, #32]
 8001b6a:	f003 f9f7 	bl	8004f5c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b7a:	441a      	add	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699a      	ldr	r2, [r3, #24]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0210 	orr.w	r2, r2, #16
 8001b8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 fb75 	bl	8005284 <USB_ReadInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ba0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ba4:	f040 80a7 	bne.w	8001cf6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 fb7a 	bl	80052aa <USB_ReadDevAllOutEpInterrupt>
 8001bb6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001bb8:	e099      	b.n	8001cee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 808e 	beq.w	8001ce2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 fb9e 	bl	8005312 <USB_ReadDevOutEPInterrupt>
 8001bd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00c      	beq.n	8001bfc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fe8a 	bl	8002910 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00c      	beq.n	8001c20 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c12:	461a      	mov	r2, r3
 8001c14:	2308      	movs	r3, #8
 8001c16:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 ff60 	bl	8002ae0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d008      	beq.n	8001c3c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c36:	461a      	mov	r2, r3
 8001c38:	2310      	movs	r3, #16
 8001c3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d030      	beq.n	8001ca8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	2b80      	cmp	r3, #128	; 0x80
 8001c50:	d109      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c64:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	3304      	adds	r3, #4
 8001c7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	78db      	ldrb	r3, [r3, #3]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d108      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2200      	movs	r2, #0
 8001c88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f005 fda5 	bl	80077e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	015a      	lsls	r2, r3, #5
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cea:	085b      	lsrs	r3, r3, #1
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f47f af62 	bne.w	8001bba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 fac2 	bl	8005284 <USB_ReadInterrupts>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d0a:	f040 80db 	bne.w	8001ec4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f003 fae3 	bl	80052de <USB_ReadDevAllInEpInterrupt>
 8001d18:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d1e:	e0cd      	b.n	8001ebc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80c2 	beq.w	8001eb0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 fb09 	bl	800534e <USB_ReadDevInEPInterrupt>
 8001d3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d057      	beq.n	8001df8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	2201      	movs	r2, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69f9      	ldr	r1, [r7, #28]
 8001d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d68:	4013      	ands	r3, r2
 8001d6a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	799b      	ldrb	r3, [r3, #6]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d132      	bne.n	8001dec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	3320      	adds	r3, #32
 8001d96:	6819      	ldr	r1, [r3, #0]
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4403      	add	r3, r0
 8001da6:	331c      	adds	r3, #28
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4419      	add	r1, r3
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4403      	add	r3, r0
 8001dba:	3320      	adds	r3, #32
 8001dbc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d113      	bne.n	8001dec <HAL_PCD_IRQHandler+0x3a2>
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3324      	adds	r3, #36	; 0x24
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d108      	bne.n	8001dec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001de4:	461a      	mov	r2, r3
 8001de6:	2101      	movs	r1, #1
 8001de8:	f003 fb10 	bl	800540c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f005 fc6f 	bl	80076d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d008      	beq.n	8001e14 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2308      	movs	r3, #8
 8001e12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2310      	movs	r3, #16
 8001e2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e46:	461a      	mov	r2, r3
 8001e48:	2340      	movs	r3, #64	; 0x40
 8001e4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d023      	beq.n	8001e9e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e58:	6a38      	ldr	r0, [r7, #32]
 8001e5a:	f002 fafd 	bl	8004458 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	3310      	adds	r3, #16
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3304      	adds	r3, #4
 8001e70:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	78db      	ldrb	r3, [r3, #3]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d108      	bne.n	8001e8c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	4619      	mov	r1, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f005 fcbc 	bl	8007804 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fca3 	bl	80027f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	085b      	lsrs	r3, r3, #1
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f47f af2e 	bne.w	8001d20 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 f9db 	bl	8005284 <USB_ReadInterrupts>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ed8:	d122      	bne.n	8001f20 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d108      	bne.n	8001f0a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f00:	2100      	movs	r1, #0
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fe8a 	bl	8002c1c <HAL_PCDEx_LPM_Callback>
 8001f08:	e002      	b.n	8001f10 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f005 fc5a 	bl	80077c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695a      	ldr	r2, [r3, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 f9ad 	bl	8005284 <USB_ReadInterrupts>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f34:	d112      	bne.n	8001f5c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d102      	bne.n	8001f4c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f005 fc16 	bl	8007778 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f5a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 f98f 	bl	8005284 <USB_ReadInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f70:	f040 80b7 	bne.w	80020e2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 fa62 	bl	8004458 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f98:	e046      	b.n	8002028 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fbe:	0151      	lsls	r1, r2, #5
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	440a      	add	r2, r1
 8001fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001fc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fcc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fe0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ff2:	0151      	lsls	r1, r2, #5
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	440a      	add	r2, r1
 8001ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ffc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002000:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002012:	0151      	lsls	r1, r2, #5
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	440a      	add	r2, r1
 8002018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800201c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002020:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002024:	3301      	adds	r3, #1
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	791b      	ldrb	r3, [r3, #4]
 800202c:	461a      	mov	r2, r3
 800202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002030:	4293      	cmp	r3, r2
 8002032:	d3b2      	bcc.n	8001f9a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002042:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002046:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7bdb      	ldrb	r3, [r3, #15]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d016      	beq.n	800207e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002060:	f043 030b 	orr.w	r3, r3, #11
 8002064:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002076:	f043 030b 	orr.w	r3, r3, #11
 800207a:	6453      	str	r3, [r2, #68]	; 0x44
 800207c:	e015      	b.n	80020aa <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800208c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002090:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002094:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020a4:	f043 030b 	orr.w	r3, r3, #11
 80020a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80020bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020cc:	461a      	mov	r2, r3
 80020ce:	f003 f99d 	bl	800540c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80020e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 f8cc 	bl	8005284 <USB_ReadInterrupts>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f6:	d123      	bne.n	8002140 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f003 f962 	bl	80053c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f002 fa1f 	bl	800454a <USB_GetDevSpeed>
 800210c:	4603      	mov	r3, r0
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681c      	ldr	r4, [r3, #0]
 8002118:	f001 f9f0 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 800211c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002122:	461a      	mov	r2, r3
 8002124:	4620      	mov	r0, r4
 8002126:	f001 ff23 	bl	8003f70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f005 fafb 	bl	8007726 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800213e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f003 f89d 	bl	8005284 <USB_ReadInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b08      	cmp	r3, #8
 8002152:	d10a      	bne.n	800216a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f005 fad8 	bl	800770a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f002 0208 	and.w	r2, r2, #8
 8002168:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f003 f888 	bl	8005284 <USB_ReadInterrupts>
 8002174:	4603      	mov	r3, r0
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	2b80      	cmp	r3, #128	; 0x80
 800217c:	d123      	bne.n	80021c6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800218a:	2301      	movs	r3, #1
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
 800218e:	e014      	b.n	80021ba <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	f203 2357 	addw	r3, r3, #599	; 0x257
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 faf0 	bl	8002794 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	3301      	adds	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	791b      	ldrb	r3, [r3, #4]
 80021be:	461a      	mov	r2, r3
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d3e4      	bcc.n	8002190 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 f85a 	bl	8005284 <USB_ReadInterrupts>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021da:	d13c      	bne.n	8002256 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021dc:	2301      	movs	r3, #1
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
 80021e0:	e02b      	b.n	800223a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	3318      	adds	r3, #24
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d115      	bne.n	8002234 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002208:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800220a:	2b00      	cmp	r3, #0
 800220c:	da12      	bge.n	8002234 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	3317      	adds	r3, #23
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fab0 	bl	8002794 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	3301      	adds	r3, #1
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	791b      	ldrb	r3, [r3, #4]
 800223e:	461a      	mov	r2, r3
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	4293      	cmp	r3, r2
 8002244:	d3cd      	bcc.n	80021e2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695a      	ldr	r2, [r3, #20]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002254:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f003 f812 	bl	8005284 <USB_ReadInterrupts>
 8002260:	4603      	mov	r3, r0
 8002262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800226a:	d156      	bne.n	800231a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800226c:	2301      	movs	r3, #1
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	e045      	b.n	80022fe <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d12e      	bne.n	80022f8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800229a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800229c:	2b00      	cmp	r3, #0
 800229e:	da2b      	bge.n	80022f8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80022ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d121      	bne.n	80022f8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	f203 2357 	addw	r3, r3, #599	; 0x257
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10a      	bne.n	80022f8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f4:	6053      	str	r3, [r2, #4]
            break;
 80022f6:	e008      	b.n	800230a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	3301      	adds	r3, #1
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	791b      	ldrb	r3, [r3, #4]
 8002302:	461a      	mov	r2, r3
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	4293      	cmp	r3, r2
 8002308:	d3b3      	bcc.n	8002272 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002318:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f002 ffb0 	bl	8005284 <USB_ReadInterrupts>
 8002324:	4603      	mov	r3, r0
 8002326:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800232a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232e:	d10a      	bne.n	8002346 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f005 fa79 	bl	8007828 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f002 ff9a 	bl	8005284 <USB_ReadInterrupts>
 8002350:	4603      	mov	r3, r0
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b04      	cmp	r3, #4
 8002358:	d115      	bne.n	8002386 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f005 fa69 	bl	8007844 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	e000      	b.n	8002386 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002384:	bf00      	nop
    }
  }
}
 8002386:	3734      	adds	r7, #52	; 0x34
 8002388:	46bd      	mov	sp, r7
 800238a:	bd90      	pop	{r4, r7, pc}

0800238c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_PCD_SetAddress+0x1a>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e012      	b.n	80023cc <HAL_PCD_SetAddress+0x40>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f002 fef9 	bl	80051b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	4608      	mov	r0, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	70fb      	strb	r3, [r7, #3]
 80023e6:	460b      	mov	r3, r1
 80023e8:	803b      	strh	r3, [r7, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	da0f      	bge.n	800241a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	3310      	adds	r3, #16
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	3304      	adds	r3, #4
 8002410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	705a      	strb	r2, [r3, #1]
 8002418:	e00f      	b.n	800243a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	f003 020f 	and.w	r2, r3, #15
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	b2da      	uxtb	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002446:	883a      	ldrh	r2, [r7, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	78ba      	ldrb	r2, [r7, #2]
 8002450:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d004      	beq.n	8002464 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002464:	78bb      	ldrb	r3, [r7, #2]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d102      	bne.n	8002470 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_EP_Open+0xaa>
 800247a:	2302      	movs	r3, #2
 800247c:	e00e      	b.n	800249c <HAL_PCD_EP_Open+0xc8>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	4618      	mov	r0, r3
 800248e:	f002 f881 	bl	8004594 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800249a:	7afb      	ldrb	r3, [r7, #11]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	da0f      	bge.n	80024d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	f003 020f 	and.w	r2, r3, #15
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	3310      	adds	r3, #16
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	4413      	add	r3, r2
 80024cc:	3304      	adds	r3, #4
 80024ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	705a      	strb	r2, [r3, #1]
 80024d6:	e00f      	b.n	80024f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	f003 020f 	and.w	r2, r3, #15
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	3304      	adds	r3, #4
 80024f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_PCD_EP_Close+0x6e>
 800250e:	2302      	movs	r3, #2
 8002510:	e00e      	b.n	8002530 <HAL_PCD_EP_Close+0x8c>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68f9      	ldr	r1, [r7, #12]
 8002520:	4618      	mov	r0, r3
 8002522:	f002 f8bf 	bl	80046a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	460b      	mov	r3, r1
 8002546:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002548:	7afb      	ldrb	r3, [r7, #11]
 800254a:	f003 020f 	and.w	r2, r3, #15
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4413      	add	r3, r2
 800255e:	3304      	adds	r3, #4
 8002560:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2200      	movs	r2, #0
 8002578:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800257a:	7afb      	ldrb	r3, [r7, #11]
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	b2da      	uxtb	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	799b      	ldrb	r3, [r3, #6]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d102      	bne.n	8002594 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	799b      	ldrb	r3, [r3, #6]
 800259c:	461a      	mov	r2, r3
 800259e:	6979      	ldr	r1, [r7, #20]
 80025a0:	f002 f95c 	bl	800485c <USB_EPStartXfer>

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	460b      	mov	r3, r1
 80025bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025be:	7afb      	ldrb	r3, [r7, #11]
 80025c0:	f003 020f 	and.w	r2, r3, #15
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	3310      	adds	r3, #16
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4413      	add	r3, r2
 80025d2:	3304      	adds	r3, #4
 80025d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2200      	movs	r2, #0
 80025e6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2201      	movs	r2, #1
 80025ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ee:	7afb      	ldrb	r3, [r7, #11]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	799b      	ldrb	r3, [r3, #6]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d102      	bne.n	8002608 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	799b      	ldrb	r3, [r3, #6]
 8002610:	461a      	mov	r2, r3
 8002612:	6979      	ldr	r1, [r7, #20]
 8002614:	f002 f922 	bl	800485c <USB_EPStartXfer>

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	7912      	ldrb	r2, [r2, #4]
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e04f      	b.n	80026e0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002644:	2b00      	cmp	r3, #0
 8002646:	da0f      	bge.n	8002668 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	f003 020f 	and.w	r2, r3, #15
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	3310      	adds	r3, #16
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4413      	add	r3, r2
 800265c:	3304      	adds	r3, #4
 800265e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	705a      	strb	r2, [r3, #1]
 8002666:	e00d      	b.n	8002684 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	3304      	adds	r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2201      	movs	r2, #1
 8002688:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	b2da      	uxtb	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_PCD_EP_SetStall+0x82>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e01d      	b.n	80026e0 <HAL_PCD_EP_SetStall+0xbe>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68f9      	ldr	r1, [r7, #12]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f002 fcaa 	bl	800500c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7999      	ldrb	r1, [r3, #6]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80026d0:	461a      	mov	r2, r3
 80026d2:	f002 fe9b 	bl	800540c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	7912      	ldrb	r2, [r2, #4]
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e042      	b.n	800278c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800270a:	2b00      	cmp	r3, #0
 800270c:	da0f      	bge.n	800272e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	f003 020f 	and.w	r2, r3, #15
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	3310      	adds	r3, #16
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	3304      	adds	r3, #4
 8002724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	705a      	strb	r2, [r3, #1]
 800272c:	e00f      	b.n	800274e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	f003 020f 	and.w	r2, r3, #15
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	3304      	adds	r3, #4
 8002746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	b2da      	uxtb	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_PCD_EP_ClrStall+0x86>
 800276a:	2302      	movs	r3, #2
 800276c:	e00e      	b.n	800278c <HAL_PCD_EP_ClrStall+0xa4>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68f9      	ldr	r1, [r7, #12]
 800277c:	4618      	mov	r0, r3
 800277e:	f002 fcb3 	bl	80050e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80027a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	da0c      	bge.n	80027c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	f003 020f 	and.w	r2, r3, #15
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	3310      	adds	r3, #16
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	3304      	adds	r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e00c      	b.n	80027dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	f003 020f 	and.w	r2, r3, #15
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	4413      	add	r3, r2
 80027d8:	3304      	adds	r3, #4
 80027da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68f9      	ldr	r1, [r7, #12]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 fad2 	bl	8004d8c <USB_EPStopXfer>
 80027e8:	4603      	mov	r3, r0
 80027ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80027ec:	7afb      	ldrb	r3, [r7, #11]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b08a      	sub	sp, #40	; 0x28
 80027fa:	af02      	add	r7, sp, #8
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	3310      	adds	r3, #16
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	3304      	adds	r3, #4
 800281c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	429a      	cmp	r2, r3
 8002828:	d901      	bls.n	800282e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e06b      	b.n	8002906 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	429a      	cmp	r2, r3
 8002842:	d902      	bls.n	800284a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3303      	adds	r3, #3
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002852:	e02a      	b.n	80028aa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	429a      	cmp	r2, r3
 8002868:	d902      	bls.n	8002870 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	3303      	adds	r3, #3
 8002874:	089b      	lsrs	r3, r3, #2
 8002876:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68d9      	ldr	r1, [r3, #12]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	4603      	mov	r3, r0
 800288c:	6978      	ldr	r0, [r7, #20]
 800288e:	f002 fb27 	bl	8004ee0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	441a      	add	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	441a      	add	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d809      	bhi.n	80028d4 <PCD_WriteEmptyTxFifo+0xde>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d203      	bcs.n	80028d4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1bf      	bne.n	8002854 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d811      	bhi.n	8002904 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	2201      	movs	r2, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	6939      	ldr	r1, [r7, #16]
 80028fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002900:	4013      	ands	r3, r2
 8002902:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	333c      	adds	r3, #60	; 0x3c
 8002928:	3304      	adds	r3, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	799b      	ldrb	r3, [r3, #6]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d17b      	bne.n	8002a3e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d015      	beq.n	800297c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	4a61      	ldr	r2, [pc, #388]	; (8002ad8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	f240 80b9 	bls.w	8002acc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80b3 	beq.w	8002acc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	4413      	add	r3, r2
 800296e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002972:	461a      	mov	r2, r3
 8002974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002978:	6093      	str	r3, [r2, #8]
 800297a:	e0a7      	b.n	8002acc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002992:	461a      	mov	r2, r3
 8002994:	2320      	movs	r3, #32
 8002996:	6093      	str	r3, [r2, #8]
 8002998:	e098      	b.n	8002acc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 8093 	bne.w	8002acc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	4a4b      	ldr	r2, [pc, #300]	; (8002ad8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d90f      	bls.n	80029ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c4:	461a      	mov	r2, r3
 80029c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ca:	6093      	str	r3, [r2, #8]
 80029cc:	e07e      	b.n	8002acc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4413      	add	r3, r2
 80029e0:	3304      	adds	r3, #4
 80029e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a1a      	ldr	r2, [r3, #32]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	0159      	lsls	r1, r3, #5
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	440b      	add	r3, r1
 80029f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	1ad2      	subs	r2, r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d114      	bne.n	8002a30 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	f002 fcf6 	bl	800540c <USB_EP0_OutStart>
 8002a20:	e006      	b.n	8002a30 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	441a      	add	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	4619      	mov	r1, r3
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f004 fe32 	bl	80076a0 <HAL_PCD_DataOutStageCallback>
 8002a3c:	e046      	b.n	8002acc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	4a26      	ldr	r2, [pc, #152]	; (8002adc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d124      	bne.n	8002a90 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a62:	6093      	str	r3, [r2, #8]
 8002a64:	e032      	b.n	8002acc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2320      	movs	r3, #32
 8002a80:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f004 fe09 	bl	80076a0 <HAL_PCD_DataOutStageCallback>
 8002a8e:	e01d      	b.n	8002acc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d114      	bne.n	8002ac0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d108      	bne.n	8002ac0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2100      	movs	r1, #0
 8002abc:	f002 fca6 	bl	800540c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f004 fdea 	bl	80076a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3720      	adds	r7, #32
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	4f54300a 	.word	0x4f54300a
 8002adc:	4f54310a 	.word	0x4f54310a

08002ae0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	333c      	adds	r3, #60	; 0x3c
 8002af8:	3304      	adds	r3, #4
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d90e      	bls.n	8002b34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f004 fda1 	bl	800767c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d90c      	bls.n	8002b5c <PCD_EP_OutSetupPacket_int+0x7c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	799b      	ldrb	r3, [r3, #6]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d108      	bne.n	8002b5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b54:	461a      	mov	r2, r3
 8002b56:	2101      	movs	r1, #1
 8002b58:	f002 fc58 	bl	800540c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	4f54300a 	.word	0x4f54300a

08002b6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	70fb      	strb	r3, [r7, #3]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d107      	bne.n	8002b9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b8a:	883b      	ldrh	r3, [r7, #0]
 8002b8c:	0419      	lsls	r1, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
 8002b98:	e028      	b.n	8002bec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]
 8002bac:	e00d      	b.n	8002bca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	3340      	adds	r3, #64	; 0x40
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3ec      	bcc.n	8002bae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002bd4:	883b      	ldrh	r3, [r7, #0]
 8002bd6:	0418      	lsls	r0, r3, #16
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6819      	ldr	r1, [r3, #0]
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	4302      	orrs	r2, r0
 8002be4:	3340      	adds	r3, #64	; 0x40
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e267      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d075      	beq.n	8002d3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c52:	4b88      	ldr	r3, [pc, #544]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d00c      	beq.n	8002c78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c5e:	4b85      	ldr	r3, [pc, #532]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d112      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c6a:	4b82      	ldr	r3, [pc, #520]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c76:	d10b      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c78:	4b7e      	ldr	r3, [pc, #504]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d05b      	beq.n	8002d3c <HAL_RCC_OscConfig+0x108>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d157      	bne.n	8002d3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e242      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c98:	d106      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x74>
 8002c9a:	4b76      	ldr	r3, [pc, #472]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a75      	ldr	r2, [pc, #468]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e01d      	b.n	8002ce4 <HAL_RCC_OscConfig+0xb0>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x98>
 8002cb2:	4b70      	ldr	r3, [pc, #448]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a6f      	ldr	r2, [pc, #444]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	4b6d      	ldr	r3, [pc, #436]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6c      	ldr	r2, [pc, #432]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e00b      	b.n	8002ce4 <HAL_RCC_OscConfig+0xb0>
 8002ccc:	4b69      	ldr	r3, [pc, #420]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a68      	ldr	r2, [pc, #416]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	4b66      	ldr	r3, [pc, #408]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a65      	ldr	r2, [pc, #404]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d013      	beq.n	8002d14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe fa58 	bl	80011a0 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7fe fa54 	bl	80011a0 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e207      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	4b5b      	ldr	r3, [pc, #364]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xc0>
 8002d12:	e014      	b.n	8002d3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fa44 	bl	80011a0 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d1c:	f7fe fa40 	bl	80011a0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	; 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1f3      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2e:	4b51      	ldr	r3, [pc, #324]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0xe8>
 8002d3a:	e000      	b.n	8002d3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d063      	beq.n	8002e12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d4a:	4b4a      	ldr	r3, [pc, #296]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d56:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d11c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d62:	4b44      	ldr	r3, [pc, #272]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d116      	bne.n	8002d9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6e:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <HAL_RCC_OscConfig+0x152>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d001      	beq.n	8002d86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e1c7      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d86:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4937      	ldr	r1, [pc, #220]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9a:	e03a      	b.n	8002e12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d020      	beq.n	8002de6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da4:	4b34      	ldr	r3, [pc, #208]	; (8002e78 <HAL_RCC_OscConfig+0x244>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe f9f9 	bl	80011a0 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db2:	f7fe f9f5 	bl	80011a0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e1a8      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc4:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd0:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4925      	ldr	r1, [pc, #148]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	600b      	str	r3, [r1, #0]
 8002de4:	e015      	b.n	8002e12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de6:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <HAL_RCC_OscConfig+0x244>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe f9d8 	bl	80011a0 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df4:	f7fe f9d4 	bl	80011a0 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e187      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e06:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d036      	beq.n	8002e8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_RCC_OscConfig+0x248>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2c:	f7fe f9b8 	bl	80011a0 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e34:	f7fe f9b4 	bl	80011a0 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e167      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_RCC_OscConfig+0x240>)
 8002e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x200>
 8002e52:	e01b      	b.n	8002e8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_RCC_OscConfig+0x248>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5a:	f7fe f9a1 	bl	80011a0 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e60:	e00e      	b.n	8002e80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e62:	f7fe f99d 	bl	80011a0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d907      	bls.n	8002e80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e150      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
 8002e74:	40023800 	.word	0x40023800
 8002e78:	42470000 	.word	0x42470000
 8002e7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e80:	4b88      	ldr	r3, [pc, #544]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1ea      	bne.n	8002e62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8097 	beq.w	8002fc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9e:	4b81      	ldr	r3, [pc, #516]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10f      	bne.n	8002eca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	4b7d      	ldr	r3, [pc, #500]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4a7c      	ldr	r2, [pc, #496]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eba:	4b7a      	ldr	r3, [pc, #488]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eca:	4b77      	ldr	r3, [pc, #476]	; (80030a8 <HAL_RCC_OscConfig+0x474>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d118      	bne.n	8002f08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed6:	4b74      	ldr	r3, [pc, #464]	; (80030a8 <HAL_RCC_OscConfig+0x474>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a73      	ldr	r2, [pc, #460]	; (80030a8 <HAL_RCC_OscConfig+0x474>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe f95d 	bl	80011a0 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eea:	f7fe f959 	bl	80011a0 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e10c      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	4b6a      	ldr	r3, [pc, #424]	; (80030a8 <HAL_RCC_OscConfig+0x474>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x2ea>
 8002f10:	4b64      	ldr	r3, [pc, #400]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a63      	ldr	r2, [pc, #396]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1c:	e01c      	b.n	8002f58 <HAL_RCC_OscConfig+0x324>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b05      	cmp	r3, #5
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x30c>
 8002f26:	4b5f      	ldr	r3, [pc, #380]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a5e      	ldr	r2, [pc, #376]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	f043 0304 	orr.w	r3, r3, #4
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
 8002f32:	4b5c      	ldr	r3, [pc, #368]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a5b      	ldr	r2, [pc, #364]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0x324>
 8002f40:	4b58      	ldr	r3, [pc, #352]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	4a57      	ldr	r2, [pc, #348]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4c:	4b55      	ldr	r3, [pc, #340]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	4a54      	ldr	r2, [pc, #336]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002f52:	f023 0304 	bic.w	r3, r3, #4
 8002f56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d015      	beq.n	8002f8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe f91e 	bl	80011a0 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7fe f91a 	bl	80011a0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e0cb      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7e:	4b49      	ldr	r3, [pc, #292]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0ee      	beq.n	8002f68 <HAL_RCC_OscConfig+0x334>
 8002f8a:	e014      	b.n	8002fb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8c:	f7fe f908 	bl	80011a0 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7fe f904 	bl	80011a0 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e0b5      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002faa:	4b3e      	ldr	r3, [pc, #248]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1ee      	bne.n	8002f94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbc:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	4a38      	ldr	r2, [pc, #224]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80a1 	beq.w	8003114 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fd2:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d05c      	beq.n	8003098 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d141      	bne.n	800306a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b31      	ldr	r3, [pc, #196]	; (80030ac <HAL_RCC_OscConfig+0x478>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe f8d8 	bl	80011a0 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe f8d4 	bl	80011a0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e087      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	4b27      	ldr	r3, [pc, #156]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	019b      	lsls	r3, r3, #6
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	3b01      	subs	r3, #1
 800302c:	041b      	lsls	r3, r3, #16
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	491b      	ldr	r1, [pc, #108]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_RCC_OscConfig+0x478>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fe f8ad 	bl	80011a0 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304a:	f7fe f8a9 	bl	80011a0 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e05c      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x416>
 8003068:	e054      	b.n	8003114 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <HAL_RCC_OscConfig+0x478>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe f896 	bl	80011a0 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003078:	f7fe f892 	bl	80011a0 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e045      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_RCC_OscConfig+0x470>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x444>
 8003096:	e03d      	b.n	8003114 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e038      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40007000 	.word	0x40007000
 80030ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x4ec>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d028      	beq.n	8003110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d121      	bne.n	8003110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d11a      	bne.n	8003110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030e0:	4013      	ands	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d111      	bne.n	8003110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	3b01      	subs	r3, #1
 80030fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d107      	bne.n	8003110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800

08003124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0cc      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	4b68      	ldr	r3, [pc, #416]	; (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d90c      	bls.n	8003160 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b65      	ldr	r3, [pc, #404]	; (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	4b63      	ldr	r3, [pc, #396]	; (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0b8      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d020      	beq.n	80031ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003178:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003182:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003190:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4a52      	ldr	r2, [pc, #328]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800319a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800319c:	4b50      	ldr	r3, [pc, #320]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	494d      	ldr	r1, [pc, #308]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d044      	beq.n	8003244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d119      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e07f      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d003      	beq.n	80031e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e2:	4b3f      	ldr	r3, [pc, #252]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e06f      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f2:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e067      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003202:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f023 0203 	bic.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4934      	ldr	r1, [pc, #208]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003214:	f7fd ffc4 	bl	80011a0 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	e00a      	b.n	8003232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321c:	f7fd ffc0 	bl	80011a0 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	; 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e04f      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 020c 	and.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	429a      	cmp	r2, r3
 8003242:	d1eb      	bne.n	800321c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003244:	4b25      	ldr	r3, [pc, #148]	; (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d20c      	bcs.n	800326c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e032      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4916      	ldr	r1, [pc, #88]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	490e      	ldr	r1, [pc, #56]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032aa:	f000 f821 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80032ae:	4602      	mov	r2, r0
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	490a      	ldr	r1, [pc, #40]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	5ccb      	ldrb	r3, [r1, r3]
 80032be:	fa22 f303 	lsr.w	r3, r2, r3
 80032c2:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd ff24 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023c00 	.word	0x40023c00
 80032e0:	40023800 	.word	0x40023800
 80032e4:	08008690 	.word	0x08008690
 80032e8:	20000018 	.word	0x20000018
 80032ec:	20000024 	.word	0x20000024

080032f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f4:	b094      	sub	sp, #80	; 0x50
 80032f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	647b      	str	r3, [r7, #68]	; 0x44
 80032fc:	2300      	movs	r3, #0
 80032fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003300:	2300      	movs	r3, #0
 8003302:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003308:	4b79      	ldr	r3, [pc, #484]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 030c 	and.w	r3, r3, #12
 8003310:	2b08      	cmp	r3, #8
 8003312:	d00d      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x40>
 8003314:	2b08      	cmp	r3, #8
 8003316:	f200 80e1 	bhi.w	80034dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x34>
 800331e:	2b04      	cmp	r3, #4
 8003320:	d003      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0x3a>
 8003322:	e0db      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003324:	4b73      	ldr	r3, [pc, #460]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003326:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003328:	e0db      	b.n	80034e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800332a:	4b73      	ldr	r3, [pc, #460]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800332c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800332e:	e0d8      	b.n	80034e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003330:	4b6f      	ldr	r3, [pc, #444]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003338:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800333a:	4b6d      	ldr	r3, [pc, #436]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d063      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003346:	4b6a      	ldr	r3, [pc, #424]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	099b      	lsrs	r3, r3, #6
 800334c:	2200      	movs	r2, #0
 800334e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003350:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
 800335a:	2300      	movs	r3, #0
 800335c:	637b      	str	r3, [r7, #52]	; 0x34
 800335e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003362:	4622      	mov	r2, r4
 8003364:	462b      	mov	r3, r5
 8003366:	f04f 0000 	mov.w	r0, #0
 800336a:	f04f 0100 	mov.w	r1, #0
 800336e:	0159      	lsls	r1, r3, #5
 8003370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003374:	0150      	lsls	r0, r2, #5
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4621      	mov	r1, r4
 800337c:	1a51      	subs	r1, r2, r1
 800337e:	6139      	str	r1, [r7, #16]
 8003380:	4629      	mov	r1, r5
 8003382:	eb63 0301 	sbc.w	r3, r3, r1
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003394:	4659      	mov	r1, fp
 8003396:	018b      	lsls	r3, r1, #6
 8003398:	4651      	mov	r1, sl
 800339a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800339e:	4651      	mov	r1, sl
 80033a0:	018a      	lsls	r2, r1, #6
 80033a2:	4651      	mov	r1, sl
 80033a4:	ebb2 0801 	subs.w	r8, r2, r1
 80033a8:	4659      	mov	r1, fp
 80033aa:	eb63 0901 	sbc.w	r9, r3, r1
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033c2:	4690      	mov	r8, r2
 80033c4:	4699      	mov	r9, r3
 80033c6:	4623      	mov	r3, r4
 80033c8:	eb18 0303 	adds.w	r3, r8, r3
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	462b      	mov	r3, r5
 80033d0:	eb49 0303 	adc.w	r3, r9, r3
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033e2:	4629      	mov	r1, r5
 80033e4:	024b      	lsls	r3, r1, #9
 80033e6:	4621      	mov	r1, r4
 80033e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033ec:	4621      	mov	r1, r4
 80033ee:	024a      	lsls	r2, r1, #9
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f6:	2200      	movs	r2, #0
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003400:	f7fc fef4 	bl	80001ec <__aeabi_uldivmod>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4613      	mov	r3, r2
 800340a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800340c:	e058      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340e:	4b38      	ldr	r3, [pc, #224]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	2200      	movs	r2, #0
 8003416:	4618      	mov	r0, r3
 8003418:	4611      	mov	r1, r2
 800341a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800341e:	623b      	str	r3, [r7, #32]
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
 8003424:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003428:	4642      	mov	r2, r8
 800342a:	464b      	mov	r3, r9
 800342c:	f04f 0000 	mov.w	r0, #0
 8003430:	f04f 0100 	mov.w	r1, #0
 8003434:	0159      	lsls	r1, r3, #5
 8003436:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800343a:	0150      	lsls	r0, r2, #5
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4641      	mov	r1, r8
 8003442:	ebb2 0a01 	subs.w	sl, r2, r1
 8003446:	4649      	mov	r1, r9
 8003448:	eb63 0b01 	sbc.w	fp, r3, r1
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003458:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800345c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003460:	ebb2 040a 	subs.w	r4, r2, sl
 8003464:	eb63 050b 	sbc.w	r5, r3, fp
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	00eb      	lsls	r3, r5, #3
 8003472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003476:	00e2      	lsls	r2, r4, #3
 8003478:	4614      	mov	r4, r2
 800347a:	461d      	mov	r5, r3
 800347c:	4643      	mov	r3, r8
 800347e:	18e3      	adds	r3, r4, r3
 8003480:	603b      	str	r3, [r7, #0]
 8003482:	464b      	mov	r3, r9
 8003484:	eb45 0303 	adc.w	r3, r5, r3
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003496:	4629      	mov	r1, r5
 8003498:	028b      	lsls	r3, r1, #10
 800349a:	4621      	mov	r1, r4
 800349c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034a0:	4621      	mov	r1, r4
 80034a2:	028a      	lsls	r2, r1, #10
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034aa:	2200      	movs	r2, #0
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	61fa      	str	r2, [r7, #28]
 80034b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b4:	f7fc fe9a 	bl	80001ec <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4613      	mov	r3, r2
 80034be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	0c1b      	lsrs	r3, r3, #16
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	3301      	adds	r3, #1
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034da:	e002      	b.n	80034e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80034de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3750      	adds	r7, #80	; 0x50
 80034e8:	46bd      	mov	sp, r7
 80034ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
 80034f4:	00f42400 	.word	0x00f42400
 80034f8:	007a1200 	.word	0x007a1200

080034fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <HAL_RCC_GetHCLKFreq+0x14>)
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000018 	.word	0x20000018

08003514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003518:	f7ff fff0 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	0a9b      	lsrs	r3, r3, #10
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4903      	ldr	r1, [pc, #12]	; (8003538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003530:	4618      	mov	r0, r3
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40023800 	.word	0x40023800
 8003538:	080086a0 	.word	0x080086a0

0800353c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003540:	f7ff ffdc 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	0b5b      	lsrs	r3, r3, #13
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4903      	ldr	r1, [pc, #12]	; (8003560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40023800 	.word	0x40023800
 8003560:	080086a0 	.word	0x080086a0

08003564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e042      	b.n	80035fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd faae 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fa09 	bl	80039c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b20      	cmp	r3, #32
 8003622:	d175      	bne.n	8003710 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_UART_Transmit+0x2c>
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e06e      	b.n	8003712 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2221      	movs	r2, #33	; 0x21
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003642:	f7fd fdad 	bl	80011a0 <HAL_GetTick>
 8003646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	88fa      	ldrh	r2, [r7, #6]
 800364c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365c:	d108      	bne.n	8003670 <HAL_UART_Transmit+0x6c>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d104      	bne.n	8003670 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	e003      	b.n	8003678 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003674:	2300      	movs	r3, #0
 8003676:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003678:	e02e      	b.n	80036d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2200      	movs	r2, #0
 8003682:	2180      	movs	r1, #128	; 0x80
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f8df 	bl	8003848 <UART_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e03a      	b.n	8003712 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10b      	bne.n	80036ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	3302      	adds	r3, #2
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	e007      	b.n	80036ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	3301      	adds	r3, #1
 80036c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1cb      	bne.n	800367a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2140      	movs	r1, #64	; 0x40
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f8ab 	bl	8003848 <UART_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e006      	b.n	8003712 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	e000      	b.n	8003712 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003710:	2302      	movs	r3, #2
  }
}
 8003712:	4618      	mov	r0, r3
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b08a      	sub	sp, #40	; 0x28
 800371e:	af02      	add	r7, sp, #8
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	603b      	str	r3, [r7, #0]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b20      	cmp	r3, #32
 8003738:	f040 8081 	bne.w	800383e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_UART_Receive+0x2e>
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e079      	b.n	8003840 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2222      	movs	r2, #34	; 0x22
 8003756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003760:	f7fd fd1e 	bl	80011a0 <HAL_GetTick>
 8003764:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	88fa      	ldrh	r2, [r7, #6]
 800376a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	d108      	bne.n	800378e <HAL_UART_Receive+0x74>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d104      	bne.n	800378e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	e003      	b.n	8003796 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003796:	e047      	b.n	8003828 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2200      	movs	r2, #0
 80037a0:	2120      	movs	r1, #32
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f850 	bl	8003848 <UART_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e042      	b.n	8003840 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10c      	bne.n	80037da <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	3302      	adds	r3, #2
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	e01f      	b.n	800381a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e2:	d007      	beq.n	80037f4 <HAL_UART_Receive+0xda>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <HAL_UART_Receive+0xe8>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d106      	bne.n	8003802 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	e008      	b.n	8003814 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380e:	b2da      	uxtb	r2, r3
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	3301      	adds	r3, #1
 8003818:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1b2      	bne.n	8003798 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003858:	e03b      	b.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003860:	d037      	beq.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003862:	f7fd fc9d 	bl	80011a0 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	6a3a      	ldr	r2, [r7, #32]
 800386e:	429a      	cmp	r2, r3
 8003870:	d302      	bcc.n	8003878 <UART_WaitOnFlagUntilTimeout+0x30>
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e03a      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d023      	beq.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b80      	cmp	r3, #128	; 0x80
 800388e:	d020      	beq.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b40      	cmp	r3, #64	; 0x40
 8003894:	d01d      	beq.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d116      	bne.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f81d 	bl	80038fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2208      	movs	r2, #8
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e00f      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4013      	ands	r3, r2
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d0b4      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b095      	sub	sp, #84	; 0x54
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	330c      	adds	r3, #12
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390c:	e853 3f00 	ldrex	r3, [r3]
 8003910:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	330c      	adds	r3, #12
 8003920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003922:	643a      	str	r2, [r7, #64]	; 0x40
 8003924:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e5      	bne.n	8003902 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3314      	adds	r3, #20
 800393c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	61fb      	str	r3, [r7, #28]
   return(result);
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	64bb      	str	r3, [r7, #72]	; 0x48
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3314      	adds	r3, #20
 8003954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800395c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e5      	bne.n	8003936 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	2b01      	cmp	r3, #1
 8003970:	d119      	bne.n	80039a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	60bb      	str	r3, [r7, #8]
   return(result);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f023 0310 	bic.w	r3, r3, #16
 8003988:	647b      	str	r3, [r7, #68]	; 0x44
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	330c      	adds	r3, #12
 8003990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003992:	61ba      	str	r2, [r7, #24]
 8003994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	6979      	ldr	r1, [r7, #20]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	613b      	str	r3, [r7, #16]
   return(result);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e5      	bne.n	8003972 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039b4:	bf00      	nop
 80039b6:	3754      	adds	r7, #84	; 0x54
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c4:	b0c0      	sub	sp, #256	; 0x100
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039dc:	68d9      	ldr	r1, [r3, #12]
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	ea40 0301 	orr.w	r3, r0, r1
 80039e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a18:	f021 010c 	bic.w	r1, r1, #12
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a26:	430b      	orrs	r3, r1
 8003a28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3a:	6999      	ldr	r1, [r3, #24]
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	ea40 0301 	orr.w	r3, r0, r1
 8003a46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b8f      	ldr	r3, [pc, #572]	; (8003c8c <UART_SetConfig+0x2cc>)
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d005      	beq.n	8003a60 <UART_SetConfig+0xa0>
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4b8d      	ldr	r3, [pc, #564]	; (8003c90 <UART_SetConfig+0x2d0>)
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d104      	bne.n	8003a6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a60:	f7ff fd6c 	bl	800353c <HAL_RCC_GetPCLK2Freq>
 8003a64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a68:	e003      	b.n	8003a72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a6a:	f7ff fd53 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 8003a6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7c:	f040 810c 	bne.w	8003c98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a84:	2200      	movs	r2, #0
 8003a86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a92:	4622      	mov	r2, r4
 8003a94:	462b      	mov	r3, r5
 8003a96:	1891      	adds	r1, r2, r2
 8003a98:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a9a:	415b      	adcs	r3, r3
 8003a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	eb12 0801 	adds.w	r8, r2, r1
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	eb43 0901 	adc.w	r9, r3, r1
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ac2:	4690      	mov	r8, r2
 8003ac4:	4699      	mov	r9, r3
 8003ac6:	4623      	mov	r3, r4
 8003ac8:	eb18 0303 	adds.w	r3, r8, r3
 8003acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ad0:	462b      	mov	r3, r5
 8003ad2:	eb49 0303 	adc.w	r3, r9, r3
 8003ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ae6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003aea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003aee:	460b      	mov	r3, r1
 8003af0:	18db      	adds	r3, r3, r3
 8003af2:	653b      	str	r3, [r7, #80]	; 0x50
 8003af4:	4613      	mov	r3, r2
 8003af6:	eb42 0303 	adc.w	r3, r2, r3
 8003afa:	657b      	str	r3, [r7, #84]	; 0x54
 8003afc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b04:	f7fc fb72 	bl	80001ec <__aeabi_uldivmod>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4b61      	ldr	r3, [pc, #388]	; (8003c94 <UART_SetConfig+0x2d4>)
 8003b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	011c      	lsls	r4, r3, #4
 8003b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b28:	4642      	mov	r2, r8
 8003b2a:	464b      	mov	r3, r9
 8003b2c:	1891      	adds	r1, r2, r2
 8003b2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b30:	415b      	adcs	r3, r3
 8003b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b38:	4641      	mov	r1, r8
 8003b3a:	eb12 0a01 	adds.w	sl, r2, r1
 8003b3e:	4649      	mov	r1, r9
 8003b40:	eb43 0b01 	adc.w	fp, r3, r1
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b58:	4692      	mov	sl, r2
 8003b5a:	469b      	mov	fp, r3
 8003b5c:	4643      	mov	r3, r8
 8003b5e:	eb1a 0303 	adds.w	r3, sl, r3
 8003b62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b66:	464b      	mov	r3, r9
 8003b68:	eb4b 0303 	adc.w	r3, fp, r3
 8003b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b84:	460b      	mov	r3, r1
 8003b86:	18db      	adds	r3, r3, r3
 8003b88:	643b      	str	r3, [r7, #64]	; 0x40
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	eb42 0303 	adc.w	r3, r2, r3
 8003b90:	647b      	str	r3, [r7, #68]	; 0x44
 8003b92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b9a:	f7fc fb27 	bl	80001ec <__aeabi_uldivmod>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4b3b      	ldr	r3, [pc, #236]	; (8003c94 <UART_SetConfig+0x2d4>)
 8003ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	2264      	movs	r2, #100	; 0x64
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	1acb      	subs	r3, r1, r3
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bba:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <UART_SetConfig+0x2d4>)
 8003bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bc8:	441c      	add	r4, r3
 8003bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003bd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003bdc:	4642      	mov	r2, r8
 8003bde:	464b      	mov	r3, r9
 8003be0:	1891      	adds	r1, r2, r2
 8003be2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003be4:	415b      	adcs	r3, r3
 8003be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bec:	4641      	mov	r1, r8
 8003bee:	1851      	adds	r1, r2, r1
 8003bf0:	6339      	str	r1, [r7, #48]	; 0x30
 8003bf2:	4649      	mov	r1, r9
 8003bf4:	414b      	adcs	r3, r1
 8003bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c04:	4659      	mov	r1, fp
 8003c06:	00cb      	lsls	r3, r1, #3
 8003c08:	4651      	mov	r1, sl
 8003c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c0e:	4651      	mov	r1, sl
 8003c10:	00ca      	lsls	r2, r1, #3
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	4642      	mov	r2, r8
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c20:	464b      	mov	r3, r9
 8003c22:	460a      	mov	r2, r1
 8003c24:	eb42 0303 	adc.w	r3, r2, r3
 8003c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c40:	460b      	mov	r3, r1
 8003c42:	18db      	adds	r3, r3, r3
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c46:	4613      	mov	r3, r2
 8003c48:	eb42 0303 	adc.w	r3, r2, r3
 8003c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c56:	f7fc fac9 	bl	80001ec <__aeabi_uldivmod>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <UART_SetConfig+0x2d4>)
 8003c60:	fba3 1302 	umull	r1, r3, r3, r2
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	2164      	movs	r1, #100	; 0x64
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	3332      	adds	r3, #50	; 0x32
 8003c72:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <UART_SetConfig+0x2d4>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	f003 0207 	and.w	r2, r3, #7
 8003c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4422      	add	r2, r4
 8003c86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c88:	e106      	b.n	8003e98 <UART_SetConfig+0x4d8>
 8003c8a:	bf00      	nop
 8003c8c:	40011000 	.word	0x40011000
 8003c90:	40011400 	.word	0x40011400
 8003c94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ca2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ca6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003caa:	4642      	mov	r2, r8
 8003cac:	464b      	mov	r3, r9
 8003cae:	1891      	adds	r1, r2, r2
 8003cb0:	6239      	str	r1, [r7, #32]
 8003cb2:	415b      	adcs	r3, r3
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cba:	4641      	mov	r1, r8
 8003cbc:	1854      	adds	r4, r2, r1
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	eb43 0501 	adc.w	r5, r3, r1
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	00eb      	lsls	r3, r5, #3
 8003cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cd2:	00e2      	lsls	r2, r4, #3
 8003cd4:	4614      	mov	r4, r2
 8003cd6:	461d      	mov	r5, r3
 8003cd8:	4643      	mov	r3, r8
 8003cda:	18e3      	adds	r3, r4, r3
 8003cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	eb45 0303 	adc.w	r3, r5, r3
 8003ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d06:	4629      	mov	r1, r5
 8003d08:	008b      	lsls	r3, r1, #2
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d10:	4621      	mov	r1, r4
 8003d12:	008a      	lsls	r2, r1, #2
 8003d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d18:	f7fc fa68 	bl	80001ec <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4b60      	ldr	r3, [pc, #384]	; (8003ea4 <UART_SetConfig+0x4e4>)
 8003d22:	fba3 2302 	umull	r2, r3, r3, r2
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	011c      	lsls	r4, r3, #4
 8003d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	464b      	mov	r3, r9
 8003d40:	1891      	adds	r1, r2, r2
 8003d42:	61b9      	str	r1, [r7, #24]
 8003d44:	415b      	adcs	r3, r3
 8003d46:	61fb      	str	r3, [r7, #28]
 8003d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	1851      	adds	r1, r2, r1
 8003d50:	6139      	str	r1, [r7, #16]
 8003d52:	4649      	mov	r1, r9
 8003d54:	414b      	adcs	r3, r1
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d64:	4659      	mov	r1, fp
 8003d66:	00cb      	lsls	r3, r1, #3
 8003d68:	4651      	mov	r1, sl
 8003d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d6e:	4651      	mov	r1, sl
 8003d70:	00ca      	lsls	r2, r1, #3
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	4642      	mov	r2, r8
 8003d7a:	189b      	adds	r3, r3, r2
 8003d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d80:	464b      	mov	r3, r9
 8003d82:	460a      	mov	r2, r1
 8003d84:	eb42 0303 	adc.w	r3, r2, r3
 8003d88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003da4:	4649      	mov	r1, r9
 8003da6:	008b      	lsls	r3, r1, #2
 8003da8:	4641      	mov	r1, r8
 8003daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dae:	4641      	mov	r1, r8
 8003db0:	008a      	lsls	r2, r1, #2
 8003db2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003db6:	f7fc fa19 	bl	80001ec <__aeabi_uldivmod>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4b38      	ldr	r3, [pc, #224]	; (8003ea4 <UART_SetConfig+0x4e4>)
 8003dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	2264      	movs	r2, #100	; 0x64
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	1acb      	subs	r3, r1, r3
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	3332      	adds	r3, #50	; 0x32
 8003dd4:	4a33      	ldr	r2, [pc, #204]	; (8003ea4 <UART_SetConfig+0x4e4>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de0:	441c      	add	r4, r3
 8003de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de6:	2200      	movs	r2, #0
 8003de8:	673b      	str	r3, [r7, #112]	; 0x70
 8003dea:	677a      	str	r2, [r7, #116]	; 0x74
 8003dec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003df0:	4642      	mov	r2, r8
 8003df2:	464b      	mov	r3, r9
 8003df4:	1891      	adds	r1, r2, r2
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	415b      	adcs	r3, r3
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e00:	4641      	mov	r1, r8
 8003e02:	1851      	adds	r1, r2, r1
 8003e04:	6039      	str	r1, [r7, #0]
 8003e06:	4649      	mov	r1, r9
 8003e08:	414b      	adcs	r3, r1
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e18:	4659      	mov	r1, fp
 8003e1a:	00cb      	lsls	r3, r1, #3
 8003e1c:	4651      	mov	r1, sl
 8003e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e22:	4651      	mov	r1, sl
 8003e24:	00ca      	lsls	r2, r1, #3
 8003e26:	4610      	mov	r0, r2
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	189b      	adds	r3, r3, r2
 8003e30:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e32:	464b      	mov	r3, r9
 8003e34:	460a      	mov	r2, r1
 8003e36:	eb42 0303 	adc.w	r3, r2, r3
 8003e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	663b      	str	r3, [r7, #96]	; 0x60
 8003e46:	667a      	str	r2, [r7, #100]	; 0x64
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e54:	4649      	mov	r1, r9
 8003e56:	008b      	lsls	r3, r1, #2
 8003e58:	4641      	mov	r1, r8
 8003e5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e5e:	4641      	mov	r1, r8
 8003e60:	008a      	lsls	r2, r1, #2
 8003e62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e66:	f7fc f9c1 	bl	80001ec <__aeabi_uldivmod>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <UART_SetConfig+0x4e4>)
 8003e70:	fba3 1302 	umull	r1, r3, r3, r2
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	2164      	movs	r1, #100	; 0x64
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	3332      	adds	r3, #50	; 0x32
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <UART_SetConfig+0x4e4>)
 8003e84:	fba2 2303 	umull	r2, r3, r2, r3
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	f003 020f 	and.w	r2, r3, #15
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4422      	add	r2, r4
 8003e96:	609a      	str	r2, [r3, #8]
}
 8003e98:	bf00      	nop
 8003e9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ea4:	51eb851f 	.word	0x51eb851f

08003ea8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	f107 001c 	add.w	r0, r7, #28
 8003eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003eba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d123      	bne.n	8003f0a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003eea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d105      	bne.n	8003efe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f001 fae2 	bl	80054c8 <USB_CoreReset>
 8003f04:	4603      	mov	r3, r0
 8003f06:	73fb      	strb	r3, [r7, #15]
 8003f08:	e01b      	b.n	8003f42 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f001 fad6 	bl	80054c8 <USB_CoreReset>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	639a      	str	r2, [r3, #56]	; 0x38
 8003f34:	e005      	b.n	8003f42 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f42:	7fbb      	ldrb	r3, [r7, #30]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d10b      	bne.n	8003f60 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f043 0206 	orr.w	r2, r3, #6
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f043 0220 	orr.w	r2, r3, #32
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f6c:	b004      	add	sp, #16
 8003f6e:	4770      	bx	lr

08003f70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d165      	bne.n	8004050 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4a41      	ldr	r2, [pc, #260]	; (800408c <USB_SetTurnaroundTime+0x11c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d906      	bls.n	8003f9a <USB_SetTurnaroundTime+0x2a>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4a40      	ldr	r2, [pc, #256]	; (8004090 <USB_SetTurnaroundTime+0x120>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d202      	bcs.n	8003f9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f94:	230f      	movs	r3, #15
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	e062      	b.n	8004060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4a3c      	ldr	r2, [pc, #240]	; (8004090 <USB_SetTurnaroundTime+0x120>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d306      	bcc.n	8003fb0 <USB_SetTurnaroundTime+0x40>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4a3b      	ldr	r2, [pc, #236]	; (8004094 <USB_SetTurnaroundTime+0x124>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d202      	bcs.n	8003fb0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003faa:	230e      	movs	r3, #14
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e057      	b.n	8004060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4a38      	ldr	r2, [pc, #224]	; (8004094 <USB_SetTurnaroundTime+0x124>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d306      	bcc.n	8003fc6 <USB_SetTurnaroundTime+0x56>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4a37      	ldr	r2, [pc, #220]	; (8004098 <USB_SetTurnaroundTime+0x128>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d202      	bcs.n	8003fc6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003fc0:	230d      	movs	r3, #13
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	e04c      	b.n	8004060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4a33      	ldr	r2, [pc, #204]	; (8004098 <USB_SetTurnaroundTime+0x128>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d306      	bcc.n	8003fdc <USB_SetTurnaroundTime+0x6c>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4a32      	ldr	r2, [pc, #200]	; (800409c <USB_SetTurnaroundTime+0x12c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d802      	bhi.n	8003fdc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003fd6:	230c      	movs	r3, #12
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	e041      	b.n	8004060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4a2f      	ldr	r2, [pc, #188]	; (800409c <USB_SetTurnaroundTime+0x12c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d906      	bls.n	8003ff2 <USB_SetTurnaroundTime+0x82>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4a2e      	ldr	r2, [pc, #184]	; (80040a0 <USB_SetTurnaroundTime+0x130>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d802      	bhi.n	8003ff2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003fec:	230b      	movs	r3, #11
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e036      	b.n	8004060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4a2a      	ldr	r2, [pc, #168]	; (80040a0 <USB_SetTurnaroundTime+0x130>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d906      	bls.n	8004008 <USB_SetTurnaroundTime+0x98>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	4a29      	ldr	r2, [pc, #164]	; (80040a4 <USB_SetTurnaroundTime+0x134>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d802      	bhi.n	8004008 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004002:	230a      	movs	r3, #10
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e02b      	b.n	8004060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4a26      	ldr	r2, [pc, #152]	; (80040a4 <USB_SetTurnaroundTime+0x134>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d906      	bls.n	800401e <USB_SetTurnaroundTime+0xae>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <USB_SetTurnaroundTime+0x138>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d202      	bcs.n	800401e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004018:	2309      	movs	r3, #9
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e020      	b.n	8004060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4a21      	ldr	r2, [pc, #132]	; (80040a8 <USB_SetTurnaroundTime+0x138>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d306      	bcc.n	8004034 <USB_SetTurnaroundTime+0xc4>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4a20      	ldr	r2, [pc, #128]	; (80040ac <USB_SetTurnaroundTime+0x13c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d802      	bhi.n	8004034 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800402e:	2308      	movs	r3, #8
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	e015      	b.n	8004060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <USB_SetTurnaroundTime+0x13c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d906      	bls.n	800404a <USB_SetTurnaroundTime+0xda>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4a1c      	ldr	r2, [pc, #112]	; (80040b0 <USB_SetTurnaroundTime+0x140>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d202      	bcs.n	800404a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004044:	2307      	movs	r3, #7
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	e00a      	b.n	8004060 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800404a:	2306      	movs	r3, #6
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e007      	b.n	8004060 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d102      	bne.n	800405c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004056:	2309      	movs	r3, #9
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	e001      	b.n	8004060 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800405c:	2309      	movs	r3, #9
 800405e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	029b      	lsls	r3, r3, #10
 8004074:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004078:	431a      	orrs	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	00d8acbf 	.word	0x00d8acbf
 8004090:	00e4e1c0 	.word	0x00e4e1c0
 8004094:	00f42400 	.word	0x00f42400
 8004098:	01067380 	.word	0x01067380
 800409c:	011a499f 	.word	0x011a499f
 80040a0:	01312cff 	.word	0x01312cff
 80040a4:	014ca43f 	.word	0x014ca43f
 80040a8:	016e3600 	.word	0x016e3600
 80040ac:	01a6ab1f 	.word	0x01a6ab1f
 80040b0:	01e84800 	.word	0x01e84800

080040b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f043 0201 	orr.w	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f023 0201 	bic.w	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d115      	bne.n	8004146 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004126:	200a      	movs	r0, #10
 8004128:	f7fd f846 	bl	80011b8 <HAL_Delay>
      ms += 10U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	330a      	adds	r3, #10
 8004130:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f001 f939 	bl	80053aa <USB_GetMode>
 8004138:	4603      	mov	r3, r0
 800413a:	2b01      	cmp	r3, #1
 800413c:	d01e      	beq.n	800417c <USB_SetCurrentMode+0x84>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2bc7      	cmp	r3, #199	; 0xc7
 8004142:	d9f0      	bls.n	8004126 <USB_SetCurrentMode+0x2e>
 8004144:	e01a      	b.n	800417c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d115      	bne.n	8004178 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004158:	200a      	movs	r0, #10
 800415a:	f7fd f82d 	bl	80011b8 <HAL_Delay>
      ms += 10U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	330a      	adds	r3, #10
 8004162:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f001 f920 	bl	80053aa <USB_GetMode>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <USB_SetCurrentMode+0x84>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2bc7      	cmp	r3, #199	; 0xc7
 8004174:	d9f0      	bls.n	8004158 <USB_SetCurrentMode+0x60>
 8004176:	e001      	b.n	800417c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e005      	b.n	8004188 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2bc8      	cmp	r3, #200	; 0xc8
 8004180:	d101      	bne.n	8004186 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004190:	b084      	sub	sp, #16
 8004192:	b580      	push	{r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800419e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041aa:	2300      	movs	r3, #0
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	e009      	b.n	80041c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	3340      	adds	r3, #64	; 0x40
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	2200      	movs	r2, #0
 80041bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	3301      	adds	r3, #1
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b0e      	cmp	r3, #14
 80041c8:	d9f2      	bls.n	80041b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d11c      	bne.n	800420c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041e0:	f043 0302 	orr.w	r3, r3, #2
 80041e4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	639a      	str	r2, [r3, #56]	; 0x38
 800420a:	e00b      	b.n	8004224 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800422a:	461a      	mov	r2, r3
 800422c:	2300      	movs	r3, #0
 800422e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004230:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004234:	2b01      	cmp	r3, #1
 8004236:	d10d      	bne.n	8004254 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800423c:	2b00      	cmp	r3, #0
 800423e:	d104      	bne.n	800424a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004240:	2100      	movs	r1, #0
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f968 	bl	8004518 <USB_SetDevSpeed>
 8004248:	e008      	b.n	800425c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800424a:	2101      	movs	r1, #1
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f963 	bl	8004518 <USB_SetDevSpeed>
 8004252:	e003      	b.n	800425c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004254:	2103      	movs	r1, #3
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f95e 	bl	8004518 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800425c:	2110      	movs	r1, #16
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f8fa 	bl	8004458 <USB_FlushTxFifo>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f924 	bl	80044bc <USB_FlushRxFifo>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004284:	461a      	mov	r2, r3
 8004286:	2300      	movs	r3, #0
 8004288:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004290:	461a      	mov	r2, r3
 8004292:	2300      	movs	r3, #0
 8004294:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429c:	461a      	mov	r2, r3
 800429e:	2300      	movs	r3, #0
 80042a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	e043      	b.n	8004330 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042be:	d118      	bne.n	80042f2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d2:	461a      	mov	r2, r3
 80042d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e013      	b.n	8004304 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e8:	461a      	mov	r2, r3
 80042ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	e008      	b.n	8004304 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fe:	461a      	mov	r2, r3
 8004300:	2300      	movs	r3, #0
 8004302:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004310:	461a      	mov	r2, r3
 8004312:	2300      	movs	r3, #0
 8004314:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004322:	461a      	mov	r2, r3
 8004324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004328:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	3301      	adds	r3, #1
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004334:	461a      	mov	r2, r3
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4293      	cmp	r3, r2
 800433a:	d3b5      	bcc.n	80042a8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	e043      	b.n	80043ca <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004358:	d118      	bne.n	800438c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10a      	bne.n	8004376 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436c:	461a      	mov	r2, r3
 800436e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e013      	b.n	800439e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	461a      	mov	r2, r3
 8004384:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e008      	b.n	800439e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	461a      	mov	r2, r3
 800439a:	2300      	movs	r3, #0
 800439c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043aa:	461a      	mov	r2, r3
 80043ac:	2300      	movs	r3, #0
 80043ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043bc:	461a      	mov	r2, r3
 80043be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	3301      	adds	r3, #1
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043ce:	461a      	mov	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d3b5      	bcc.n	8004342 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d105      	bne.n	800440c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f043 0210 	orr.w	r2, r3, #16
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <USB_DevInit+0x2c4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004418:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f043 0208 	orr.w	r2, r3, #8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800442c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004430:	2b01      	cmp	r3, #1
 8004432:	d107      	bne.n	8004444 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800443c:	f043 0304 	orr.w	r3, r3, #4
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004444:	7dfb      	ldrb	r3, [r7, #23]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004450:	b004      	add	sp, #16
 8004452:	4770      	bx	lr
 8004454:	803c3800 	.word	0x803c3800

08004458 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3301      	adds	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004472:	d901      	bls.n	8004478 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e01b      	b.n	80044b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	daf2      	bge.n	8004466 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	019b      	lsls	r3, r3, #6
 8004488:	f043 0220 	orr.w	r2, r3, #32
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3301      	adds	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800449c:	d901      	bls.n	80044a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e006      	b.n	80044b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	d0f0      	beq.n	8004490 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3301      	adds	r3, #1
 80044cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80044d4:	d901      	bls.n	80044da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e018      	b.n	800450c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	daf2      	bge.n	80044c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2210      	movs	r2, #16
 80044ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3301      	adds	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80044f8:	d901      	bls.n	80044fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e006      	b.n	800450c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b10      	cmp	r3, #16
 8004508:	d0f0      	beq.n	80044ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004538:	4313      	orrs	r3, r2
 800453a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800454a:	b480      	push	{r7}
 800454c:	b087      	sub	sp, #28
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0306 	and.w	r3, r3, #6
 8004562:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]
 800456e:	e00a      	b.n	8004586 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d002      	beq.n	800457c <USB_GetDevSpeed+0x32>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b06      	cmp	r3, #6
 800457a:	d102      	bne.n	8004582 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800457c:	2302      	movs	r3, #2
 800457e:	75fb      	strb	r3, [r7, #23]
 8004580:	e001      	b.n	8004586 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004582:	230f      	movs	r3, #15
 8004584:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004586:	7dfb      	ldrb	r3, [r7, #23]
}
 8004588:	4618      	mov	r0, r3
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d13a      	bne.n	8004626 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	2101      	movs	r1, #1
 80045c2:	fa01 f303 	lsl.w	r3, r1, r3
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	68f9      	ldr	r1, [r7, #12]
 80045ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d155      	bne.n	8004694 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	791b      	ldrb	r3, [r3, #4]
 8004602:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004604:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	059b      	lsls	r3, r3, #22
 800460a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800460c:	4313      	orrs	r3, r2
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800461a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	e036      	b.n	8004694 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462c:	69da      	ldr	r2, [r3, #28]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	2101      	movs	r1, #1
 8004638:	fa01 f303 	lsl.w	r3, r1, r3
 800463c:	041b      	lsls	r3, r3, #16
 800463e:	68f9      	ldr	r1, [r7, #12]
 8004640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004644:	4313      	orrs	r3, r2
 8004646:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d11a      	bne.n	8004694 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	791b      	ldrb	r3, [r3, #4]
 8004678:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800467a:	430b      	orrs	r3, r1
 800467c:	4313      	orrs	r3, r2
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	440a      	add	r2, r1
 8004686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800468a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004692:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d161      	bne.n	8004784 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046d6:	d11f      	bne.n	8004718 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	0151      	lsls	r1, r2, #5
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	440a      	add	r2, r1
 80046ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004716:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	2101      	movs	r1, #1
 800472a:	fa01 f303 	lsl.w	r3, r1, r3
 800472e:	b29b      	uxth	r3, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004738:	4013      	ands	r3, r2
 800473a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004742:	69da      	ldr	r2, [r3, #28]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	2101      	movs	r1, #1
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	b29b      	uxth	r3, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	68f9      	ldr	r1, [r7, #12]
 8004758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800475c:	4013      	ands	r3, r2
 800475e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	0159      	lsls	r1, r3, #5
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	440b      	add	r3, r1
 8004776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477a:	4619      	mov	r1, r3
 800477c:	4b35      	ldr	r3, [pc, #212]	; (8004854 <USB_DeactivateEndpoint+0x1b0>)
 800477e:	4013      	ands	r3, r2
 8004780:	600b      	str	r3, [r1, #0]
 8004782:	e060      	b.n	8004846 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800479a:	d11f      	bne.n	80047dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	2101      	movs	r1, #1
 80047ee:	fa01 f303 	lsl.w	r3, r1, r3
 80047f2:	041b      	lsls	r3, r3, #16
 80047f4:	43db      	mvns	r3, r3
 80047f6:	68f9      	ldr	r1, [r7, #12]
 80047f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047fc:	4013      	ands	r3, r2
 80047fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	2101      	movs	r1, #1
 8004812:	fa01 f303 	lsl.w	r3, r1, r3
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	43db      	mvns	r3, r3
 800481a:	68f9      	ldr	r1, [r7, #12]
 800481c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004820:	4013      	ands	r3, r2
 8004822:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	0159      	lsls	r1, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	440b      	add	r3, r1
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	4619      	mov	r1, r3
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <USB_DeactivateEndpoint+0x1b4>)
 8004842:	4013      	ands	r3, r2
 8004844:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	ec337800 	.word	0xec337800
 8004858:	eff37800 	.word	0xeff37800

0800485c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	; 0x28
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	2b01      	cmp	r3, #1
 800487a:	f040 817a 	bne.w	8004b72 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d132      	bne.n	80048ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	0151      	lsls	r1, r2, #5
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	440a      	add	r2, r1
 80048c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	0151      	lsls	r1, r2, #5
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	440a      	add	r2, r1
 80048e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e4:	0cdb      	lsrs	r3, r3, #19
 80048e6:	04db      	lsls	r3, r3, #19
 80048e8:	6113      	str	r3, [r2, #16]
 80048ea:	e092      	b.n	8004a12 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	0151      	lsls	r1, r2, #5
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	440a      	add	r2, r1
 8004902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004906:	0cdb      	lsrs	r3, r3, #19
 8004908:	04db      	lsls	r3, r3, #19
 800490a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	0151      	lsls	r1, r2, #5
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	440a      	add	r2, r1
 8004922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004926:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800492a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800492e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d11a      	bne.n	800496c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	429a      	cmp	r2, r3
 8004940:	d903      	bls.n	800494a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	0151      	lsls	r1, r2, #5
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	440a      	add	r2, r1
 8004960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004968:	6113      	str	r3, [r2, #16]
 800496a:	e01b      	b.n	80049a4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004978:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	6919      	ldr	r1, [r3, #16]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	440b      	add	r3, r1
 8004984:	1e59      	subs	r1, r3, #1
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	fbb1 f3f3 	udiv	r3, r1, r3
 800498e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004990:	4ba2      	ldr	r3, [pc, #648]	; (8004c1c <USB_EPStartXfer+0x3c0>)
 8004992:	400b      	ands	r3, r1
 8004994:	69b9      	ldr	r1, [r7, #24]
 8004996:	0148      	lsls	r0, r1, #5
 8004998:	69f9      	ldr	r1, [r7, #28]
 800499a:	4401      	add	r1, r0
 800499c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049a0:	4313      	orrs	r3, r2
 80049a2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ba:	69b9      	ldr	r1, [r7, #24]
 80049bc:	0148      	lsls	r0, r1, #5
 80049be:	69f9      	ldr	r1, [r7, #28]
 80049c0:	4401      	add	r1, r0
 80049c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049c6:	4313      	orrs	r3, r2
 80049c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	791b      	ldrb	r3, [r3, #4]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d11f      	bne.n	8004a12 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80049f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	0151      	lsls	r1, r2, #5
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	440a      	add	r2, r1
 8004a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a10:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d14b      	bne.n	8004ab0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d009      	beq.n	8004a34 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	791b      	ldrb	r3, [r3, #4]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d128      	bne.n	8004a8e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d110      	bne.n	8004a6e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	0151      	lsls	r1, r2, #5
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	440a      	add	r2, r1
 8004a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	e00f      	b.n	8004a8e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	0151      	lsls	r1, r2, #5
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	440a      	add	r2, r1
 8004a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	0151      	lsls	r1, r2, #5
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	440a      	add	r2, r1
 8004aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	e165      	b.n	8004d7c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	0151      	lsls	r1, r2, #5
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	440a      	add	r2, r1
 8004ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ace:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	791b      	ldrb	r3, [r3, #4]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d015      	beq.n	8004b04 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 814d 	beq.w	8004d7c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	2101      	movs	r1, #1
 8004af4:	fa01 f303 	lsl.w	r3, r1, r3
 8004af8:	69f9      	ldr	r1, [r7, #28]
 8004afa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004afe:	4313      	orrs	r3, r2
 8004b00:	634b      	str	r3, [r1, #52]	; 0x34
 8004b02:	e13b      	b.n	8004d7c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d110      	bne.n	8004b36 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	0151      	lsls	r1, r2, #5
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	440a      	add	r2, r1
 8004b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	e00f      	b.n	8004b56 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	0151      	lsls	r1, r2, #5
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	440a      	add	r2, r1
 8004b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b54:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	68d9      	ldr	r1, [r3, #12]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	781a      	ldrb	r2, [r3, #0]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	b298      	uxth	r0, r3
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	4603      	mov	r3, r0
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f9b8 	bl	8004ee0 <USB_WritePacket>
 8004b70:	e104      	b.n	8004d7c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b8c:	0cdb      	lsrs	r3, r3, #19
 8004b8e:	04db      	lsls	r3, r3, #19
 8004b90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bb4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d131      	bne.n	8004c20 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bea:	69b9      	ldr	r1, [r7, #24]
 8004bec:	0148      	lsls	r0, r1, #5
 8004bee:	69f9      	ldr	r1, [r7, #28]
 8004bf0:	4401      	add	r1, r0
 8004bf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	0151      	lsls	r1, r2, #5
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	440a      	add	r2, r1
 8004c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c18:	6113      	str	r3, [r2, #16]
 8004c1a:	e061      	b.n	8004ce0 <USB_EPStartXfer+0x484>
 8004c1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d123      	bne.n	8004c70 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c3e:	69b9      	ldr	r1, [r7, #24]
 8004c40:	0148      	lsls	r0, r1, #5
 8004c42:	69f9      	ldr	r1, [r7, #28]
 8004c44:	4401      	add	r1, r0
 8004c46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	0151      	lsls	r1, r2, #5
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	440a      	add	r2, r1
 8004c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c6c:	6113      	str	r3, [r2, #16]
 8004c6e:	e037      	b.n	8004ce0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	4413      	add	r3, r2
 8004c7a:	1e5a      	subs	r2, r3, #1
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	8afa      	ldrh	r2, [r7, #22]
 8004c8c:	fb03 f202 	mul.w	r2, r3, r2
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	8afb      	ldrh	r3, [r7, #22]
 8004ca4:	04d9      	lsls	r1, r3, #19
 8004ca6:	4b38      	ldr	r3, [pc, #224]	; (8004d88 <USB_EPStartXfer+0x52c>)
 8004ca8:	400b      	ands	r3, r1
 8004caa:	69b9      	ldr	r1, [r7, #24]
 8004cac:	0148      	lsls	r0, r1, #5
 8004cae:	69f9      	ldr	r1, [r7, #28]
 8004cb0:	4401      	add	r1, r0
 8004cb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd0:	69b9      	ldr	r1, [r7, #24]
 8004cd2:	0148      	lsls	r0, r1, #5
 8004cd4:	69f9      	ldr	r1, [r7, #28]
 8004cd6:	4401      	add	r1, r0
 8004cd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d10d      	bne.n	8004d02 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	68d9      	ldr	r1, [r3, #12]
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfe:	460a      	mov	r2, r1
 8004d00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	791b      	ldrb	r3, [r3, #4]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d128      	bne.n	8004d5c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d110      	bne.n	8004d3c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	0151      	lsls	r1, r2, #5
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	440a      	add	r2, r1
 8004d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e00f      	b.n	8004d5c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3720      	adds	r7, #32
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	1ff80000 	.word	0x1ff80000

08004d8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d14a      	bne.n	8004e40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc2:	f040 8086 	bne.w	8004ed2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004de8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	7812      	ldrb	r2, [r2, #0]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d902      	bls.n	8004e24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	75fb      	strb	r3, [r7, #23]
          break;
 8004e22:	e056      	b.n	8004ed2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e3c:	d0e7      	beq.n	8004e0e <USB_EPStopXfer+0x82>
 8004e3e:	e048      	b.n	8004ed2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e58:	d13b      	bne.n	8004ed2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	7812      	ldrb	r2, [r2, #0]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	7812      	ldrb	r2, [r2, #0]
 8004e92:	0151      	lsls	r1, r2, #5
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	440a      	add	r2, r1
 8004e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f242 7210 	movw	r2, #10000	; 0x2710
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d902      	bls.n	8004eb8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	75fb      	strb	r3, [r7, #23]
          break;
 8004eb6:	e00c      	b.n	8004ed2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed0:	d0e7      	beq.n	8004ea2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b089      	sub	sp, #36	; 0x24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	4611      	mov	r1, r2
 8004eec:	461a      	mov	r2, r3
 8004eee:	460b      	mov	r3, r1
 8004ef0:	71fb      	strb	r3, [r7, #7]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004efe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d123      	bne.n	8004f4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f06:	88bb      	ldrh	r3, [r7, #4]
 8004f08:	3303      	adds	r3, #3
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	e018      	b.n	8004f46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	031a      	lsls	r2, r3, #12
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f20:	461a      	mov	r2, r3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	3301      	adds	r3, #1
 8004f32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	3301      	adds	r3, #1
 8004f38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	3301      	adds	r3, #1
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d3e2      	bcc.n	8004f14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3724      	adds	r7, #36	; 0x24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b08b      	sub	sp, #44	; 0x2c
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	4613      	mov	r3, r2
 8004f68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	089b      	lsrs	r3, r3, #2
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f7a:	88fb      	ldrh	r3, [r7, #6]
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f82:	2300      	movs	r3, #0
 8004f84:	623b      	str	r3, [r7, #32]
 8004f86:	e014      	b.n	8004fb2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	3301      	adds	r3, #1
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	3301      	adds	r3, #1
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	623b      	str	r3, [r7, #32]
 8004fb2:	6a3a      	ldr	r2, [r7, #32]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d3e6      	bcc.n	8004f88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004fba:	8bfb      	ldrh	r3, [r7, #30]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01e      	beq.n	8004ffe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f107 0310 	add.w	r3, r7, #16
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	701a      	strb	r2, [r3, #0]
      i++;
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	3301      	adds	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004ff2:	8bfb      	ldrh	r3, [r7, #30]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ff8:	8bfb      	ldrh	r3, [r7, #30]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1ea      	bne.n	8004fd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005000:	4618      	mov	r0, r3
 8005002:	372c      	adds	r7, #44	; 0x2c
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d12c      	bne.n	8005082 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	db12      	blt.n	8005060 <USB_EPSetStall+0x54>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00f      	beq.n	8005060 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	440a      	add	r2, r1
 8005056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800505e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	440a      	add	r2, r1
 8005076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	e02b      	b.n	80050da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	db12      	blt.n	80050ba <USB_EPSetStall+0xae>
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00f      	beq.n	80050ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	0151      	lsls	r1, r2, #5
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	440a      	add	r2, r1
 80050b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	0151      	lsls	r1, r2, #5
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	440a      	add	r2, r1
 80050d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d128      	bne.n	8005156 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005122:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	791b      	ldrb	r3, [r3, #4]
 8005128:	2b03      	cmp	r3, #3
 800512a:	d003      	beq.n	8005134 <USB_EPClearStall+0x4c>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	791b      	ldrb	r3, [r3, #4]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d138      	bne.n	80051a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	e027      	b.n	80051a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	440a      	add	r2, r1
 800516c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005170:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005174:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	791b      	ldrb	r3, [r3, #4]
 800517a:	2b03      	cmp	r3, #3
 800517c:	d003      	beq.n	8005186 <USB_EPClearStall+0x9e>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	791b      	ldrb	r3, [r3, #4]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d10f      	bne.n	80051a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	440a      	add	r2, r1
 800519c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80051d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80051e8:	68f9      	ldr	r1, [r7, #12]
 80051ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ee:	4313      	orrs	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800521a:	f023 0303 	bic.w	r3, r3, #3
 800521e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800522e:	f023 0302 	bic.w	r3, r3, #2
 8005232:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800525c:	f023 0303 	bic.w	r3, r3, #3
 8005260:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4013      	ands	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800529c:	68fb      	ldr	r3, [r7, #12]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	4013      	ands	r3, r2
 80052cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	0c1b      	lsrs	r3, r3, #16
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	4013      	ands	r3, r2
 8005300:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	b29b      	uxth	r3, r3
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005312:	b480      	push	{r7}
 8005314:	b085      	sub	sp, #20
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	460b      	mov	r3, r1
 800531c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	4013      	ands	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005340:	68bb      	ldr	r3, [r7, #8]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800534e:	b480      	push	{r7}
 8005350:	b087      	sub	sp, #28
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	460b      	mov	r3, r1
 8005358:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005370:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005372:	78fb      	ldrb	r3, [r7, #3]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	fa22 f303 	lsr.w	r3, r2, r3
 800537e:	01db      	lsls	r3, r3, #7
 8005380:	b2db      	uxtb	r3, r3
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4013      	ands	r3, r2
 800539a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800539c:	68bb      	ldr	r3, [r7, #8]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f003 0301 	and.w	r3, r3, #1
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053e4:	f023 0307 	bic.w	r3, r3, #7
 80053e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	460b      	mov	r3, r1
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	333c      	adds	r3, #60	; 0x3c
 8005422:	3304      	adds	r3, #4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4a26      	ldr	r2, [pc, #152]	; (80054c4 <USB_EP0_OutStart+0xb8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d90a      	bls.n	8005446 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800543c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005440:	d101      	bne.n	8005446 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	e037      	b.n	80054b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544c:	461a      	mov	r2, r3
 800544e:	2300      	movs	r3, #0
 8005450:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005474:	f043 0318 	orr.w	r3, r3, #24
 8005478:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005488:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800548c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800548e:	7afb      	ldrb	r3, [r7, #11]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d10f      	bne.n	80054b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549a:	461a      	mov	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80054b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	4f54300a 	.word	0x4f54300a

080054c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3301      	adds	r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80054e0:	d901      	bls.n	80054e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e01b      	b.n	800551e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	daf2      	bge.n	80054d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f043 0201 	orr.w	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3301      	adds	r3, #1
 8005502:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800550a:	d901      	bls.n	8005510 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e006      	b.n	800551e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b01      	cmp	r3, #1
 800551a:	d0f0      	beq.n	80054fe <USB_CoreReset+0x36>

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800552a:	b480      	push	{r7}
 800552c:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800552e:	bf00      	nop
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005544:	2054      	movs	r0, #84	; 0x54
 8005546:	f002 fb03 	bl	8007b50 <USBD_static_malloc>
 800554a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	32b0      	adds	r2, #176	; 0xb0
 800555c:	2100      	movs	r1, #0
 800555e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005562:	2302      	movs	r3, #2
 8005564:	e08b      	b.n	800567e <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	32b0      	adds	r2, #176	; 0xb0
 8005570:	68f9      	ldr	r1, [r7, #12]
 8005572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	32b0      	adds	r2, #176	; 0xb0
 8005580:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	7c1b      	ldrb	r3, [r3, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d11b      	bne.n	80055ca <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005592:	4b3d      	ldr	r3, [pc, #244]	; (8005688 <USBD_CUSTOM_HID_Init+0x150>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	f003 020f 	and.w	r2, r3, #15
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	3326      	adds	r3, #38	; 0x26
 80055a8:	2205      	movs	r2, #5
 80055aa:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80055ac:	4b37      	ldr	r3, [pc, #220]	; (800568c <USBD_CUSTOM_HID_Init+0x154>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f003 020f 	and.w	r2, r3, #15
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80055c4:	2205      	movs	r2, #5
 80055c6:	801a      	strh	r2, [r3, #0]
 80055c8:	e01a      	b.n	8005600 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80055ca:	4b2f      	ldr	r3, [pc, #188]	; (8005688 <USBD_CUSTOM_HID_Init+0x150>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	f003 020f 	and.w	r2, r3, #15
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	3326      	adds	r3, #38	; 0x26
 80055e0:	2205      	movs	r2, #5
 80055e2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80055e4:	4b29      	ldr	r3, [pc, #164]	; (800568c <USBD_CUSTOM_HID_Init+0x154>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f003 020f 	and.w	r2, r3, #15
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80055fc:	2205      	movs	r2, #5
 80055fe:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8005600:	4b21      	ldr	r3, [pc, #132]	; (8005688 <USBD_CUSTOM_HID_Init+0x150>)
 8005602:	7819      	ldrb	r1, [r3, #0]
 8005604:	2302      	movs	r3, #2
 8005606:	2203      	movs	r2, #3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f002 f990 	bl	800792e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800560e:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <USBD_CUSTOM_HID_Init+0x150>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	f003 020f 	and.w	r2, r3, #15
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	3324      	adds	r3, #36	; 0x24
 8005624:	2201      	movs	r2, #1
 8005626:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8005628:	4b18      	ldr	r3, [pc, #96]	; (800568c <USBD_CUSTOM_HID_Init+0x154>)
 800562a:	7819      	ldrb	r1, [r3, #0]
 800562c:	2302      	movs	r3, #2
 800562e:	2203      	movs	r2, #3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f002 f97c 	bl	800792e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8005636:	4b15      	ldr	r3, [pc, #84]	; (800568c <USBD_CUSTOM_HID_Init+0x154>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	f003 020f 	and.w	r2, r3, #15
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800564e:	2201      	movs	r2, #1
 8005650:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	33b0      	adds	r3, #176	; 0xb0
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800566e:	4b07      	ldr	r3, [pc, #28]	; (800568c <USBD_CUSTOM_HID_Init+0x154>)
 8005670:	7819      	ldrb	r1, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	2340      	movs	r3, #64	; 0x40
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f002 fa48 	bl	8007b0c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	200000a6 	.word	0x200000a6
 800568c:	200000a7 	.word	0x200000a7

08005690 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800569c:	4b37      	ldr	r3, [pc, #220]	; (800577c <USBD_CUSTOM_HID_DeInit+0xec>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	4619      	mov	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f002 f969 	bl	800797a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80056a8:	4b34      	ldr	r3, [pc, #208]	; (800577c <USBD_CUSTOM_HID_DeInit+0xec>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	f003 020f 	and.w	r2, r3, #15
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	3324      	adds	r3, #36	; 0x24
 80056be:	2200      	movs	r2, #0
 80056c0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80056c2:	4b2e      	ldr	r3, [pc, #184]	; (800577c <USBD_CUSTOM_HID_DeInit+0xec>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	f003 020f 	and.w	r2, r3, #15
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	3326      	adds	r3, #38	; 0x26
 80056d8:	2200      	movs	r2, #0
 80056da:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80056dc:	4b28      	ldr	r3, [pc, #160]	; (8005780 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f002 f949 	bl	800797a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80056e8:	4b25      	ldr	r3, [pc, #148]	; (8005780 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f003 020f 	and.w	r2, r3, #15
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005700:	2200      	movs	r2, #0
 8005702:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8005704:	4b1e      	ldr	r3, [pc, #120]	; (8005780 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	f003 020f 	and.w	r2, r3, #15
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800571c:	2200      	movs	r2, #0
 800571e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	32b0      	adds	r2, #176	; 0xb0
 800572a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01f      	beq.n	8005772 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	33b0      	adds	r3, #176	; 0xb0
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	32b0      	adds	r2, #176	; 0xb0
 8005750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005754:	4618      	mov	r0, r3
 8005756:	f002 fa09 	bl	8007b6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	32b0      	adds	r2, #176	; 0xb0
 8005764:	2100      	movs	r1, #0
 8005766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	200000a6 	.word	0x200000a6
 8005780:	200000a7 	.word	0x200000a7

08005784 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	32b0      	adds	r2, #176	; 0xb0
 8005798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800579c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e0f8      	b.n	80059aa <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d056      	beq.n	8005872 <USBD_CUSTOM_HID_Setup+0xee>
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	f040 80e8 	bne.w	800599a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	3b02      	subs	r3, #2
 80057d0:	2b09      	cmp	r3, #9
 80057d2:	d846      	bhi.n	8005862 <USBD_CUSTOM_HID_Setup+0xde>
 80057d4:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <USBD_CUSTOM_HID_Setup+0x58>)
 80057d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057da:	bf00      	nop
 80057dc:	08005835 	.word	0x08005835
 80057e0:	08005813 	.word	0x08005813
 80057e4:	08005863 	.word	0x08005863
 80057e8:	08005863 	.word	0x08005863
 80057ec:	08005863 	.word	0x08005863
 80057f0:	08005863 	.word	0x08005863
 80057f4:	08005863 	.word	0x08005863
 80057f8:	08005845 	.word	0x08005845
 80057fc:	08005823 	.word	0x08005823
 8005800:	08005805 	.word	0x08005805
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	885b      	ldrh	r3, [r3, #2]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	461a      	mov	r2, r3
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8005810:	e02e      	b.n	8005870 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	3340      	adds	r3, #64	; 0x40
 8005816:	2201      	movs	r2, #1
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f001 fcce 	bl	80071bc <USBD_CtlSendData>
          break;
 8005820:	e026      	b.n	8005870 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	885b      	ldrh	r3, [r3, #2]
 8005826:	0a1b      	lsrs	r3, r3, #8
 8005828:	b29b      	uxth	r3, r3
 800582a:	b2db      	uxtb	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8005832:	e01d      	b.n	8005870 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3344      	adds	r3, #68	; 0x44
 8005838:	2201      	movs	r2, #1
 800583a:	4619      	mov	r1, r3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f001 fcbd 	bl	80071bc <USBD_CtlSendData>
          break;
 8005842:	e015      	b.n	8005870 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2201      	movs	r2, #1
 8005848:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800584a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	88db      	ldrh	r3, [r3, #6]
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	bf28      	it	cs
 8005854:	2340      	movcs	r3, #64	; 0x40
 8005856:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005858:	461a      	mov	r2, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 fcda 	bl	8007214 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005860:	e006      	b.n	8005870 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 fc38 	bl	80070da <USBD_CtlError>
          ret = USBD_FAIL;
 800586a:	2303      	movs	r3, #3
 800586c:	75fb      	strb	r3, [r7, #23]
          break;
 800586e:	bf00      	nop
      }
      break;
 8005870:	e09a      	b.n	80059a8 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	2b0b      	cmp	r3, #11
 8005878:	f200 8086 	bhi.w	8005988 <USBD_CUSTOM_HID_Setup+0x204>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <USBD_CUSTOM_HID_Setup+0x100>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	080058b5 	.word	0x080058b5
 8005888:	08005997 	.word	0x08005997
 800588c:	08005989 	.word	0x08005989
 8005890:	08005989 	.word	0x08005989
 8005894:	08005989 	.word	0x08005989
 8005898:	08005989 	.word	0x08005989
 800589c:	080058df 	.word	0x080058df
 80058a0:	08005989 	.word	0x08005989
 80058a4:	08005989 	.word	0x08005989
 80058a8:	08005989 	.word	0x08005989
 80058ac:	08005937 	.word	0x08005937
 80058b0:	08005961 	.word	0x08005961
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d107      	bne.n	80058d0 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058c0:	f107 030e 	add.w	r3, r7, #14
 80058c4:	2202      	movs	r2, #2
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f001 fc77 	bl	80071bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058ce:	e063      	b.n	8005998 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f001 fc01 	bl	80070da <USBD_CtlError>
            ret = USBD_FAIL;
 80058d8:	2303      	movs	r3, #3
 80058da:	75fb      	strb	r3, [r7, #23]
          break;
 80058dc:	e05c      	b.n	8005998 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	885b      	ldrh	r3, [r3, #2]
 80058e2:	0a1b      	lsrs	r3, r3, #8
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b22      	cmp	r3, #34	; 0x22
 80058e8:	d110      	bne.n	800590c <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	88db      	ldrh	r3, [r3, #6]
 80058ee:	2b62      	cmp	r3, #98	; 0x62
 80058f0:	bf28      	it	cs
 80058f2:	2362      	movcs	r3, #98	; 0x62
 80058f4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	33b0      	adds	r3, #176	; 0xb0
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	61bb      	str	r3, [r7, #24]
 800590a:	e00d      	b.n	8005928 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	885b      	ldrh	r3, [r3, #2]
 8005910:	0a1b      	lsrs	r3, r3, #8
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b21      	cmp	r3, #33	; 0x21
 8005916:	d107      	bne.n	8005928 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005918:	4b26      	ldr	r3, [pc, #152]	; (80059b4 <USBD_CUSTOM_HID_Setup+0x230>)
 800591a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	88db      	ldrh	r3, [r3, #6]
 8005920:	2b09      	cmp	r3, #9
 8005922:	bf28      	it	cs
 8005924:	2309      	movcs	r3, #9
 8005926:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005928:	8bfb      	ldrh	r3, [r7, #30]
 800592a:	461a      	mov	r2, r3
 800592c:	69b9      	ldr	r1, [r7, #24]
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f001 fc44 	bl	80071bc <USBD_CtlSendData>
          break;
 8005934:	e030      	b.n	8005998 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b03      	cmp	r3, #3
 8005940:	d107      	bne.n	8005952 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	3348      	adds	r3, #72	; 0x48
 8005946:	2201      	movs	r2, #1
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f001 fc36 	bl	80071bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005950:	e022      	b.n	8005998 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 fbc0 	bl	80070da <USBD_CtlError>
            ret = USBD_FAIL;
 800595a:	2303      	movs	r3, #3
 800595c:	75fb      	strb	r3, [r7, #23]
          break;
 800595e:	e01b      	b.n	8005998 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b03      	cmp	r3, #3
 800596a:	d106      	bne.n	800597a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	885b      	ldrh	r3, [r3, #2]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	461a      	mov	r2, r3
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005978:	e00e      	b.n	8005998 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f001 fbac 	bl	80070da <USBD_CtlError>
            ret = USBD_FAIL;
 8005982:	2303      	movs	r3, #3
 8005984:	75fb      	strb	r3, [r7, #23]
          break;
 8005986:	e007      	b.n	8005998 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f001 fba5 	bl	80070da <USBD_CtlError>
          ret = USBD_FAIL;
 8005990:	2303      	movs	r3, #3
 8005992:	75fb      	strb	r3, [r7, #23]
          break;
 8005994:	e000      	b.n	8005998 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8005996:	bf00      	nop
      }
      break;
 8005998:	e006      	b.n	80059a8 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f001 fb9c 	bl	80070da <USBD_CtlError>
      ret = USBD_FAIL;
 80059a2:	2303      	movs	r3, #3
 80059a4:	75fb      	strb	r3, [r7, #23]
      break;
 80059a6:	bf00      	nop
  }
  return (uint8_t)ret;
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3720      	adds	r7, #32
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000090 	.word	0x20000090

080059b8 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	4613      	mov	r3, r2
 80059c4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	32b0      	adds	r2, #176	; 0xb0
 80059d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80059dc:	2303      	movs	r3, #3
 80059de:	e019      	b.n	8005a14 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d112      	bne.n	8005a12 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80059fe:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <USBD_CUSTOM_HID_SendReport+0x64>)
 8005a00:	7819      	ldrb	r1, [r3, #0]
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f002 f85f 	bl	8007aca <USBD_LL_Transmit>
 8005a0c:	e001      	b.n	8005a12 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	200000a6 	.word	0x200000a6

08005a20 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005a28:	2181      	movs	r1, #129	; 0x81
 8005a2a:	4815      	ldr	r0, [pc, #84]	; (8005a80 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005a2c:	f000 fd1d 	bl	800646a <USBD_GetEpDesc>
 8005a30:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005a32:	2101      	movs	r1, #1
 8005a34:	4812      	ldr	r0, [pc, #72]	; (8005a80 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005a36:	f000 fd18 	bl	800646a <USBD_GetEpDesc>
 8005a3a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f042 0202 	orr.w	r2, r2, #2
 8005a4a:	711a      	strb	r2, [r3, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2205      	movs	r2, #5
 8005a54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d009      	beq.n	8005a70 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f042 0202 	orr.w	r2, r2, #2
 8005a64:	711a      	strb	r2, [r3, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2205      	movs	r2, #5
 8005a6e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2229      	movs	r2, #41	; 0x29
 8005a74:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005a76:	4b02      	ldr	r3, [pc, #8]	; (8005a80 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	20000064 	.word	0x20000064

08005a84 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005a8c:	2181      	movs	r1, #129	; 0x81
 8005a8e:	4815      	ldr	r0, [pc, #84]	; (8005ae4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005a90:	f000 fceb 	bl	800646a <USBD_GetEpDesc>
 8005a94:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005a96:	2101      	movs	r1, #1
 8005a98:	4812      	ldr	r0, [pc, #72]	; (8005ae4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005a9a:	f000 fce6 	bl	800646a <USBD_GetEpDesc>
 8005a9e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f042 0202 	orr.w	r2, r2, #2
 8005aae:	711a      	strb	r2, [r3, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2205      	movs	r2, #5
 8005ab8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f042 0202 	orr.w	r2, r2, #2
 8005ac8:	711a      	strb	r2, [r3, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2205      	movs	r2, #5
 8005ad2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2229      	movs	r2, #41	; 0x29
 8005ad8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005ada:	4b02      	ldr	r3, [pc, #8]	; (8005ae4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20000064 	.word	0x20000064

08005ae8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005af0:	2181      	movs	r1, #129	; 0x81
 8005af2:	4815      	ldr	r0, [pc, #84]	; (8005b48 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005af4:	f000 fcb9 	bl	800646a <USBD_GetEpDesc>
 8005af8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005afa:	2101      	movs	r1, #1
 8005afc:	4812      	ldr	r0, [pc, #72]	; (8005b48 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005afe:	f000 fcb4 	bl	800646a <USBD_GetEpDesc>
 8005b02:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d009      	beq.n	8005b1e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f042 0202 	orr.w	r2, r2, #2
 8005b12:	711a      	strb	r2, [r3, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2205      	movs	r2, #5
 8005b1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d009      	beq.n	8005b38 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f042 0202 	orr.w	r2, r2, #2
 8005b2c:	711a      	strb	r2, [r3, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2205      	movs	r2, #5
 8005b36:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2229      	movs	r2, #41	; 0x29
 8005b3c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005b3e:	4b02      	ldr	r3, [pc, #8]	; (8005b48 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000064 	.word	0x20000064

08005b4c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	32b0      	adds	r2, #176	; 0xb0
 8005b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	32b0      	adds	r2, #176	; 0xb0
 8005b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e017      	b.n	8005bcc <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	32b0      	adds	r2, #176	; 0xb0
 8005ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	33b0      	adds	r3, #176	; 0xb0
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	7810      	ldrb	r0, [r2, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	7852      	ldrb	r2, [r2, #1]
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	32b0      	adds	r2, #176	; 0xb0
 8005be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e00f      	b.n	8005c12 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	32b0      	adds	r2, #176	; 0xb0
 8005bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005c02:	4b06      	ldr	r3, [pc, #24]	; (8005c1c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005c04:	7819      	ldrb	r1, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	2340      	movs	r3, #64	; 0x40
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 ff7e 	bl	8007b0c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	200000a7 	.word	0x200000a7

08005c20 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	32b0      	adds	r2, #176	; 0xb0
 8005c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c36:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e016      	b.n	8005c70 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d111      	bne.n	8005c6e <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	33b0      	adds	r3, #176	; 0xb0
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	7810      	ldrb	r0, [r2, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	7852      	ldrb	r2, [r2, #1]
 8005c64:	4611      	mov	r1, r2
 8005c66:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	220a      	movs	r2, #10
 8005c84:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005c86:	4b03      	ldr	r3, [pc, #12]	; (8005c94 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	2000009c 	.word	0x2000009c

08005c98 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e009      	b.n	8005cc0 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	33b0      	adds	r3, #176	; 0xb0
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e01f      	b.n	8005d24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	79fa      	ldrb	r2, [r7, #7]
 8005d16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f001 fda1 	bl	8007860 <USBD_LL_Init>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e025      	b.n	8005d90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	32ae      	adds	r2, #174	; 0xae
 8005d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00f      	beq.n	8005d80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	32ae      	adds	r2, #174	; 0xae
 8005d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	f107 020e 	add.w	r2, r7, #14
 8005d74:	4610      	mov	r0, r2
 8005d76:	4798      	blx	r3
 8005d78:	4602      	mov	r2, r0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f001 fda9 	bl	80078f8 <USBD_LL_Start>
 8005da6:	4603      	mov	r3, r0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005db8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d009      	beq.n	8005df4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	4611      	mov	r1, r2
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	78fa      	ldrb	r2, [r7, #3]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	4798      	blx	r3
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e24:	2303      	movs	r3, #3
 8005e26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 f90e 	bl	8007066 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e58:	461a      	mov	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d01a      	beq.n	8005ea4 <USBD_LL_SetupStage+0x72>
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d822      	bhi.n	8005eb8 <USBD_LL_SetupStage+0x86>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <USBD_LL_SetupStage+0x4a>
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d00a      	beq.n	8005e90 <USBD_LL_SetupStage+0x5e>
 8005e7a:	e01d      	b.n	8005eb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fb65 	bl	8006554 <USBD_StdDevReq>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8e:	e020      	b.n	8005ed2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fbcd 	bl	8006638 <USBD_StdItfReq>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea2:	e016      	b.n	8005ed2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fc2f 	bl	8006710 <USBD_StdEPReq>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb6:	e00c      	b.n	8005ed2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ebe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f001 fd76 	bl	80079b8 <USBD_LL_StallEP>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed0:	bf00      	nop
  }

  return ret;
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005eee:	7afb      	ldrb	r3, [r7, #11]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d16e      	bne.n	8005fd2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005efa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	f040 8098 	bne.w	8006038 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d913      	bls.n	8005f3c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	1ad2      	subs	r2, r2, r3
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	bf28      	it	cs
 8005f2e:	4613      	movcs	r3, r2
 8005f30:	461a      	mov	r2, r3
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f001 f98a 	bl	800724e <USBD_CtlContinueRx>
 8005f3a:	e07d      	b.n	8006038 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f42:	f003 031f 	and.w	r3, r3, #31
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d014      	beq.n	8005f74 <USBD_LL_DataOutStage+0x98>
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d81d      	bhi.n	8005f8a <USBD_LL_DataOutStage+0xae>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <USBD_LL_DataOutStage+0x7c>
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d003      	beq.n	8005f5e <USBD_LL_DataOutStage+0x82>
 8005f56:	e018      	b.n	8005f8a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	75bb      	strb	r3, [r7, #22]
            break;
 8005f5c:	e018      	b.n	8005f90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	4619      	mov	r1, r3
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fa64 	bl	8006436 <USBD_CoreFindIF>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	75bb      	strb	r3, [r7, #22]
            break;
 8005f72:	e00d      	b.n	8005f90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 fa66 	bl	8006450 <USBD_CoreFindEP>
 8005f84:	4603      	mov	r3, r0
 8005f86:	75bb      	strb	r3, [r7, #22]
            break;
 8005f88:	e002      	b.n	8005f90 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	75bb      	strb	r3, [r7, #22]
            break;
 8005f8e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005f90:	7dbb      	ldrb	r3, [r7, #22]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d119      	bne.n	8005fca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d113      	bne.n	8005fca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005fa2:	7dba      	ldrb	r2, [r7, #22]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	32ae      	adds	r2, #174	; 0xae
 8005fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00b      	beq.n	8005fca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005fb2:	7dba      	ldrb	r2, [r7, #22]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005fba:	7dba      	ldrb	r2, [r7, #22]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	32ae      	adds	r2, #174	; 0xae
 8005fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f001 f950 	bl	8007270 <USBD_CtlSendStatus>
 8005fd0:	e032      	b.n	8006038 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005fd2:	7afb      	ldrb	r3, [r7, #11]
 8005fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	4619      	mov	r1, r3
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 fa37 	bl	8006450 <USBD_CoreFindEP>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fe6:	7dbb      	ldrb	r3, [r7, #22]
 8005fe8:	2bff      	cmp	r3, #255	; 0xff
 8005fea:	d025      	beq.n	8006038 <USBD_LL_DataOutStage+0x15c>
 8005fec:	7dbb      	ldrb	r3, [r7, #22]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d122      	bne.n	8006038 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d117      	bne.n	800602e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ffe:	7dba      	ldrb	r2, [r7, #22]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	32ae      	adds	r2, #174	; 0xae
 8006004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00f      	beq.n	800602e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800600e:	7dba      	ldrb	r2, [r7, #22]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006016:	7dba      	ldrb	r2, [r7, #22]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	32ae      	adds	r2, #174	; 0xae
 800601c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	7afa      	ldrb	r2, [r7, #11]
 8006024:	4611      	mov	r1, r2
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	4798      	blx	r3
 800602a:	4603      	mov	r3, r0
 800602c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	e000      	b.n	800603a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	460b      	mov	r3, r1
 800604c:	607a      	str	r2, [r7, #4]
 800604e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006050:	7afb      	ldrb	r3, [r7, #11]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d16f      	bne.n	8006136 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3314      	adds	r3, #20
 800605a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006062:	2b02      	cmp	r3, #2
 8006064:	d15a      	bne.n	800611c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	429a      	cmp	r2, r3
 8006070:	d914      	bls.n	800609c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	1ad2      	subs	r2, r2, r3
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	461a      	mov	r2, r3
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f001 f8b2 	bl	80071f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800608e:	2300      	movs	r3, #0
 8006090:	2200      	movs	r2, #0
 8006092:	2100      	movs	r1, #0
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f001 fd39 	bl	8007b0c <USBD_LL_PrepareReceive>
 800609a:	e03f      	b.n	800611c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d11c      	bne.n	80060e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d316      	bcc.n	80060e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80060be:	429a      	cmp	r2, r3
 80060c0:	d20f      	bcs.n	80060e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060c2:	2200      	movs	r2, #0
 80060c4:	2100      	movs	r1, #0
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f001 f893 	bl	80071f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060d4:	2300      	movs	r3, #0
 80060d6:	2200      	movs	r2, #0
 80060d8:	2100      	movs	r1, #0
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f001 fd16 	bl	8007b0c <USBD_LL_PrepareReceive>
 80060e0:	e01c      	b.n	800611c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d10f      	bne.n	800610e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800610e:	2180      	movs	r1, #128	; 0x80
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f001 fc51 	bl	80079b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f001 f8bd 	bl	8007296 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d03a      	beq.n	800619c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7ff fe42 	bl	8005db0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006134:	e032      	b.n	800619c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006136:	7afb      	ldrb	r3, [r7, #11]
 8006138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800613c:	b2db      	uxtb	r3, r3
 800613e:	4619      	mov	r1, r3
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f985 	bl	8006450 <USBD_CoreFindEP>
 8006146:	4603      	mov	r3, r0
 8006148:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	2bff      	cmp	r3, #255	; 0xff
 800614e:	d025      	beq.n	800619c <USBD_LL_DataInStage+0x15a>
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d122      	bne.n	800619c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b03      	cmp	r3, #3
 8006160:	d11c      	bne.n	800619c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006162:	7dfa      	ldrb	r2, [r7, #23]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	32ae      	adds	r2, #174	; 0xae
 8006168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d014      	beq.n	800619c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006172:	7dfa      	ldrb	r2, [r7, #23]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800617a:	7dfa      	ldrb	r2, [r7, #23]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	32ae      	adds	r2, #174	; 0xae
 8006180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	7afa      	ldrb	r2, [r7, #11]
 8006188:	4611      	mov	r1, r2
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	4798      	blx	r3
 800618e:	4603      	mov	r3, r0
 8006190:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006192:	7dbb      	ldrb	r3, [r7, #22]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006198:	7dbb      	ldrb	r3, [r7, #22]
 800619a:	e000      	b.n	800619e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d014      	beq.n	800620c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00e      	beq.n	800620c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6852      	ldr	r2, [r2, #4]
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	4611      	mov	r1, r2
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006208:	2303      	movs	r3, #3
 800620a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800620c:	2340      	movs	r3, #64	; 0x40
 800620e:	2200      	movs	r2, #0
 8006210:	2100      	movs	r1, #0
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 fb8b 	bl	800792e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2240      	movs	r2, #64	; 0x40
 8006224:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006228:	2340      	movs	r3, #64	; 0x40
 800622a:	2200      	movs	r2, #0
 800622c:	2180      	movs	r1, #128	; 0x80
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f001 fb7d 	bl	800792e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2240      	movs	r2, #64	; 0x40
 800623e:	621a      	str	r2, [r3, #32]

  return ret;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	78fa      	ldrb	r2, [r7, #3]
 800625a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b04      	cmp	r3, #4
 800627c:	d006      	beq.n	800628c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006284:	b2da      	uxtb	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2204      	movs	r2, #4
 8006290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d106      	bne.n	80062c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d110      	bne.n	8006308 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	32ae      	adds	r2, #174	; 0xae
 8006328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006330:	2303      	movs	r3, #3
 8006332:	e01c      	b.n	800636e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b03      	cmp	r3, #3
 800633e:	d115      	bne.n	800636c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	32ae      	adds	r2, #174	; 0xae
 800634a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	32ae      	adds	r2, #174	; 0xae
 800635e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	78fa      	ldrb	r2, [r7, #3]
 8006366:	4611      	mov	r1, r2
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	32ae      	adds	r2, #174	; 0xae
 800638c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006394:	2303      	movs	r3, #3
 8006396:	e01c      	b.n	80063d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b03      	cmp	r3, #3
 80063a2:	d115      	bne.n	80063d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	32ae      	adds	r2, #174	; 0xae
 80063ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	32ae      	adds	r2, #174	; 0xae
 80063c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	78fa      	ldrb	r2, [r7, #3]
 80063ca:	4611      	mov	r1, r2
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00e      	beq.n	800642c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6852      	ldr	r2, [r2, #4]
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	4611      	mov	r1, r2
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4798      	blx	r3
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006428:	2303      	movs	r3, #3
 800642a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	460b      	mov	r3, r1
 8006440:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006442:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800645c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800645e:	4618      	mov	r0, r3
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b086      	sub	sp, #24
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	885b      	ldrh	r3, [r3, #2]
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	b29b      	uxth	r3, r3
 800648e:	429a      	cmp	r2, r3
 8006490:	d920      	bls.n	80064d4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800649a:	e013      	b.n	80064c4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800649c:	f107 030a 	add.w	r3, r7, #10
 80064a0:	4619      	mov	r1, r3
 80064a2:	6978      	ldr	r0, [r7, #20]
 80064a4:	f000 f81b 	bl	80064de <USBD_GetNextDesc>
 80064a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	2b05      	cmp	r3, #5
 80064b0:	d108      	bne.n	80064c4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	789b      	ldrb	r3, [r3, #2]
 80064ba:	78fa      	ldrb	r2, [r7, #3]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d008      	beq.n	80064d2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	885b      	ldrh	r3, [r3, #2]
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	897b      	ldrh	r3, [r7, #10]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d8e5      	bhi.n	800649c <USBD_GetEpDesc+0x32>
 80064d0:	e000      	b.n	80064d4 <USBD_GetEpDesc+0x6a>
          break;
 80064d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80064d4:	693b      	ldr	r3, [r7, #16]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80064de:	b480      	push	{r7}
 80064e0:	b085      	sub	sp, #20
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	881a      	ldrh	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	4413      	add	r3, r2
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4413      	add	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800650a:	68fb      	ldr	r3, [r7, #12]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	3301      	adds	r3, #1
 800652e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006536:	8a3b      	ldrh	r3, [r7, #16]
 8006538:	021b      	lsls	r3, r3, #8
 800653a:	b21a      	sxth	r2, r3
 800653c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006540:	4313      	orrs	r3, r2
 8006542:	b21b      	sxth	r3, r3
 8006544:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006546:	89fb      	ldrh	r3, [r7, #14]
}
 8006548:	4618      	mov	r0, r3
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800656a:	2b40      	cmp	r3, #64	; 0x40
 800656c:	d005      	beq.n	800657a <USBD_StdDevReq+0x26>
 800656e:	2b40      	cmp	r3, #64	; 0x40
 8006570:	d857      	bhi.n	8006622 <USBD_StdDevReq+0xce>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00f      	beq.n	8006596 <USBD_StdDevReq+0x42>
 8006576:	2b20      	cmp	r3, #32
 8006578:	d153      	bne.n	8006622 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	32ae      	adds	r2, #174	; 0xae
 8006584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	4798      	blx	r3
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]
      break;
 8006594:	e04a      	b.n	800662c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	785b      	ldrb	r3, [r3, #1]
 800659a:	2b09      	cmp	r3, #9
 800659c:	d83b      	bhi.n	8006616 <USBD_StdDevReq+0xc2>
 800659e:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <USBD_StdDevReq+0x50>)
 80065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a4:	080065f9 	.word	0x080065f9
 80065a8:	0800660d 	.word	0x0800660d
 80065ac:	08006617 	.word	0x08006617
 80065b0:	08006603 	.word	0x08006603
 80065b4:	08006617 	.word	0x08006617
 80065b8:	080065d7 	.word	0x080065d7
 80065bc:	080065cd 	.word	0x080065cd
 80065c0:	08006617 	.word	0x08006617
 80065c4:	080065ef 	.word	0x080065ef
 80065c8:	080065e1 	.word	0x080065e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fa3c 	bl	8006a4c <USBD_GetDescriptor>
          break;
 80065d4:	e024      	b.n	8006620 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fba1 	bl	8006d20 <USBD_SetAddress>
          break;
 80065de:	e01f      	b.n	8006620 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fbe0 	bl	8006da8 <USBD_SetConfig>
 80065e8:	4603      	mov	r3, r0
 80065ea:	73fb      	strb	r3, [r7, #15]
          break;
 80065ec:	e018      	b.n	8006620 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fc83 	bl	8006efc <USBD_GetConfig>
          break;
 80065f6:	e013      	b.n	8006620 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fcb4 	bl	8006f68 <USBD_GetStatus>
          break;
 8006600:	e00e      	b.n	8006620 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fce3 	bl	8006fd0 <USBD_SetFeature>
          break;
 800660a:	e009      	b.n	8006620 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fd07 	bl	8007022 <USBD_ClrFeature>
          break;
 8006614:	e004      	b.n	8006620 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fd5e 	bl	80070da <USBD_CtlError>
          break;
 800661e:	bf00      	nop
      }
      break;
 8006620:	e004      	b.n	800662c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fd58 	bl	80070da <USBD_CtlError>
      break;
 800662a:	bf00      	nop
  }

  return ret;
 800662c:	7bfb      	ldrb	r3, [r7, #15]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop

08006638 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800664e:	2b40      	cmp	r3, #64	; 0x40
 8006650:	d005      	beq.n	800665e <USBD_StdItfReq+0x26>
 8006652:	2b40      	cmp	r3, #64	; 0x40
 8006654:	d852      	bhi.n	80066fc <USBD_StdItfReq+0xc4>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <USBD_StdItfReq+0x26>
 800665a:	2b20      	cmp	r3, #32
 800665c:	d14e      	bne.n	80066fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006664:	b2db      	uxtb	r3, r3
 8006666:	3b01      	subs	r3, #1
 8006668:	2b02      	cmp	r3, #2
 800666a:	d840      	bhi.n	80066ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	889b      	ldrh	r3, [r3, #4]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b01      	cmp	r3, #1
 8006674:	d836      	bhi.n	80066e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	889b      	ldrh	r3, [r3, #4]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff fed9 	bl	8006436 <USBD_CoreFindIF>
 8006684:	4603      	mov	r3, r0
 8006686:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	2bff      	cmp	r3, #255	; 0xff
 800668c:	d01d      	beq.n	80066ca <USBD_StdItfReq+0x92>
 800668e:	7bbb      	ldrb	r3, [r7, #14]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d11a      	bne.n	80066ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006694:	7bba      	ldrb	r2, [r7, #14]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	32ae      	adds	r2, #174	; 0xae
 800669a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00f      	beq.n	80066c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80066a4:	7bba      	ldrb	r2, [r7, #14]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066ac:	7bba      	ldrb	r2, [r7, #14]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	32ae      	adds	r2, #174	; 0xae
 80066b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
 80066be:	4603      	mov	r3, r0
 80066c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80066c2:	e004      	b.n	80066ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80066c4:	2303      	movs	r3, #3
 80066c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80066c8:	e001      	b.n	80066ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80066ca:	2303      	movs	r3, #3
 80066cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	88db      	ldrh	r3, [r3, #6]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d110      	bne.n	80066f8 <USBD_StdItfReq+0xc0>
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10d      	bne.n	80066f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fdc7 	bl	8007270 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80066e2:	e009      	b.n	80066f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fcf7 	bl	80070da <USBD_CtlError>
          break;
 80066ec:	e004      	b.n	80066f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fcf2 	bl	80070da <USBD_CtlError>
          break;
 80066f6:	e000      	b.n	80066fa <USBD_StdItfReq+0xc2>
          break;
 80066f8:	bf00      	nop
      }
      break;
 80066fa:	e004      	b.n	8006706 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fceb 	bl	80070da <USBD_CtlError>
      break;
 8006704:	bf00      	nop
  }

  return ret;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	889b      	ldrh	r3, [r3, #4]
 8006722:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	d007      	beq.n	8006740 <USBD_StdEPReq+0x30>
 8006730:	2b40      	cmp	r3, #64	; 0x40
 8006732:	f200 817f 	bhi.w	8006a34 <USBD_StdEPReq+0x324>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d02a      	beq.n	8006790 <USBD_StdEPReq+0x80>
 800673a:	2b20      	cmp	r3, #32
 800673c:	f040 817a 	bne.w	8006a34 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff fe83 	bl	8006450 <USBD_CoreFindEP>
 800674a:	4603      	mov	r3, r0
 800674c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800674e:	7b7b      	ldrb	r3, [r7, #13]
 8006750:	2bff      	cmp	r3, #255	; 0xff
 8006752:	f000 8174 	beq.w	8006a3e <USBD_StdEPReq+0x32e>
 8006756:	7b7b      	ldrb	r3, [r7, #13]
 8006758:	2b00      	cmp	r3, #0
 800675a:	f040 8170 	bne.w	8006a3e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800675e:	7b7a      	ldrb	r2, [r7, #13]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006766:	7b7a      	ldrb	r2, [r7, #13]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	32ae      	adds	r2, #174	; 0xae
 800676c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 8163 	beq.w	8006a3e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006778:	7b7a      	ldrb	r2, [r7, #13]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	32ae      	adds	r2, #174	; 0xae
 800677e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	4798      	blx	r3
 800678a:	4603      	mov	r3, r0
 800678c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800678e:	e156      	b.n	8006a3e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	2b03      	cmp	r3, #3
 8006796:	d008      	beq.n	80067aa <USBD_StdEPReq+0x9a>
 8006798:	2b03      	cmp	r3, #3
 800679a:	f300 8145 	bgt.w	8006a28 <USBD_StdEPReq+0x318>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 809b 	beq.w	80068da <USBD_StdEPReq+0x1ca>
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d03c      	beq.n	8006822 <USBD_StdEPReq+0x112>
 80067a8:	e13e      	b.n	8006a28 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d002      	beq.n	80067bc <USBD_StdEPReq+0xac>
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d016      	beq.n	80067e8 <USBD_StdEPReq+0xd8>
 80067ba:	e02c      	b.n	8006816 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00d      	beq.n	80067de <USBD_StdEPReq+0xce>
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	2b80      	cmp	r3, #128	; 0x80
 80067c6:	d00a      	beq.n	80067de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 f8f3 	bl	80079b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067d2:	2180      	movs	r1, #128	; 0x80
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 f8ef 	bl	80079b8 <USBD_LL_StallEP>
 80067da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067dc:	e020      	b.n	8006820 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fc7a 	bl	80070da <USBD_CtlError>
              break;
 80067e6:	e01b      	b.n	8006820 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	885b      	ldrh	r3, [r3, #2]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10e      	bne.n	800680e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80067f0:	7bbb      	ldrb	r3, [r7, #14]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00b      	beq.n	800680e <USBD_StdEPReq+0xfe>
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	2b80      	cmp	r3, #128	; 0x80
 80067fa:	d008      	beq.n	800680e <USBD_StdEPReq+0xfe>
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	88db      	ldrh	r3, [r3, #6]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d104      	bne.n	800680e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 f8d5 	bl	80079b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fd2e 	bl	8007270 <USBD_CtlSendStatus>

              break;
 8006814:	e004      	b.n	8006820 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fc5e 	bl	80070da <USBD_CtlError>
              break;
 800681e:	bf00      	nop
          }
          break;
 8006820:	e107      	b.n	8006a32 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d002      	beq.n	8006834 <USBD_StdEPReq+0x124>
 800682e:	2b03      	cmp	r3, #3
 8006830:	d016      	beq.n	8006860 <USBD_StdEPReq+0x150>
 8006832:	e04b      	b.n	80068cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00d      	beq.n	8006856 <USBD_StdEPReq+0x146>
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	2b80      	cmp	r3, #128	; 0x80
 800683e:	d00a      	beq.n	8006856 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 f8b7 	bl	80079b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800684a:	2180      	movs	r1, #128	; 0x80
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f001 f8b3 	bl	80079b8 <USBD_LL_StallEP>
 8006852:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006854:	e040      	b.n	80068d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fc3e 	bl	80070da <USBD_CtlError>
              break;
 800685e:	e03b      	b.n	80068d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	885b      	ldrh	r3, [r3, #2]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d136      	bne.n	80068d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006868:	7bbb      	ldrb	r3, [r7, #14]
 800686a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800686e:	2b00      	cmp	r3, #0
 8006870:	d004      	beq.n	800687c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006872:	7bbb      	ldrb	r3, [r7, #14]
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 f8bd 	bl	80079f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fcf7 	bl	8007270 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff fde2 	bl	8006450 <USBD_CoreFindEP>
 800688c:	4603      	mov	r3, r0
 800688e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006890:	7b7b      	ldrb	r3, [r7, #13]
 8006892:	2bff      	cmp	r3, #255	; 0xff
 8006894:	d01f      	beq.n	80068d6 <USBD_StdEPReq+0x1c6>
 8006896:	7b7b      	ldrb	r3, [r7, #13]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d11c      	bne.n	80068d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800689c:	7b7a      	ldrb	r2, [r7, #13]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80068a4:	7b7a      	ldrb	r2, [r7, #13]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	32ae      	adds	r2, #174	; 0xae
 80068aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d010      	beq.n	80068d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80068b4:	7b7a      	ldrb	r2, [r7, #13]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	32ae      	adds	r2, #174	; 0xae
 80068ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80068ca:	e004      	b.n	80068d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fc03 	bl	80070da <USBD_CtlError>
              break;
 80068d4:	e000      	b.n	80068d8 <USBD_StdEPReq+0x1c8>
              break;
 80068d6:	bf00      	nop
          }
          break;
 80068d8:	e0ab      	b.n	8006a32 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d002      	beq.n	80068ec <USBD_StdEPReq+0x1dc>
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d032      	beq.n	8006950 <USBD_StdEPReq+0x240>
 80068ea:	e097      	b.n	8006a1c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068ec:	7bbb      	ldrb	r3, [r7, #14]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d007      	beq.n	8006902 <USBD_StdEPReq+0x1f2>
 80068f2:	7bbb      	ldrb	r3, [r7, #14]
 80068f4:	2b80      	cmp	r3, #128	; 0x80
 80068f6:	d004      	beq.n	8006902 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fbed 	bl	80070da <USBD_CtlError>
                break;
 8006900:	e091      	b.n	8006a26 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006902:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006906:	2b00      	cmp	r3, #0
 8006908:	da0b      	bge.n	8006922 <USBD_StdEPReq+0x212>
 800690a:	7bbb      	ldrb	r3, [r7, #14]
 800690c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	3310      	adds	r3, #16
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	4413      	add	r3, r2
 800691e:	3304      	adds	r3, #4
 8006920:	e00b      	b.n	800693a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006922:	7bbb      	ldrb	r3, [r7, #14]
 8006924:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	4413      	add	r3, r2
 8006938:	3304      	adds	r3, #4
 800693a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2202      	movs	r2, #2
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fc37 	bl	80071bc <USBD_CtlSendData>
              break;
 800694e:	e06a      	b.n	8006a26 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006954:	2b00      	cmp	r3, #0
 8006956:	da11      	bge.n	800697c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	f003 020f 	and.w	r2, r3, #15
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	3324      	adds	r3, #36	; 0x24
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d117      	bne.n	80069a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fbb0 	bl	80070da <USBD_CtlError>
                  break;
 800697a:	e054      	b.n	8006a26 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800697c:	7bbb      	ldrb	r3, [r7, #14]
 800697e:	f003 020f 	and.w	r2, r3, #15
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	4613      	mov	r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	440b      	add	r3, r1
 800698e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d104      	bne.n	80069a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fb9d 	bl	80070da <USBD_CtlError>
                  break;
 80069a0:	e041      	b.n	8006a26 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	da0b      	bge.n	80069c2 <USBD_StdEPReq+0x2b2>
 80069aa:	7bbb      	ldrb	r3, [r7, #14]
 80069ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069b0:	4613      	mov	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	3310      	adds	r3, #16
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	4413      	add	r3, r2
 80069be:	3304      	adds	r3, #4
 80069c0:	e00b      	b.n	80069da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069c2:	7bbb      	ldrb	r3, [r7, #14]
 80069c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069c8:	4613      	mov	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	4413      	add	r3, r2
 80069d8:	3304      	adds	r3, #4
 80069da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <USBD_StdEPReq+0x2d8>
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	2b80      	cmp	r3, #128	; 0x80
 80069e6:	d103      	bne.n	80069f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	e00e      	b.n	8006a0e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 f81d 	bl	8007a34 <USBD_LL_IsStallEP>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2201      	movs	r2, #1
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	e002      	b.n	8006a0e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2202      	movs	r2, #2
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fbd1 	bl	80071bc <USBD_CtlSendData>
              break;
 8006a1a:	e004      	b.n	8006a26 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fb5b 	bl	80070da <USBD_CtlError>
              break;
 8006a24:	bf00      	nop
          }
          break;
 8006a26:	e004      	b.n	8006a32 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fb55 	bl	80070da <USBD_CtlError>
          break;
 8006a30:	bf00      	nop
      }
      break;
 8006a32:	e005      	b.n	8006a40 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fb4f 	bl	80070da <USBD_CtlError>
      break;
 8006a3c:	e000      	b.n	8006a40 <USBD_StdEPReq+0x330>
      break;
 8006a3e:	bf00      	nop
  }

  return ret;
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	885b      	ldrh	r3, [r3, #2]
 8006a66:	0a1b      	lsrs	r3, r3, #8
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	2b06      	cmp	r3, #6
 8006a6e:	f200 8128 	bhi.w	8006cc2 <USBD_GetDescriptor+0x276>
 8006a72:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <USBD_GetDescriptor+0x2c>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006a95 	.word	0x08006a95
 8006a7c:	08006aad 	.word	0x08006aad
 8006a80:	08006aed 	.word	0x08006aed
 8006a84:	08006cc3 	.word	0x08006cc3
 8006a88:	08006cc3 	.word	0x08006cc3
 8006a8c:	08006c63 	.word	0x08006c63
 8006a90:	08006c8f 	.word	0x08006c8f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	7c12      	ldrb	r2, [r2, #16]
 8006aa0:	f107 0108 	add.w	r1, r7, #8
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4798      	blx	r3
 8006aa8:	60f8      	str	r0, [r7, #12]
      break;
 8006aaa:	e112      	b.n	8006cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	7c1b      	ldrb	r3, [r3, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10d      	bne.n	8006ad0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	f107 0208 	add.w	r2, r7, #8
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4798      	blx	r3
 8006ac4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	2202      	movs	r2, #2
 8006acc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ace:	e100      	b.n	8006cd2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	f107 0208 	add.w	r2, r7, #8
 8006adc:	4610      	mov	r0, r2
 8006ade:	4798      	blx	r3
 8006ae0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	701a      	strb	r2, [r3, #0]
      break;
 8006aea:	e0f2      	b.n	8006cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	885b      	ldrh	r3, [r3, #2]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b05      	cmp	r3, #5
 8006af4:	f200 80ac 	bhi.w	8006c50 <USBD_GetDescriptor+0x204>
 8006af8:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <USBD_GetDescriptor+0xb4>)
 8006afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006b19 	.word	0x08006b19
 8006b04:	08006b4d 	.word	0x08006b4d
 8006b08:	08006b81 	.word	0x08006b81
 8006b0c:	08006bb5 	.word	0x08006bb5
 8006b10:	08006be9 	.word	0x08006be9
 8006b14:	08006c1d 	.word	0x08006c1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	7c12      	ldrb	r2, [r2, #16]
 8006b30:	f107 0108 	add.w	r1, r7, #8
 8006b34:	4610      	mov	r0, r2
 8006b36:	4798      	blx	r3
 8006b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b3a:	e091      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 facb 	bl	80070da <USBD_CtlError>
            err++;
 8006b44:	7afb      	ldrb	r3, [r7, #11]
 8006b46:	3301      	adds	r3, #1
 8006b48:	72fb      	strb	r3, [r7, #11]
          break;
 8006b4a:	e089      	b.n	8006c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00b      	beq.n	8006b70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	7c12      	ldrb	r2, [r2, #16]
 8006b64:	f107 0108 	add.w	r1, r7, #8
 8006b68:	4610      	mov	r0, r2
 8006b6a:	4798      	blx	r3
 8006b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b6e:	e077      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fab1 	bl	80070da <USBD_CtlError>
            err++;
 8006b78:	7afb      	ldrb	r3, [r7, #11]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b7e:	e06f      	b.n	8006c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00b      	beq.n	8006ba4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	7c12      	ldrb	r2, [r2, #16]
 8006b98:	f107 0108 	add.w	r1, r7, #8
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	4798      	blx	r3
 8006ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ba2:	e05d      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa97 	bl	80070da <USBD_CtlError>
            err++;
 8006bac:	7afb      	ldrb	r3, [r7, #11]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8006bb2:	e055      	b.n	8006c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	7c12      	ldrb	r2, [r2, #16]
 8006bcc:	f107 0108 	add.w	r1, r7, #8
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	4798      	blx	r3
 8006bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bd6:	e043      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fa7d 	bl	80070da <USBD_CtlError>
            err++;
 8006be0:	7afb      	ldrb	r3, [r7, #11]
 8006be2:	3301      	adds	r3, #1
 8006be4:	72fb      	strb	r3, [r7, #11]
          break;
 8006be6:	e03b      	b.n	8006c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	7c12      	ldrb	r2, [r2, #16]
 8006c00:	f107 0108 	add.w	r1, r7, #8
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c0a:	e029      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fa63 	bl	80070da <USBD_CtlError>
            err++;
 8006c14:	7afb      	ldrb	r3, [r7, #11]
 8006c16:	3301      	adds	r3, #1
 8006c18:	72fb      	strb	r3, [r7, #11]
          break;
 8006c1a:	e021      	b.n	8006c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	7c12      	ldrb	r2, [r2, #16]
 8006c34:	f107 0108 	add.w	r1, r7, #8
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4798      	blx	r3
 8006c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c3e:	e00f      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fa49 	bl	80070da <USBD_CtlError>
            err++;
 8006c48:	7afb      	ldrb	r3, [r7, #11]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c4e:	e007      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa41 	bl	80070da <USBD_CtlError>
          err++;
 8006c58:	7afb      	ldrb	r3, [r7, #11]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006c5e:	bf00      	nop
      }
      break;
 8006c60:	e037      	b.n	8006cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7c1b      	ldrb	r3, [r3, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c72:	f107 0208 	add.w	r2, r7, #8
 8006c76:	4610      	mov	r0, r2
 8006c78:	4798      	blx	r3
 8006c7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c7c:	e029      	b.n	8006cd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fa2a 	bl	80070da <USBD_CtlError>
        err++;
 8006c86:	7afb      	ldrb	r3, [r7, #11]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c8c:	e021      	b.n	8006cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	7c1b      	ldrb	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10d      	bne.n	8006cb2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	f107 0208 	add.w	r2, r7, #8
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4798      	blx	r3
 8006ca6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	2207      	movs	r2, #7
 8006cae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cb0:	e00f      	b.n	8006cd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fa10 	bl	80070da <USBD_CtlError>
        err++;
 8006cba:	7afb      	ldrb	r3, [r7, #11]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	72fb      	strb	r3, [r7, #11]
      break;
 8006cc0:	e007      	b.n	8006cd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fa08 	bl	80070da <USBD_CtlError>
      err++;
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	72fb      	strb	r3, [r7, #11]
      break;
 8006cd0:	bf00      	nop
  }

  if (err != 0U)
 8006cd2:	7afb      	ldrb	r3, [r7, #11]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d11e      	bne.n	8006d16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	88db      	ldrh	r3, [r3, #6]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d016      	beq.n	8006d0e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ce0:	893b      	ldrh	r3, [r7, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00e      	beq.n	8006d04 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	88da      	ldrh	r2, [r3, #6]
 8006cea:	893b      	ldrh	r3, [r7, #8]
 8006cec:	4293      	cmp	r3, r2
 8006cee:	bf28      	it	cs
 8006cf0:	4613      	movcs	r3, r2
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006cf6:	893b      	ldrh	r3, [r7, #8]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	68f9      	ldr	r1, [r7, #12]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fa5d 	bl	80071bc <USBD_CtlSendData>
 8006d02:	e009      	b.n	8006d18 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f9e7 	bl	80070da <USBD_CtlError>
 8006d0c:	e004      	b.n	8006d18 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 faae 	bl	8007270 <USBD_CtlSendStatus>
 8006d14:	e000      	b.n	8006d18 <USBD_GetDescriptor+0x2cc>
    return;
 8006d16:	bf00      	nop
  }
}
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop

08006d20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	889b      	ldrh	r3, [r3, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d131      	bne.n	8006d96 <USBD_SetAddress+0x76>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	88db      	ldrh	r3, [r3, #6]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d12d      	bne.n	8006d96 <USBD_SetAddress+0x76>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	885b      	ldrh	r3, [r3, #2]
 8006d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d40:	d829      	bhi.n	8006d96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	885b      	ldrh	r3, [r3, #2]
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d104      	bne.n	8006d64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f9bc 	bl	80070da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d62:	e01d      	b.n	8006da0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	7bfa      	ldrb	r2, [r7, #15]
 8006d68:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fe8b 	bl	8007a8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fa7a 	bl	8007270 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d004      	beq.n	8006d8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2202      	movs	r2, #2
 8006d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d8a:	e009      	b.n	8006da0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d94:	e004      	b.n	8006da0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f99e 	bl	80070da <USBD_CtlError>
  }
}
 8006d9e:	bf00      	nop
 8006da0:	bf00      	nop
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	885b      	ldrh	r3, [r3, #2]
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	4b4e      	ldr	r3, [pc, #312]	; (8006ef8 <USBD_SetConfig+0x150>)
 8006dbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006dc0:	4b4d      	ldr	r3, [pc, #308]	; (8006ef8 <USBD_SetConfig+0x150>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d905      	bls.n	8006dd4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f985 	bl	80070da <USBD_CtlError>
    return USBD_FAIL;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e08c      	b.n	8006eee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d002      	beq.n	8006de6 <USBD_SetConfig+0x3e>
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d029      	beq.n	8006e38 <USBD_SetConfig+0x90>
 8006de4:	e075      	b.n	8006ed2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006de6:	4b44      	ldr	r3, [pc, #272]	; (8006ef8 <USBD_SetConfig+0x150>)
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d020      	beq.n	8006e30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006dee:	4b42      	ldr	r3, [pc, #264]	; (8006ef8 <USBD_SetConfig+0x150>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006df8:	4b3f      	ldr	r3, [pc, #252]	; (8006ef8 <USBD_SetConfig+0x150>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fe ffe1 	bl	8005dc6 <USBD_SetClassConfig>
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d008      	beq.n	8006e20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f962 	bl	80070da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e1e:	e065      	b.n	8006eec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fa25 	bl	8007270 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2203      	movs	r2, #3
 8006e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e2e:	e05d      	b.n	8006eec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fa1d 	bl	8007270 <USBD_CtlSendStatus>
      break;
 8006e36:	e059      	b.n	8006eec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006e38:	4b2f      	ldr	r3, [pc, #188]	; (8006ef8 <USBD_SetConfig+0x150>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d112      	bne.n	8006e66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006e48:	4b2b      	ldr	r3, [pc, #172]	; (8006ef8 <USBD_SetConfig+0x150>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e52:	4b29      	ldr	r3, [pc, #164]	; (8006ef8 <USBD_SetConfig+0x150>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7fe ffd0 	bl	8005dfe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa06 	bl	8007270 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e64:	e042      	b.n	8006eec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006e66:	4b24      	ldr	r3, [pc, #144]	; (8006ef8 <USBD_SetConfig+0x150>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d02a      	beq.n	8006eca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7fe ffbe 	bl	8005dfe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e82:	4b1d      	ldr	r3, [pc, #116]	; (8006ef8 <USBD_SetConfig+0x150>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e8c:	4b1a      	ldr	r3, [pc, #104]	; (8006ef8 <USBD_SetConfig+0x150>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fe ff97 	bl	8005dc6 <USBD_SetClassConfig>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00f      	beq.n	8006ec2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f918 	bl	80070da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fe ffa3 	bl	8005dfe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ec0:	e014      	b.n	8006eec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f9d4 	bl	8007270 <USBD_CtlSendStatus>
      break;
 8006ec8:	e010      	b.n	8006eec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f9d0 	bl	8007270 <USBD_CtlSendStatus>
      break;
 8006ed0:	e00c      	b.n	8006eec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f900 	bl	80070da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006eda:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <USBD_SetConfig+0x150>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7fe ff8c 	bl	8005dfe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8006eea:	bf00      	nop
  }

  return ret;
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000344 	.word	0x20000344

08006efc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	88db      	ldrh	r3, [r3, #6]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d004      	beq.n	8006f18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f8e2 	bl	80070da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f16:	e023      	b.n	8006f60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	dc02      	bgt.n	8006f2a <USBD_GetConfig+0x2e>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	dc03      	bgt.n	8006f30 <USBD_GetConfig+0x34>
 8006f28:	e015      	b.n	8006f56 <USBD_GetConfig+0x5a>
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d00b      	beq.n	8006f46 <USBD_GetConfig+0x4a>
 8006f2e:	e012      	b.n	8006f56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3308      	adds	r3, #8
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f93c 	bl	80071bc <USBD_CtlSendData>
        break;
 8006f44:	e00c      	b.n	8006f60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f934 	bl	80071bc <USBD_CtlSendData>
        break;
 8006f54:	e004      	b.n	8006f60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f8be 	bl	80070da <USBD_CtlError>
        break;
 8006f5e:	bf00      	nop
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d81e      	bhi.n	8006fbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	88db      	ldrh	r3, [r3, #6]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d004      	beq.n	8006f92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f8a5 	bl	80070da <USBD_CtlError>
        break;
 8006f90:	e01a      	b.n	8006fc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d005      	beq.n	8006fae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f043 0202 	orr.w	r2, r3, #2
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f900 	bl	80071bc <USBD_CtlSendData>
      break;
 8006fbc:	e004      	b.n	8006fc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f88a 	bl	80070da <USBD_CtlError>
      break;
 8006fc6:	bf00      	nop
  }
}
 8006fc8:	bf00      	nop
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	885b      	ldrh	r3, [r3, #2]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d107      	bne.n	8006ff2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f940 	bl	8007270 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006ff0:	e013      	b.n	800701a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	885b      	ldrh	r3, [r3, #2]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d10b      	bne.n	8007012 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	889b      	ldrh	r3, [r3, #4]
 8006ffe:	0a1b      	lsrs	r3, r3, #8
 8007000:	b29b      	uxth	r3, r3
 8007002:	b2da      	uxtb	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f930 	bl	8007270 <USBD_CtlSendStatus>
}
 8007010:	e003      	b.n	800701a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f860 	bl	80070da <USBD_CtlError>
}
 800701a:	bf00      	nop
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007032:	b2db      	uxtb	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	2b02      	cmp	r3, #2
 8007038:	d80b      	bhi.n	8007052 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	885b      	ldrh	r3, [r3, #2]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d10c      	bne.n	800705c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f910 	bl	8007270 <USBD_CtlSendStatus>
      }
      break;
 8007050:	e004      	b.n	800705c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f840 	bl	80070da <USBD_CtlError>
      break;
 800705a:	e000      	b.n	800705e <USBD_ClrFeature+0x3c>
      break;
 800705c:	bf00      	nop
  }
}
 800705e:	bf00      	nop
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	781a      	ldrb	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3301      	adds	r3, #1
 8007080:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	781a      	ldrb	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3301      	adds	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f7ff fa41 	bl	8006518 <SWAPBYTE>
 8007096:	4603      	mov	r3, r0
 8007098:	461a      	mov	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3301      	adds	r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3301      	adds	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f7ff fa34 	bl	8006518 <SWAPBYTE>
 80070b0:	4603      	mov	r3, r0
 80070b2:	461a      	mov	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3301      	adds	r3, #1
 80070bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3301      	adds	r3, #1
 80070c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f7ff fa27 	bl	8006518 <SWAPBYTE>
 80070ca:	4603      	mov	r3, r0
 80070cc:	461a      	mov	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	80da      	strh	r2, [r3, #6]
}
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80070e4:	2180      	movs	r1, #128	; 0x80
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fc66 	bl	80079b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80070ec:	2100      	movs	r1, #0
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fc62 	bl	80079b8 <USBD_LL_StallEP>
}
 80070f4:	bf00      	nop
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d036      	beq.n	8007180 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007116:	6938      	ldr	r0, [r7, #16]
 8007118:	f000 f836 	bl	8007188 <USBD_GetLen>
 800711c:	4603      	mov	r3, r0
 800711e:	3301      	adds	r3, #1
 8007120:	b29b      	uxth	r3, r3
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	b29a      	uxth	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	4413      	add	r3, r2
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	7812      	ldrb	r2, [r2, #0]
 8007134:	701a      	strb	r2, [r3, #0]
  idx++;
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	3301      	adds	r3, #1
 800713a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4413      	add	r3, r2
 8007142:	2203      	movs	r2, #3
 8007144:	701a      	strb	r2, [r3, #0]
  idx++;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	3301      	adds	r3, #1
 800714a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800714c:	e013      	b.n	8007176 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800714e:	7dfb      	ldrb	r3, [r7, #23]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	4413      	add	r3, r2
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	7812      	ldrb	r2, [r2, #0]
 8007158:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	3301      	adds	r3, #1
 800715e:	613b      	str	r3, [r7, #16]
    idx++;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
 8007162:	3301      	adds	r3, #1
 8007164:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	4413      	add	r3, r2
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007170:	7dfb      	ldrb	r3, [r7, #23]
 8007172:	3301      	adds	r3, #1
 8007174:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e7      	bne.n	800714e <USBD_GetString+0x52>
 800717e:	e000      	b.n	8007182 <USBD_GetString+0x86>
    return;
 8007180:	bf00      	nop
  }
}
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007198:	e005      	b.n	80071a6 <USBD_GetLen+0x1e>
  {
    len++;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	3301      	adds	r3, #1
 800719e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1f5      	bne.n	800719a <USBD_GetLen+0x12>
  }

  return len;
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	2100      	movs	r1, #0
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 fc71 	bl	8007aca <USBD_LL_Transmit>

  return USBD_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	2100      	movs	r1, #0
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fc60 	bl	8007aca <USBD_LL_Transmit>

  return USBD_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2203      	movs	r2, #3
 8007224:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	2100      	movs	r1, #0
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 fc64 	bl	8007b0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	2100      	movs	r1, #0
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fc53 	bl	8007b0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2204      	movs	r2, #4
 800727c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007280:	2300      	movs	r3, #0
 8007282:	2200      	movs	r2, #0
 8007284:	2100      	movs	r1, #0
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fc1f 	bl	8007aca <USBD_LL_Transmit>

  return USBD_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2205      	movs	r2, #5
 80072a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072a6:	2300      	movs	r3, #0
 80072a8:	2200      	movs	r2, #0
 80072aa:	2100      	movs	r1, #0
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fc2d 	bl	8007b0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072c0:	2200      	movs	r2, #0
 80072c2:	4912      	ldr	r1, [pc, #72]	; (800730c <MX_USB_DEVICE_Init+0x50>)
 80072c4:	4812      	ldr	r0, [pc, #72]	; (8007310 <MX_USB_DEVICE_Init+0x54>)
 80072c6:	f7fe fd01 	bl	8005ccc <USBD_Init>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80072d0:	f7f9 fbde 	bl	8000a90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80072d4:	490f      	ldr	r1, [pc, #60]	; (8007314 <MX_USB_DEVICE_Init+0x58>)
 80072d6:	480e      	ldr	r0, [pc, #56]	; (8007310 <MX_USB_DEVICE_Init+0x54>)
 80072d8:	f7fe fd28 	bl	8005d2c <USBD_RegisterClass>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80072e2:	f7f9 fbd5 	bl	8000a90 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80072e6:	490c      	ldr	r1, [pc, #48]	; (8007318 <MX_USB_DEVICE_Init+0x5c>)
 80072e8:	4809      	ldr	r0, [pc, #36]	; (8007310 <MX_USB_DEVICE_Init+0x54>)
 80072ea:	f7fe fcd5 	bl	8005c98 <USBD_CUSTOM_HID_RegisterInterface>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80072f4:	f7f9 fbcc 	bl	8000a90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80072f8:	4805      	ldr	r0, [pc, #20]	; (8007310 <MX_USB_DEVICE_Init+0x54>)
 80072fa:	f7fe fd4d 	bl	8005d98 <USBD_Start>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007304:	f7f9 fbc4 	bl	8000a90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007308:	bf00      	nop
 800730a:	bd80      	pop	{r7, pc}
 800730c:	2000011c 	.word	0x2000011c
 8007310:	20000348 	.word	0x20000348
 8007314:	2000002c 	.word	0x2000002c
 8007318:	2000010c 	.word	0x2000010c

0800731c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007320:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007322:	4618      	mov	r0, r3
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007330:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007332:	4618      	mov	r0, r3
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	460a      	mov	r2, r1
 8007346:	71fb      	strb	r3, [r7, #7]
 8007348:	4613      	mov	r3, r2
 800734a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800734c:	4806      	ldr	r0, [pc, #24]	; (8007368 <CUSTOM_HID_OutEvent_FS+0x2c>)
 800734e:	f7fe fc41 	bl	8005bd4 <USBD_CUSTOM_HID_ReceivePacket>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8007358:	f04f 33ff 	mov.w	r3, #4294967295
 800735c:	e000      	b.n	8007360 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 800735e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007360:	4618      	mov	r0, r3
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20000348 	.word	0x20000348

0800736c <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  report: The report to be sent
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8007378:	887b      	ldrh	r3, [r7, #2]
 800737a:	461a      	mov	r2, r3
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	4804      	ldr	r0, [pc, #16]	; (8007390 <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 8007380:	f7fe fb1a 	bl	80059b8 <USBD_CUSTOM_HID_SendReport>
 8007384:	4603      	mov	r3, r0
 8007386:	b25b      	sxtb	r3, r3
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20000348 	.word	0x20000348

08007394 <send_report>:

/* USER CODE END 7 */

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int8_t send_report(uint8_t* report, uint16_t len)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	807b      	strh	r3, [r7, #2]
	return USBD_CUSTOM_HID_SendReport_FS(report, len);
 80073a0:	887b      	ldrh	r3, [r7, #2]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7ff ffe1 	bl	800736c <USBD_CUSTOM_HID_SendReport_FS>
 80073aa:	4603      	mov	r3, r0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	4603      	mov	r3, r0
 80073bc:	6039      	str	r1, [r7, #0]
 80073be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2212      	movs	r2, #18
 80073c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073c6:	4b03      	ldr	r3, [pc, #12]	; (80073d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	20000138 	.word	0x20000138

080073d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	6039      	str	r1, [r7, #0]
 80073e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2204      	movs	r2, #4
 80073e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073ea:	4b03      	ldr	r3, [pc, #12]	; (80073f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	2000014c 	.word	0x2000014c

080073fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	6039      	str	r1, [r7, #0]
 8007406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d105      	bne.n	800741a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	4907      	ldr	r1, [pc, #28]	; (8007430 <USBD_FS_ProductStrDescriptor+0x34>)
 8007412:	4808      	ldr	r0, [pc, #32]	; (8007434 <USBD_FS_ProductStrDescriptor+0x38>)
 8007414:	f7ff fe72 	bl	80070fc <USBD_GetString>
 8007418:	e004      	b.n	8007424 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	4904      	ldr	r1, [pc, #16]	; (8007430 <USBD_FS_ProductStrDescriptor+0x34>)
 800741e:	4805      	ldr	r0, [pc, #20]	; (8007434 <USBD_FS_ProductStrDescriptor+0x38>)
 8007420:	f7ff fe6c 	bl	80070fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007424:	4b02      	ldr	r3, [pc, #8]	; (8007430 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20000624 	.word	0x20000624
 8007434:	0800864c 	.word	0x0800864c

08007438 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	4603      	mov	r3, r0
 8007440:	6039      	str	r1, [r7, #0]
 8007442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	4904      	ldr	r1, [pc, #16]	; (8007458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007448:	4804      	ldr	r0, [pc, #16]	; (800745c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800744a:	f7ff fe57 	bl	80070fc <USBD_GetString>
  return USBD_StrDesc;
 800744e:	4b02      	ldr	r3, [pc, #8]	; (8007458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	20000624 	.word	0x20000624
 800745c:	0800865c 	.word	0x0800865c

08007460 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	6039      	str	r1, [r7, #0]
 800746a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	221a      	movs	r2, #26
 8007470:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007472:	f000 f843 	bl	80074fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007476:	4b02      	ldr	r3, [pc, #8]	; (8007480 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000150 	.word	0x20000150

08007484 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	6039      	str	r1, [r7, #0]
 800748e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d105      	bne.n	80074a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	4907      	ldr	r1, [pc, #28]	; (80074b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800749a:	4808      	ldr	r0, [pc, #32]	; (80074bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800749c:	f7ff fe2e 	bl	80070fc <USBD_GetString>
 80074a0:	e004      	b.n	80074ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	4904      	ldr	r1, [pc, #16]	; (80074b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074a6:	4805      	ldr	r0, [pc, #20]	; (80074bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80074a8:	f7ff fe28 	bl	80070fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80074ac:	4b02      	ldr	r3, [pc, #8]	; (80074b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20000624 	.word	0x20000624
 80074bc:	08008664 	.word	0x08008664

080074c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	4603      	mov	r3, r0
 80074c8:	6039      	str	r1, [r7, #0]
 80074ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d105      	bne.n	80074de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	4907      	ldr	r1, [pc, #28]	; (80074f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074d6:	4808      	ldr	r0, [pc, #32]	; (80074f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074d8:	f7ff fe10 	bl	80070fc <USBD_GetString>
 80074dc:	e004      	b.n	80074e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	4904      	ldr	r1, [pc, #16]	; (80074f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074e2:	4805      	ldr	r0, [pc, #20]	; (80074f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074e4:	f7ff fe0a 	bl	80070fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80074e8:	4b02      	ldr	r3, [pc, #8]	; (80074f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20000624 	.word	0x20000624
 80074f8:	08008678 	.word	0x08008678

080074fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007502:	4b0f      	ldr	r3, [pc, #60]	; (8007540 <Get_SerialNum+0x44>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007508:	4b0e      	ldr	r3, [pc, #56]	; (8007544 <Get_SerialNum+0x48>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800750e:	4b0e      	ldr	r3, [pc, #56]	; (8007548 <Get_SerialNum+0x4c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4413      	add	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007522:	2208      	movs	r2, #8
 8007524:	4909      	ldr	r1, [pc, #36]	; (800754c <Get_SerialNum+0x50>)
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 f814 	bl	8007554 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800752c:	2204      	movs	r2, #4
 800752e:	4908      	ldr	r1, [pc, #32]	; (8007550 <Get_SerialNum+0x54>)
 8007530:	68b8      	ldr	r0, [r7, #8]
 8007532:	f000 f80f 	bl	8007554 <IntToUnicode>
  }
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	1fff7a10 	.word	0x1fff7a10
 8007544:	1fff7a14 	.word	0x1fff7a14
 8007548:	1fff7a18 	.word	0x1fff7a18
 800754c:	20000152 	.word	0x20000152
 8007550:	20000162 	.word	0x20000162

08007554 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	4613      	mov	r3, r2
 8007560:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007566:	2300      	movs	r3, #0
 8007568:	75fb      	strb	r3, [r7, #23]
 800756a:	e027      	b.n	80075bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	0f1b      	lsrs	r3, r3, #28
 8007570:	2b09      	cmp	r3, #9
 8007572:	d80b      	bhi.n	800758c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	0f1b      	lsrs	r3, r3, #28
 8007578:	b2da      	uxtb	r2, r3
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	4619      	mov	r1, r3
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	440b      	add	r3, r1
 8007584:	3230      	adds	r2, #48	; 0x30
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	e00a      	b.n	80075a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	0f1b      	lsrs	r3, r3, #28
 8007590:	b2da      	uxtb	r2, r3
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	4619      	mov	r1, r3
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	440b      	add	r3, r1
 800759c:	3237      	adds	r2, #55	; 0x37
 800759e:	b2d2      	uxtb	r2, r2
 80075a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	011b      	lsls	r3, r3, #4
 80075a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075a8:	7dfb      	ldrb	r3, [r7, #23]
 80075aa:	005b      	lsls	r3, r3, #1
 80075ac:	3301      	adds	r3, #1
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	4413      	add	r3, r2
 80075b2:	2200      	movs	r2, #0
 80075b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	3301      	adds	r3, #1
 80075ba:	75fb      	strb	r3, [r7, #23]
 80075bc:	7dfa      	ldrb	r2, [r7, #23]
 80075be:	79fb      	ldrb	r3, [r7, #7]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d3d3      	bcc.n	800756c <IntToUnicode+0x18>
  }
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
	...

080075d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08a      	sub	sp, #40	; 0x28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075dc:	f107 0314 	add.w	r3, r7, #20
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	605a      	str	r2, [r3, #4]
 80075e6:	609a      	str	r2, [r3, #8]
 80075e8:	60da      	str	r2, [r3, #12]
 80075ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075f4:	d13a      	bne.n	800766c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
 80075fa:	4b1e      	ldr	r3, [pc, #120]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	4a1d      	ldr	r2, [pc, #116]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 8007600:	f043 0301 	orr.w	r3, r3, #1
 8007604:	6313      	str	r3, [r2, #48]	; 0x30
 8007606:	4b1b      	ldr	r3, [pc, #108]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 8007608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007612:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007618:	2302      	movs	r3, #2
 800761a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800761c:	2300      	movs	r3, #0
 800761e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007620:	2303      	movs	r3, #3
 8007622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007624:	230a      	movs	r3, #10
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007628:	f107 0314 	add.w	r3, r7, #20
 800762c:	4619      	mov	r1, r3
 800762e:	4812      	ldr	r0, [pc, #72]	; (8007678 <HAL_PCD_MspInit+0xa4>)
 8007630:	f7f9 fef8 	bl	8001424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007634:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 8007636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007638:	4a0e      	ldr	r2, [pc, #56]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 800763a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763e:	6353      	str	r3, [r2, #52]	; 0x34
 8007640:	2300      	movs	r3, #0
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 8007646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007648:	4a0a      	ldr	r2, [pc, #40]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 800764a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800764e:	6453      	str	r3, [r2, #68]	; 0x44
 8007650:	4b08      	ldr	r3, [pc, #32]	; (8007674 <HAL_PCD_MspInit+0xa0>)
 8007652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800765c:	2200      	movs	r2, #0
 800765e:	2100      	movs	r1, #0
 8007660:	2043      	movs	r0, #67	; 0x43
 8007662:	f7f9 fea8 	bl	80013b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007666:	2043      	movs	r0, #67	; 0x43
 8007668:	f7f9 fec1 	bl	80013ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800766c:	bf00      	nop
 800766e:	3728      	adds	r7, #40	; 0x28
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	40023800 	.word	0x40023800
 8007678:	40020000 	.word	0x40020000

0800767c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f7fe fbcd 	bl	8005e32 <USBD_LL_SetupStage>
}
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80076b2:	78fa      	ldrb	r2, [r7, #3]
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	4613      	mov	r3, r2
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	440b      	add	r3, r1
 80076c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	4619      	mov	r1, r3
 80076ca:	f7fe fc07 	bl	8005edc <USBD_LL_DataOutStage>
}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	460b      	mov	r3, r1
 80076e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80076e8:	78fa      	ldrb	r2, [r7, #3]
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	4613      	mov	r3, r2
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	4413      	add	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	3320      	adds	r3, #32
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	4619      	mov	r1, r3
 80076fe:	f7fe fca0 	bl	8006042 <USBD_LL_DataInStage>
}
 8007702:	bf00      	nop
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007718:	4618      	mov	r0, r3
 800771a:	f7fe fdda 	bl	80062d2 <USBD_LL_SOF>
}
 800771e:	bf00      	nop
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800772e:	2301      	movs	r3, #1
 8007730:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	79db      	ldrb	r3, [r3, #7]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d102      	bne.n	8007740 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]
 800773e:	e008      	b.n	8007752 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	79db      	ldrb	r3, [r3, #7]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d102      	bne.n	800774e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007748:	2301      	movs	r3, #1
 800774a:	73fb      	strb	r3, [r7, #15]
 800774c:	e001      	b.n	8007752 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800774e:	f7f9 f99f 	bl	8000a90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007758:	7bfa      	ldrb	r2, [r7, #15]
 800775a:	4611      	mov	r1, r2
 800775c:	4618      	mov	r0, r3
 800775e:	f7fe fd74 	bl	800624a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe fd1c 	bl	80061a6 <USBD_LL_Reset>
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fd6f 	bl	800626a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6812      	ldr	r2, [r2, #0]
 800779a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800779e:	f043 0301 	orr.w	r3, r3, #1
 80077a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	7adb      	ldrb	r3, [r3, #11]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077ac:	4b04      	ldr	r3, [pc, #16]	; (80077c0 <HAL_PCD_SuspendCallback+0x48>)
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	4a03      	ldr	r2, [pc, #12]	; (80077c0 <HAL_PCD_SuspendCallback+0x48>)
 80077b2:	f043 0306 	orr.w	r3, r3, #6
 80077b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80077b8:	bf00      	nop
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	e000ed00 	.word	0xe000ed00

080077c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe fd65 	bl	80062a2 <USBD_LL_Resume>
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80077f2:	78fa      	ldrb	r2, [r7, #3]
 80077f4:	4611      	mov	r1, r2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fdbd 	bl	8006376 <USBD_LL_IsoOUTIncomplete>
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007816:	78fa      	ldrb	r2, [r7, #3]
 8007818:	4611      	mov	r1, r2
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe fd79 	bl	8006312 <USBD_LL_IsoINIncomplete>
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe fdcf 	bl	80063da <USBD_LL_DevConnected>
}
 800783c:	bf00      	nop
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe fdcc 	bl	80063f0 <USBD_LL_DevDisconnected>
}
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d13c      	bne.n	80078ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007870:	4a20      	ldr	r2, [pc, #128]	; (80078f4 <USBD_LL_Init+0x94>)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a1e      	ldr	r2, [pc, #120]	; (80078f4 <USBD_LL_Init+0x94>)
 800787c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007880:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <USBD_LL_Init+0x94>)
 8007882:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007886:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007888:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <USBD_LL_Init+0x94>)
 800788a:	2204      	movs	r2, #4
 800788c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800788e:	4b19      	ldr	r3, [pc, #100]	; (80078f4 <USBD_LL_Init+0x94>)
 8007890:	2202      	movs	r2, #2
 8007892:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007894:	4b17      	ldr	r3, [pc, #92]	; (80078f4 <USBD_LL_Init+0x94>)
 8007896:	2200      	movs	r2, #0
 8007898:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800789a:	4b16      	ldr	r3, [pc, #88]	; (80078f4 <USBD_LL_Init+0x94>)
 800789c:	2202      	movs	r2, #2
 800789e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80078a0:	4b14      	ldr	r3, [pc, #80]	; (80078f4 <USBD_LL_Init+0x94>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80078a6:	4b13      	ldr	r3, [pc, #76]	; (80078f4 <USBD_LL_Init+0x94>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80078ac:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <USBD_LL_Init+0x94>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80078b2:	4b10      	ldr	r3, [pc, #64]	; (80078f4 <USBD_LL_Init+0x94>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80078b8:	4b0e      	ldr	r3, [pc, #56]	; (80078f4 <USBD_LL_Init+0x94>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80078be:	480d      	ldr	r0, [pc, #52]	; (80078f4 <USBD_LL_Init+0x94>)
 80078c0:	f7f9 ff7f 	bl	80017c2 <HAL_PCD_Init>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80078ca:	f7f9 f8e1 	bl	8000a90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80078ce:	2180      	movs	r1, #128	; 0x80
 80078d0:	4808      	ldr	r0, [pc, #32]	; (80078f4 <USBD_LL_Init+0x94>)
 80078d2:	f7fb f992 	bl	8002bfa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078d6:	2240      	movs	r2, #64	; 0x40
 80078d8:	2100      	movs	r1, #0
 80078da:	4806      	ldr	r0, [pc, #24]	; (80078f4 <USBD_LL_Init+0x94>)
 80078dc:	f7fb f946 	bl	8002b6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078e0:	2280      	movs	r2, #128	; 0x80
 80078e2:	2101      	movs	r1, #1
 80078e4:	4803      	ldr	r0, [pc, #12]	; (80078f4 <USBD_LL_Init+0x94>)
 80078e6:	f7fb f941 	bl	8002b6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20000824 	.word	0x20000824

080078f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800790e:	4618      	mov	r0, r3
 8007910:	f7fa f866 	bl	80019e0 <HAL_PCD_Start>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	4618      	mov	r0, r3
 800791c:	f000 f930 	bl	8007b80 <USBD_Get_USB_Status>
 8007920:	4603      	mov	r3, r0
 8007922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007924:	7bbb      	ldrb	r3, [r7, #14]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	4608      	mov	r0, r1
 8007938:	4611      	mov	r1, r2
 800793a:	461a      	mov	r2, r3
 800793c:	4603      	mov	r3, r0
 800793e:	70fb      	strb	r3, [r7, #3]
 8007940:	460b      	mov	r3, r1
 8007942:	70bb      	strb	r3, [r7, #2]
 8007944:	4613      	mov	r3, r2
 8007946:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007956:	78bb      	ldrb	r3, [r7, #2]
 8007958:	883a      	ldrh	r2, [r7, #0]
 800795a:	78f9      	ldrb	r1, [r7, #3]
 800795c:	f7fa fd3a 	bl	80023d4 <HAL_PCD_EP_Open>
 8007960:	4603      	mov	r3, r0
 8007962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 f90a 	bl	8007b80 <USBD_Get_USB_Status>
 800796c:	4603      	mov	r3, r0
 800796e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007970:	7bbb      	ldrb	r3, [r7, #14]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	460b      	mov	r3, r1
 8007984:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007994:	78fa      	ldrb	r2, [r7, #3]
 8007996:	4611      	mov	r1, r2
 8007998:	4618      	mov	r0, r3
 800799a:	f7fa fd83 	bl	80024a4 <HAL_PCD_EP_Close>
 800799e:	4603      	mov	r3, r0
 80079a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 f8eb 	bl	8007b80 <USBD_Get_USB_Status>
 80079aa:	4603      	mov	r3, r0
 80079ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079d2:	78fa      	ldrb	r2, [r7, #3]
 80079d4:	4611      	mov	r1, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fa fe23 	bl	8002622 <HAL_PCD_EP_SetStall>
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 f8cc 	bl	8007b80 <USBD_Get_USB_Status>
 80079e8:	4603      	mov	r3, r0
 80079ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	460b      	mov	r3, r1
 8007a00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a10:	78fa      	ldrb	r2, [r7, #3]
 8007a12:	4611      	mov	r1, r2
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fa fe67 	bl	80026e8 <HAL_PCD_EP_ClrStall>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 f8ad 	bl	8007b80 <USBD_Get_USB_Status>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	da0b      	bge.n	8007a68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a50:	78fb      	ldrb	r3, [r7, #3]
 8007a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a56:	68f9      	ldr	r1, [r7, #12]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	440b      	add	r3, r1
 8007a62:	3316      	adds	r3, #22
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	e00b      	b.n	8007a80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a68:	78fb      	ldrb	r3, [r7, #3]
 8007a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a6e:	68f9      	ldr	r1, [r7, #12]
 8007a70:	4613      	mov	r3, r2
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	440b      	add	r3, r1
 8007a7a:	f203 2356 	addw	r3, r3, #598	; 0x256
 8007a7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007aa6:	78fa      	ldrb	r2, [r7, #3]
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fa fc6e 	bl	800238c <HAL_PCD_SetAddress>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 f862 	bl	8007b80 <USBD_Get_USB_Status>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b086      	sub	sp, #24
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	603b      	str	r3, [r7, #0]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ae8:	7af9      	ldrb	r1, [r7, #11]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	f7fa fd5e 	bl	80025ae <HAL_PCD_EP_Transmit>
 8007af2:	4603      	mov	r3, r0
 8007af4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 f841 	bl	8007b80 <USBD_Get_USB_Status>
 8007afe:	4603      	mov	r3, r0
 8007b00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b02:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	607a      	str	r2, [r7, #4]
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b2a:	7af9      	ldrb	r1, [r7, #11]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	f7fa fd02 	bl	8002538 <HAL_PCD_EP_Receive>
 8007b34:	4603      	mov	r3, r0
 8007b36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 f820 	bl	8007b80 <USBD_Get_USB_Status>
 8007b40:	4603      	mov	r3, r0
 8007b42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b44:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007b58:	4b03      	ldr	r3, [pc, #12]	; (8007b68 <USBD_static_malloc+0x18>)
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	20000d08 	.word	0x20000d08

08007b6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]

}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d817      	bhi.n	8007bc4 <USBD_Get_USB_Status+0x44>
 8007b94:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <USBD_Get_USB_Status+0x1c>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007bad 	.word	0x08007bad
 8007ba0:	08007bb3 	.word	0x08007bb3
 8007ba4:	08007bb9 	.word	0x08007bb9
 8007ba8:	08007bbf 	.word	0x08007bbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb0:	e00b      	b.n	8007bca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb6:	e008      	b.n	8007bca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	73fb      	strb	r3, [r7, #15]
    break;
 8007bbc:	e005      	b.n	8007bca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc2:	e002      	b.n	8007bca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc8:	bf00      	nop
  }
  return usb_status;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <sbrk_aligned>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	4e0e      	ldr	r6, [pc, #56]	; (8007c14 <sbrk_aligned+0x3c>)
 8007bdc:	460c      	mov	r4, r1
 8007bde:	6831      	ldr	r1, [r6, #0]
 8007be0:	4605      	mov	r5, r0
 8007be2:	b911      	cbnz	r1, 8007bea <sbrk_aligned+0x12>
 8007be4:	f000 faea 	bl	80081bc <_sbrk_r>
 8007be8:	6030      	str	r0, [r6, #0]
 8007bea:	4621      	mov	r1, r4
 8007bec:	4628      	mov	r0, r5
 8007bee:	f000 fae5 	bl	80081bc <_sbrk_r>
 8007bf2:	1c43      	adds	r3, r0, #1
 8007bf4:	d00a      	beq.n	8007c0c <sbrk_aligned+0x34>
 8007bf6:	1cc4      	adds	r4, r0, #3
 8007bf8:	f024 0403 	bic.w	r4, r4, #3
 8007bfc:	42a0      	cmp	r0, r4
 8007bfe:	d007      	beq.n	8007c10 <sbrk_aligned+0x38>
 8007c00:	1a21      	subs	r1, r4, r0
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 fada 	bl	80081bc <_sbrk_r>
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d101      	bne.n	8007c10 <sbrk_aligned+0x38>
 8007c0c:	f04f 34ff 	mov.w	r4, #4294967295
 8007c10:	4620      	mov	r0, r4
 8007c12:	bd70      	pop	{r4, r5, r6, pc}
 8007c14:	20000d64 	.word	0x20000d64

08007c18 <_malloc_r>:
 8007c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c1c:	1ccd      	adds	r5, r1, #3
 8007c1e:	f025 0503 	bic.w	r5, r5, #3
 8007c22:	3508      	adds	r5, #8
 8007c24:	2d0c      	cmp	r5, #12
 8007c26:	bf38      	it	cc
 8007c28:	250c      	movcc	r5, #12
 8007c2a:	2d00      	cmp	r5, #0
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	db01      	blt.n	8007c34 <_malloc_r+0x1c>
 8007c30:	42a9      	cmp	r1, r5
 8007c32:	d905      	bls.n	8007c40 <_malloc_r+0x28>
 8007c34:	230c      	movs	r3, #12
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	2600      	movs	r6, #0
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d14 <_malloc_r+0xfc>
 8007c44:	f000 f868 	bl	8007d18 <__malloc_lock>
 8007c48:	f8d8 3000 	ldr.w	r3, [r8]
 8007c4c:	461c      	mov	r4, r3
 8007c4e:	bb5c      	cbnz	r4, 8007ca8 <_malloc_r+0x90>
 8007c50:	4629      	mov	r1, r5
 8007c52:	4638      	mov	r0, r7
 8007c54:	f7ff ffc0 	bl	8007bd8 <sbrk_aligned>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	d155      	bne.n	8007d0a <_malloc_r+0xf2>
 8007c5e:	f8d8 4000 	ldr.w	r4, [r8]
 8007c62:	4626      	mov	r6, r4
 8007c64:	2e00      	cmp	r6, #0
 8007c66:	d145      	bne.n	8007cf4 <_malloc_r+0xdc>
 8007c68:	2c00      	cmp	r4, #0
 8007c6a:	d048      	beq.n	8007cfe <_malloc_r+0xe6>
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4638      	mov	r0, r7
 8007c72:	eb04 0903 	add.w	r9, r4, r3
 8007c76:	f000 faa1 	bl	80081bc <_sbrk_r>
 8007c7a:	4581      	cmp	r9, r0
 8007c7c:	d13f      	bne.n	8007cfe <_malloc_r+0xe6>
 8007c7e:	6821      	ldr	r1, [r4, #0]
 8007c80:	1a6d      	subs	r5, r5, r1
 8007c82:	4629      	mov	r1, r5
 8007c84:	4638      	mov	r0, r7
 8007c86:	f7ff ffa7 	bl	8007bd8 <sbrk_aligned>
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d037      	beq.n	8007cfe <_malloc_r+0xe6>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	442b      	add	r3, r5
 8007c92:	6023      	str	r3, [r4, #0]
 8007c94:	f8d8 3000 	ldr.w	r3, [r8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d038      	beq.n	8007d0e <_malloc_r+0xf6>
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	42a2      	cmp	r2, r4
 8007ca0:	d12b      	bne.n	8007cfa <_malloc_r+0xe2>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	e00f      	b.n	8007cc8 <_malloc_r+0xb0>
 8007ca8:	6822      	ldr	r2, [r4, #0]
 8007caa:	1b52      	subs	r2, r2, r5
 8007cac:	d41f      	bmi.n	8007cee <_malloc_r+0xd6>
 8007cae:	2a0b      	cmp	r2, #11
 8007cb0:	d917      	bls.n	8007ce2 <_malloc_r+0xca>
 8007cb2:	1961      	adds	r1, r4, r5
 8007cb4:	42a3      	cmp	r3, r4
 8007cb6:	6025      	str	r5, [r4, #0]
 8007cb8:	bf18      	it	ne
 8007cba:	6059      	strne	r1, [r3, #4]
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	bf08      	it	eq
 8007cc0:	f8c8 1000 	streq.w	r1, [r8]
 8007cc4:	5162      	str	r2, [r4, r5]
 8007cc6:	604b      	str	r3, [r1, #4]
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f104 060b 	add.w	r6, r4, #11
 8007cce:	f000 f829 	bl	8007d24 <__malloc_unlock>
 8007cd2:	f026 0607 	bic.w	r6, r6, #7
 8007cd6:	1d23      	adds	r3, r4, #4
 8007cd8:	1af2      	subs	r2, r6, r3
 8007cda:	d0ae      	beq.n	8007c3a <_malloc_r+0x22>
 8007cdc:	1b9b      	subs	r3, r3, r6
 8007cde:	50a3      	str	r3, [r4, r2]
 8007ce0:	e7ab      	b.n	8007c3a <_malloc_r+0x22>
 8007ce2:	42a3      	cmp	r3, r4
 8007ce4:	6862      	ldr	r2, [r4, #4]
 8007ce6:	d1dd      	bne.n	8007ca4 <_malloc_r+0x8c>
 8007ce8:	f8c8 2000 	str.w	r2, [r8]
 8007cec:	e7ec      	b.n	8007cc8 <_malloc_r+0xb0>
 8007cee:	4623      	mov	r3, r4
 8007cf0:	6864      	ldr	r4, [r4, #4]
 8007cf2:	e7ac      	b.n	8007c4e <_malloc_r+0x36>
 8007cf4:	4634      	mov	r4, r6
 8007cf6:	6876      	ldr	r6, [r6, #4]
 8007cf8:	e7b4      	b.n	8007c64 <_malloc_r+0x4c>
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	e7cc      	b.n	8007c98 <_malloc_r+0x80>
 8007cfe:	230c      	movs	r3, #12
 8007d00:	603b      	str	r3, [r7, #0]
 8007d02:	4638      	mov	r0, r7
 8007d04:	f000 f80e 	bl	8007d24 <__malloc_unlock>
 8007d08:	e797      	b.n	8007c3a <_malloc_r+0x22>
 8007d0a:	6025      	str	r5, [r4, #0]
 8007d0c:	e7dc      	b.n	8007cc8 <_malloc_r+0xb0>
 8007d0e:	605b      	str	r3, [r3, #4]
 8007d10:	deff      	udf	#255	; 0xff
 8007d12:	bf00      	nop
 8007d14:	20000d60 	.word	0x20000d60

08007d18 <__malloc_lock>:
 8007d18:	4801      	ldr	r0, [pc, #4]	; (8007d20 <__malloc_lock+0x8>)
 8007d1a:	f000 ba9c 	b.w	8008256 <__retarget_lock_acquire_recursive>
 8007d1e:	bf00      	nop
 8007d20:	20000ea8 	.word	0x20000ea8

08007d24 <__malloc_unlock>:
 8007d24:	4801      	ldr	r0, [pc, #4]	; (8007d2c <__malloc_unlock+0x8>)
 8007d26:	f000 ba97 	b.w	8008258 <__retarget_lock_release_recursive>
 8007d2a:	bf00      	nop
 8007d2c:	20000ea8 	.word	0x20000ea8

08007d30 <std>:
 8007d30:	2300      	movs	r3, #0
 8007d32:	b510      	push	{r4, lr}
 8007d34:	4604      	mov	r4, r0
 8007d36:	e9c0 3300 	strd	r3, r3, [r0]
 8007d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d3e:	6083      	str	r3, [r0, #8]
 8007d40:	8181      	strh	r1, [r0, #12]
 8007d42:	6643      	str	r3, [r0, #100]	; 0x64
 8007d44:	81c2      	strh	r2, [r0, #14]
 8007d46:	6183      	str	r3, [r0, #24]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	2208      	movs	r2, #8
 8007d4c:	305c      	adds	r0, #92	; 0x5c
 8007d4e:	f000 f9e5 	bl	800811c <memset>
 8007d52:	4b0d      	ldr	r3, [pc, #52]	; (8007d88 <std+0x58>)
 8007d54:	6263      	str	r3, [r4, #36]	; 0x24
 8007d56:	4b0d      	ldr	r3, [pc, #52]	; (8007d8c <std+0x5c>)
 8007d58:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d5a:	4b0d      	ldr	r3, [pc, #52]	; (8007d90 <std+0x60>)
 8007d5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d5e:	4b0d      	ldr	r3, [pc, #52]	; (8007d94 <std+0x64>)
 8007d60:	6323      	str	r3, [r4, #48]	; 0x30
 8007d62:	4b0d      	ldr	r3, [pc, #52]	; (8007d98 <std+0x68>)
 8007d64:	6224      	str	r4, [r4, #32]
 8007d66:	429c      	cmp	r4, r3
 8007d68:	d006      	beq.n	8007d78 <std+0x48>
 8007d6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007d6e:	4294      	cmp	r4, r2
 8007d70:	d002      	beq.n	8007d78 <std+0x48>
 8007d72:	33d0      	adds	r3, #208	; 0xd0
 8007d74:	429c      	cmp	r4, r3
 8007d76:	d105      	bne.n	8007d84 <std+0x54>
 8007d78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d80:	f000 ba68 	b.w	8008254 <__retarget_lock_init_recursive>
 8007d84:	bd10      	pop	{r4, pc}
 8007d86:	bf00      	nop
 8007d88:	08007f6d 	.word	0x08007f6d
 8007d8c:	08007f8f 	.word	0x08007f8f
 8007d90:	08007fc7 	.word	0x08007fc7
 8007d94:	08007feb 	.word	0x08007feb
 8007d98:	20000d68 	.word	0x20000d68

08007d9c <stdio_exit_handler>:
 8007d9c:	4a02      	ldr	r2, [pc, #8]	; (8007da8 <stdio_exit_handler+0xc>)
 8007d9e:	4903      	ldr	r1, [pc, #12]	; (8007dac <stdio_exit_handler+0x10>)
 8007da0:	4803      	ldr	r0, [pc, #12]	; (8007db0 <stdio_exit_handler+0x14>)
 8007da2:	f000 b869 	b.w	8007e78 <_fwalk_sglue>
 8007da6:	bf00      	nop
 8007da8:	2000016c 	.word	0x2000016c
 8007dac:	08008401 	.word	0x08008401
 8007db0:	20000178 	.word	0x20000178

08007db4 <cleanup_stdio>:
 8007db4:	6841      	ldr	r1, [r0, #4]
 8007db6:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <cleanup_stdio+0x34>)
 8007db8:	4299      	cmp	r1, r3
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	d001      	beq.n	8007dc4 <cleanup_stdio+0x10>
 8007dc0:	f000 fb1e 	bl	8008400 <_fflush_r>
 8007dc4:	68a1      	ldr	r1, [r4, #8]
 8007dc6:	4b09      	ldr	r3, [pc, #36]	; (8007dec <cleanup_stdio+0x38>)
 8007dc8:	4299      	cmp	r1, r3
 8007dca:	d002      	beq.n	8007dd2 <cleanup_stdio+0x1e>
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 fb17 	bl	8008400 <_fflush_r>
 8007dd2:	68e1      	ldr	r1, [r4, #12]
 8007dd4:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <cleanup_stdio+0x3c>)
 8007dd6:	4299      	cmp	r1, r3
 8007dd8:	d004      	beq.n	8007de4 <cleanup_stdio+0x30>
 8007dda:	4620      	mov	r0, r4
 8007ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de0:	f000 bb0e 	b.w	8008400 <_fflush_r>
 8007de4:	bd10      	pop	{r4, pc}
 8007de6:	bf00      	nop
 8007de8:	20000d68 	.word	0x20000d68
 8007dec:	20000dd0 	.word	0x20000dd0
 8007df0:	20000e38 	.word	0x20000e38

08007df4 <global_stdio_init.part.0>:
 8007df4:	b510      	push	{r4, lr}
 8007df6:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <global_stdio_init.part.0+0x30>)
 8007df8:	4c0b      	ldr	r4, [pc, #44]	; (8007e28 <global_stdio_init.part.0+0x34>)
 8007dfa:	4a0c      	ldr	r2, [pc, #48]	; (8007e2c <global_stdio_init.part.0+0x38>)
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	4620      	mov	r0, r4
 8007e00:	2200      	movs	r2, #0
 8007e02:	2104      	movs	r1, #4
 8007e04:	f7ff ff94 	bl	8007d30 <std>
 8007e08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	2109      	movs	r1, #9
 8007e10:	f7ff ff8e 	bl	8007d30 <std>
 8007e14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007e18:	2202      	movs	r2, #2
 8007e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e1e:	2112      	movs	r1, #18
 8007e20:	f7ff bf86 	b.w	8007d30 <std>
 8007e24:	20000ea0 	.word	0x20000ea0
 8007e28:	20000d68 	.word	0x20000d68
 8007e2c:	08007d9d 	.word	0x08007d9d

08007e30 <__sfp_lock_acquire>:
 8007e30:	4801      	ldr	r0, [pc, #4]	; (8007e38 <__sfp_lock_acquire+0x8>)
 8007e32:	f000 ba10 	b.w	8008256 <__retarget_lock_acquire_recursive>
 8007e36:	bf00      	nop
 8007e38:	20000ea9 	.word	0x20000ea9

08007e3c <__sfp_lock_release>:
 8007e3c:	4801      	ldr	r0, [pc, #4]	; (8007e44 <__sfp_lock_release+0x8>)
 8007e3e:	f000 ba0b 	b.w	8008258 <__retarget_lock_release_recursive>
 8007e42:	bf00      	nop
 8007e44:	20000ea9 	.word	0x20000ea9

08007e48 <__sinit>:
 8007e48:	b510      	push	{r4, lr}
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	f7ff fff0 	bl	8007e30 <__sfp_lock_acquire>
 8007e50:	6a23      	ldr	r3, [r4, #32]
 8007e52:	b11b      	cbz	r3, 8007e5c <__sinit+0x14>
 8007e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e58:	f7ff bff0 	b.w	8007e3c <__sfp_lock_release>
 8007e5c:	4b04      	ldr	r3, [pc, #16]	; (8007e70 <__sinit+0x28>)
 8007e5e:	6223      	str	r3, [r4, #32]
 8007e60:	4b04      	ldr	r3, [pc, #16]	; (8007e74 <__sinit+0x2c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1f5      	bne.n	8007e54 <__sinit+0xc>
 8007e68:	f7ff ffc4 	bl	8007df4 <global_stdio_init.part.0>
 8007e6c:	e7f2      	b.n	8007e54 <__sinit+0xc>
 8007e6e:	bf00      	nop
 8007e70:	08007db5 	.word	0x08007db5
 8007e74:	20000ea0 	.word	0x20000ea0

08007e78 <_fwalk_sglue>:
 8007e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	4688      	mov	r8, r1
 8007e80:	4614      	mov	r4, r2
 8007e82:	2600      	movs	r6, #0
 8007e84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e88:	f1b9 0901 	subs.w	r9, r9, #1
 8007e8c:	d505      	bpl.n	8007e9a <_fwalk_sglue+0x22>
 8007e8e:	6824      	ldr	r4, [r4, #0]
 8007e90:	2c00      	cmp	r4, #0
 8007e92:	d1f7      	bne.n	8007e84 <_fwalk_sglue+0xc>
 8007e94:	4630      	mov	r0, r6
 8007e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e9a:	89ab      	ldrh	r3, [r5, #12]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d907      	bls.n	8007eb0 <_fwalk_sglue+0x38>
 8007ea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	d003      	beq.n	8007eb0 <_fwalk_sglue+0x38>
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	4638      	mov	r0, r7
 8007eac:	47c0      	blx	r8
 8007eae:	4306      	orrs	r6, r0
 8007eb0:	3568      	adds	r5, #104	; 0x68
 8007eb2:	e7e9      	b.n	8007e88 <_fwalk_sglue+0x10>

08007eb4 <_puts_r>:
 8007eb4:	6a03      	ldr	r3, [r0, #32]
 8007eb6:	b570      	push	{r4, r5, r6, lr}
 8007eb8:	6884      	ldr	r4, [r0, #8]
 8007eba:	4605      	mov	r5, r0
 8007ebc:	460e      	mov	r6, r1
 8007ebe:	b90b      	cbnz	r3, 8007ec4 <_puts_r+0x10>
 8007ec0:	f7ff ffc2 	bl	8007e48 <__sinit>
 8007ec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ec6:	07db      	lsls	r3, r3, #31
 8007ec8:	d405      	bmi.n	8007ed6 <_puts_r+0x22>
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	0598      	lsls	r0, r3, #22
 8007ece:	d402      	bmi.n	8007ed6 <_puts_r+0x22>
 8007ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ed2:	f000 f9c0 	bl	8008256 <__retarget_lock_acquire_recursive>
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	0719      	lsls	r1, r3, #28
 8007eda:	d513      	bpl.n	8007f04 <_puts_r+0x50>
 8007edc:	6923      	ldr	r3, [r4, #16]
 8007ede:	b18b      	cbz	r3, 8007f04 <_puts_r+0x50>
 8007ee0:	3e01      	subs	r6, #1
 8007ee2:	68a3      	ldr	r3, [r4, #8]
 8007ee4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	60a3      	str	r3, [r4, #8]
 8007eec:	b9e9      	cbnz	r1, 8007f2a <_puts_r+0x76>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	da2e      	bge.n	8007f50 <_puts_r+0x9c>
 8007ef2:	4622      	mov	r2, r4
 8007ef4:	210a      	movs	r1, #10
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f000 f87b 	bl	8007ff2 <__swbuf_r>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d007      	beq.n	8007f10 <_puts_r+0x5c>
 8007f00:	250a      	movs	r5, #10
 8007f02:	e007      	b.n	8007f14 <_puts_r+0x60>
 8007f04:	4621      	mov	r1, r4
 8007f06:	4628      	mov	r0, r5
 8007f08:	f000 f8b0 	bl	800806c <__swsetup_r>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d0e7      	beq.n	8007ee0 <_puts_r+0x2c>
 8007f10:	f04f 35ff 	mov.w	r5, #4294967295
 8007f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f16:	07da      	lsls	r2, r3, #31
 8007f18:	d405      	bmi.n	8007f26 <_puts_r+0x72>
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	059b      	lsls	r3, r3, #22
 8007f1e:	d402      	bmi.n	8007f26 <_puts_r+0x72>
 8007f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f22:	f000 f999 	bl	8008258 <__retarget_lock_release_recursive>
 8007f26:	4628      	mov	r0, r5
 8007f28:	bd70      	pop	{r4, r5, r6, pc}
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	da04      	bge.n	8007f38 <_puts_r+0x84>
 8007f2e:	69a2      	ldr	r2, [r4, #24]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	dc06      	bgt.n	8007f42 <_puts_r+0x8e>
 8007f34:	290a      	cmp	r1, #10
 8007f36:	d004      	beq.n	8007f42 <_puts_r+0x8e>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	6022      	str	r2, [r4, #0]
 8007f3e:	7019      	strb	r1, [r3, #0]
 8007f40:	e7cf      	b.n	8007ee2 <_puts_r+0x2e>
 8007f42:	4622      	mov	r2, r4
 8007f44:	4628      	mov	r0, r5
 8007f46:	f000 f854 	bl	8007ff2 <__swbuf_r>
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	d1c9      	bne.n	8007ee2 <_puts_r+0x2e>
 8007f4e:	e7df      	b.n	8007f10 <_puts_r+0x5c>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	250a      	movs	r5, #10
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	6022      	str	r2, [r4, #0]
 8007f58:	701d      	strb	r5, [r3, #0]
 8007f5a:	e7db      	b.n	8007f14 <_puts_r+0x60>

08007f5c <puts>:
 8007f5c:	4b02      	ldr	r3, [pc, #8]	; (8007f68 <puts+0xc>)
 8007f5e:	4601      	mov	r1, r0
 8007f60:	6818      	ldr	r0, [r3, #0]
 8007f62:	f7ff bfa7 	b.w	8007eb4 <_puts_r>
 8007f66:	bf00      	nop
 8007f68:	200001c4 	.word	0x200001c4

08007f6c <__sread>:
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	460c      	mov	r4, r1
 8007f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f74:	f000 f910 	bl	8008198 <_read_r>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	bfab      	itete	ge
 8007f7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007f80:	181b      	addge	r3, r3, r0
 8007f82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f86:	bfac      	ite	ge
 8007f88:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f8a:	81a3      	strhlt	r3, [r4, #12]
 8007f8c:	bd10      	pop	{r4, pc}

08007f8e <__swrite>:
 8007f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f92:	461f      	mov	r7, r3
 8007f94:	898b      	ldrh	r3, [r1, #12]
 8007f96:	05db      	lsls	r3, r3, #23
 8007f98:	4605      	mov	r5, r0
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	4616      	mov	r6, r2
 8007f9e:	d505      	bpl.n	8007fac <__swrite+0x1e>
 8007fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f000 f8e4 	bl	8008174 <_lseek_r>
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fb6:	81a3      	strh	r3, [r4, #12]
 8007fb8:	4632      	mov	r2, r6
 8007fba:	463b      	mov	r3, r7
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc2:	f000 b90b 	b.w	80081dc <_write_r>

08007fc6 <__sseek>:
 8007fc6:	b510      	push	{r4, lr}
 8007fc8:	460c      	mov	r4, r1
 8007fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fce:	f000 f8d1 	bl	8008174 <_lseek_r>
 8007fd2:	1c43      	adds	r3, r0, #1
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	bf15      	itete	ne
 8007fd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fe2:	81a3      	strheq	r3, [r4, #12]
 8007fe4:	bf18      	it	ne
 8007fe6:	81a3      	strhne	r3, [r4, #12]
 8007fe8:	bd10      	pop	{r4, pc}

08007fea <__sclose>:
 8007fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fee:	f000 b8b1 	b.w	8008154 <_close_r>

08007ff2 <__swbuf_r>:
 8007ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff4:	460e      	mov	r6, r1
 8007ff6:	4614      	mov	r4, r2
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	b118      	cbz	r0, 8008004 <__swbuf_r+0x12>
 8007ffc:	6a03      	ldr	r3, [r0, #32]
 8007ffe:	b90b      	cbnz	r3, 8008004 <__swbuf_r+0x12>
 8008000:	f7ff ff22 	bl	8007e48 <__sinit>
 8008004:	69a3      	ldr	r3, [r4, #24]
 8008006:	60a3      	str	r3, [r4, #8]
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	071a      	lsls	r2, r3, #28
 800800c:	d525      	bpl.n	800805a <__swbuf_r+0x68>
 800800e:	6923      	ldr	r3, [r4, #16]
 8008010:	b31b      	cbz	r3, 800805a <__swbuf_r+0x68>
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	6922      	ldr	r2, [r4, #16]
 8008016:	1a98      	subs	r0, r3, r2
 8008018:	6963      	ldr	r3, [r4, #20]
 800801a:	b2f6      	uxtb	r6, r6
 800801c:	4283      	cmp	r3, r0
 800801e:	4637      	mov	r7, r6
 8008020:	dc04      	bgt.n	800802c <__swbuf_r+0x3a>
 8008022:	4621      	mov	r1, r4
 8008024:	4628      	mov	r0, r5
 8008026:	f000 f9eb 	bl	8008400 <_fflush_r>
 800802a:	b9e0      	cbnz	r0, 8008066 <__swbuf_r+0x74>
 800802c:	68a3      	ldr	r3, [r4, #8]
 800802e:	3b01      	subs	r3, #1
 8008030:	60a3      	str	r3, [r4, #8]
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	6022      	str	r2, [r4, #0]
 8008038:	701e      	strb	r6, [r3, #0]
 800803a:	6962      	ldr	r2, [r4, #20]
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	429a      	cmp	r2, r3
 8008040:	d004      	beq.n	800804c <__swbuf_r+0x5a>
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	07db      	lsls	r3, r3, #31
 8008046:	d506      	bpl.n	8008056 <__swbuf_r+0x64>
 8008048:	2e0a      	cmp	r6, #10
 800804a:	d104      	bne.n	8008056 <__swbuf_r+0x64>
 800804c:	4621      	mov	r1, r4
 800804e:	4628      	mov	r0, r5
 8008050:	f000 f9d6 	bl	8008400 <_fflush_r>
 8008054:	b938      	cbnz	r0, 8008066 <__swbuf_r+0x74>
 8008056:	4638      	mov	r0, r7
 8008058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800805a:	4621      	mov	r1, r4
 800805c:	4628      	mov	r0, r5
 800805e:	f000 f805 	bl	800806c <__swsetup_r>
 8008062:	2800      	cmp	r0, #0
 8008064:	d0d5      	beq.n	8008012 <__swbuf_r+0x20>
 8008066:	f04f 37ff 	mov.w	r7, #4294967295
 800806a:	e7f4      	b.n	8008056 <__swbuf_r+0x64>

0800806c <__swsetup_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4b2a      	ldr	r3, [pc, #168]	; (8008118 <__swsetup_r+0xac>)
 8008070:	4605      	mov	r5, r0
 8008072:	6818      	ldr	r0, [r3, #0]
 8008074:	460c      	mov	r4, r1
 8008076:	b118      	cbz	r0, 8008080 <__swsetup_r+0x14>
 8008078:	6a03      	ldr	r3, [r0, #32]
 800807a:	b90b      	cbnz	r3, 8008080 <__swsetup_r+0x14>
 800807c:	f7ff fee4 	bl	8007e48 <__sinit>
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008086:	0718      	lsls	r0, r3, #28
 8008088:	d422      	bmi.n	80080d0 <__swsetup_r+0x64>
 800808a:	06d9      	lsls	r1, r3, #27
 800808c:	d407      	bmi.n	800809e <__swsetup_r+0x32>
 800808e:	2309      	movs	r3, #9
 8008090:	602b      	str	r3, [r5, #0]
 8008092:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	e034      	b.n	8008108 <__swsetup_r+0x9c>
 800809e:	0758      	lsls	r0, r3, #29
 80080a0:	d512      	bpl.n	80080c8 <__swsetup_r+0x5c>
 80080a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080a4:	b141      	cbz	r1, 80080b8 <__swsetup_r+0x4c>
 80080a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080aa:	4299      	cmp	r1, r3
 80080ac:	d002      	beq.n	80080b4 <__swsetup_r+0x48>
 80080ae:	4628      	mov	r0, r5
 80080b0:	f000 f8d4 	bl	800825c <_free_r>
 80080b4:	2300      	movs	r3, #0
 80080b6:	6363      	str	r3, [r4, #52]	; 0x34
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080be:	81a3      	strh	r3, [r4, #12]
 80080c0:	2300      	movs	r3, #0
 80080c2:	6063      	str	r3, [r4, #4]
 80080c4:	6923      	ldr	r3, [r4, #16]
 80080c6:	6023      	str	r3, [r4, #0]
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	f043 0308 	orr.w	r3, r3, #8
 80080ce:	81a3      	strh	r3, [r4, #12]
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	b94b      	cbnz	r3, 80080e8 <__swsetup_r+0x7c>
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080de:	d003      	beq.n	80080e8 <__swsetup_r+0x7c>
 80080e0:	4621      	mov	r1, r4
 80080e2:	4628      	mov	r0, r5
 80080e4:	f000 f9da 	bl	800849c <__smakebuf_r>
 80080e8:	89a0      	ldrh	r0, [r4, #12]
 80080ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080ee:	f010 0301 	ands.w	r3, r0, #1
 80080f2:	d00a      	beq.n	800810a <__swsetup_r+0x9e>
 80080f4:	2300      	movs	r3, #0
 80080f6:	60a3      	str	r3, [r4, #8]
 80080f8:	6963      	ldr	r3, [r4, #20]
 80080fa:	425b      	negs	r3, r3
 80080fc:	61a3      	str	r3, [r4, #24]
 80080fe:	6923      	ldr	r3, [r4, #16]
 8008100:	b943      	cbnz	r3, 8008114 <__swsetup_r+0xa8>
 8008102:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008106:	d1c4      	bne.n	8008092 <__swsetup_r+0x26>
 8008108:	bd38      	pop	{r3, r4, r5, pc}
 800810a:	0781      	lsls	r1, r0, #30
 800810c:	bf58      	it	pl
 800810e:	6963      	ldrpl	r3, [r4, #20]
 8008110:	60a3      	str	r3, [r4, #8]
 8008112:	e7f4      	b.n	80080fe <__swsetup_r+0x92>
 8008114:	2000      	movs	r0, #0
 8008116:	e7f7      	b.n	8008108 <__swsetup_r+0x9c>
 8008118:	200001c4 	.word	0x200001c4

0800811c <memset>:
 800811c:	4402      	add	r2, r0
 800811e:	4603      	mov	r3, r0
 8008120:	4293      	cmp	r3, r2
 8008122:	d100      	bne.n	8008126 <memset+0xa>
 8008124:	4770      	bx	lr
 8008126:	f803 1b01 	strb.w	r1, [r3], #1
 800812a:	e7f9      	b.n	8008120 <memset+0x4>

0800812c <strncpy>:
 800812c:	b510      	push	{r4, lr}
 800812e:	3901      	subs	r1, #1
 8008130:	4603      	mov	r3, r0
 8008132:	b132      	cbz	r2, 8008142 <strncpy+0x16>
 8008134:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008138:	f803 4b01 	strb.w	r4, [r3], #1
 800813c:	3a01      	subs	r2, #1
 800813e:	2c00      	cmp	r4, #0
 8008140:	d1f7      	bne.n	8008132 <strncpy+0x6>
 8008142:	441a      	add	r2, r3
 8008144:	2100      	movs	r1, #0
 8008146:	4293      	cmp	r3, r2
 8008148:	d100      	bne.n	800814c <strncpy+0x20>
 800814a:	bd10      	pop	{r4, pc}
 800814c:	f803 1b01 	strb.w	r1, [r3], #1
 8008150:	e7f9      	b.n	8008146 <strncpy+0x1a>
	...

08008154 <_close_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d06      	ldr	r5, [pc, #24]	; (8008170 <_close_r+0x1c>)
 8008158:	2300      	movs	r3, #0
 800815a:	4604      	mov	r4, r0
 800815c:	4608      	mov	r0, r1
 800815e:	602b      	str	r3, [r5, #0]
 8008160:	f7f8 fdd3 	bl	8000d0a <_close>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_close_r+0x1a>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	b103      	cbz	r3, 800816e <_close_r+0x1a>
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	20000ea4 	.word	0x20000ea4

08008174 <_lseek_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4d07      	ldr	r5, [pc, #28]	; (8008194 <_lseek_r+0x20>)
 8008178:	4604      	mov	r4, r0
 800817a:	4608      	mov	r0, r1
 800817c:	4611      	mov	r1, r2
 800817e:	2200      	movs	r2, #0
 8008180:	602a      	str	r2, [r5, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	f7f8 fde8 	bl	8000d58 <_lseek>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d102      	bne.n	8008192 <_lseek_r+0x1e>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	b103      	cbz	r3, 8008192 <_lseek_r+0x1e>
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	20000ea4 	.word	0x20000ea4

08008198 <_read_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d07      	ldr	r5, [pc, #28]	; (80081b8 <_read_r+0x20>)
 800819c:	4604      	mov	r4, r0
 800819e:	4608      	mov	r0, r1
 80081a0:	4611      	mov	r1, r2
 80081a2:	2200      	movs	r2, #0
 80081a4:	602a      	str	r2, [r5, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	f7f8 fd92 	bl	8000cd0 <_read>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_read_r+0x1e>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_read_r+0x1e>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	20000ea4 	.word	0x20000ea4

080081bc <_sbrk_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4d06      	ldr	r5, [pc, #24]	; (80081d8 <_sbrk_r+0x1c>)
 80081c0:	2300      	movs	r3, #0
 80081c2:	4604      	mov	r4, r0
 80081c4:	4608      	mov	r0, r1
 80081c6:	602b      	str	r3, [r5, #0]
 80081c8:	f7f8 fdd4 	bl	8000d74 <_sbrk>
 80081cc:	1c43      	adds	r3, r0, #1
 80081ce:	d102      	bne.n	80081d6 <_sbrk_r+0x1a>
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	b103      	cbz	r3, 80081d6 <_sbrk_r+0x1a>
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	20000ea4 	.word	0x20000ea4

080081dc <_write_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d07      	ldr	r5, [pc, #28]	; (80081fc <_write_r+0x20>)
 80081e0:	4604      	mov	r4, r0
 80081e2:	4608      	mov	r0, r1
 80081e4:	4611      	mov	r1, r2
 80081e6:	2200      	movs	r2, #0
 80081e8:	602a      	str	r2, [r5, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	f7f8 fc3c 	bl	8000a68 <_write>
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d102      	bne.n	80081fa <_write_r+0x1e>
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	b103      	cbz	r3, 80081fa <_write_r+0x1e>
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	20000ea4 	.word	0x20000ea4

08008200 <__errno>:
 8008200:	4b01      	ldr	r3, [pc, #4]	; (8008208 <__errno+0x8>)
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	200001c4 	.word	0x200001c4

0800820c <__libc_init_array>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	4d0d      	ldr	r5, [pc, #52]	; (8008244 <__libc_init_array+0x38>)
 8008210:	4c0d      	ldr	r4, [pc, #52]	; (8008248 <__libc_init_array+0x3c>)
 8008212:	1b64      	subs	r4, r4, r5
 8008214:	10a4      	asrs	r4, r4, #2
 8008216:	2600      	movs	r6, #0
 8008218:	42a6      	cmp	r6, r4
 800821a:	d109      	bne.n	8008230 <__libc_init_array+0x24>
 800821c:	4d0b      	ldr	r5, [pc, #44]	; (800824c <__libc_init_array+0x40>)
 800821e:	4c0c      	ldr	r4, [pc, #48]	; (8008250 <__libc_init_array+0x44>)
 8008220:	f000 f99a 	bl	8008558 <_init>
 8008224:	1b64      	subs	r4, r4, r5
 8008226:	10a4      	asrs	r4, r4, #2
 8008228:	2600      	movs	r6, #0
 800822a:	42a6      	cmp	r6, r4
 800822c:	d105      	bne.n	800823a <__libc_init_array+0x2e>
 800822e:	bd70      	pop	{r4, r5, r6, pc}
 8008230:	f855 3b04 	ldr.w	r3, [r5], #4
 8008234:	4798      	blx	r3
 8008236:	3601      	adds	r6, #1
 8008238:	e7ee      	b.n	8008218 <__libc_init_array+0xc>
 800823a:	f855 3b04 	ldr.w	r3, [r5], #4
 800823e:	4798      	blx	r3
 8008240:	3601      	adds	r6, #1
 8008242:	e7f2      	b.n	800822a <__libc_init_array+0x1e>
 8008244:	080086c4 	.word	0x080086c4
 8008248:	080086c4 	.word	0x080086c4
 800824c:	080086c4 	.word	0x080086c4
 8008250:	080086c8 	.word	0x080086c8

08008254 <__retarget_lock_init_recursive>:
 8008254:	4770      	bx	lr

08008256 <__retarget_lock_acquire_recursive>:
 8008256:	4770      	bx	lr

08008258 <__retarget_lock_release_recursive>:
 8008258:	4770      	bx	lr
	...

0800825c <_free_r>:
 800825c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800825e:	2900      	cmp	r1, #0
 8008260:	d044      	beq.n	80082ec <_free_r+0x90>
 8008262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008266:	9001      	str	r0, [sp, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	f1a1 0404 	sub.w	r4, r1, #4
 800826e:	bfb8      	it	lt
 8008270:	18e4      	addlt	r4, r4, r3
 8008272:	f7ff fd51 	bl	8007d18 <__malloc_lock>
 8008276:	4a1e      	ldr	r2, [pc, #120]	; (80082f0 <_free_r+0x94>)
 8008278:	9801      	ldr	r0, [sp, #4]
 800827a:	6813      	ldr	r3, [r2, #0]
 800827c:	b933      	cbnz	r3, 800828c <_free_r+0x30>
 800827e:	6063      	str	r3, [r4, #4]
 8008280:	6014      	str	r4, [r2, #0]
 8008282:	b003      	add	sp, #12
 8008284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008288:	f7ff bd4c 	b.w	8007d24 <__malloc_unlock>
 800828c:	42a3      	cmp	r3, r4
 800828e:	d908      	bls.n	80082a2 <_free_r+0x46>
 8008290:	6825      	ldr	r5, [r4, #0]
 8008292:	1961      	adds	r1, r4, r5
 8008294:	428b      	cmp	r3, r1
 8008296:	bf01      	itttt	eq
 8008298:	6819      	ldreq	r1, [r3, #0]
 800829a:	685b      	ldreq	r3, [r3, #4]
 800829c:	1949      	addeq	r1, r1, r5
 800829e:	6021      	streq	r1, [r4, #0]
 80082a0:	e7ed      	b.n	800827e <_free_r+0x22>
 80082a2:	461a      	mov	r2, r3
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	b10b      	cbz	r3, 80082ac <_free_r+0x50>
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	d9fa      	bls.n	80082a2 <_free_r+0x46>
 80082ac:	6811      	ldr	r1, [r2, #0]
 80082ae:	1855      	adds	r5, r2, r1
 80082b0:	42a5      	cmp	r5, r4
 80082b2:	d10b      	bne.n	80082cc <_free_r+0x70>
 80082b4:	6824      	ldr	r4, [r4, #0]
 80082b6:	4421      	add	r1, r4
 80082b8:	1854      	adds	r4, r2, r1
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	6011      	str	r1, [r2, #0]
 80082be:	d1e0      	bne.n	8008282 <_free_r+0x26>
 80082c0:	681c      	ldr	r4, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	6053      	str	r3, [r2, #4]
 80082c6:	440c      	add	r4, r1
 80082c8:	6014      	str	r4, [r2, #0]
 80082ca:	e7da      	b.n	8008282 <_free_r+0x26>
 80082cc:	d902      	bls.n	80082d4 <_free_r+0x78>
 80082ce:	230c      	movs	r3, #12
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	e7d6      	b.n	8008282 <_free_r+0x26>
 80082d4:	6825      	ldr	r5, [r4, #0]
 80082d6:	1961      	adds	r1, r4, r5
 80082d8:	428b      	cmp	r3, r1
 80082da:	bf04      	itt	eq
 80082dc:	6819      	ldreq	r1, [r3, #0]
 80082de:	685b      	ldreq	r3, [r3, #4]
 80082e0:	6063      	str	r3, [r4, #4]
 80082e2:	bf04      	itt	eq
 80082e4:	1949      	addeq	r1, r1, r5
 80082e6:	6021      	streq	r1, [r4, #0]
 80082e8:	6054      	str	r4, [r2, #4]
 80082ea:	e7ca      	b.n	8008282 <_free_r+0x26>
 80082ec:	b003      	add	sp, #12
 80082ee:	bd30      	pop	{r4, r5, pc}
 80082f0:	20000d60 	.word	0x20000d60

080082f4 <__sflush_r>:
 80082f4:	898a      	ldrh	r2, [r1, #12]
 80082f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082fa:	4605      	mov	r5, r0
 80082fc:	0710      	lsls	r0, r2, #28
 80082fe:	460c      	mov	r4, r1
 8008300:	d458      	bmi.n	80083b4 <__sflush_r+0xc0>
 8008302:	684b      	ldr	r3, [r1, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	dc05      	bgt.n	8008314 <__sflush_r+0x20>
 8008308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800830a:	2b00      	cmp	r3, #0
 800830c:	dc02      	bgt.n	8008314 <__sflush_r+0x20>
 800830e:	2000      	movs	r0, #0
 8008310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008316:	2e00      	cmp	r6, #0
 8008318:	d0f9      	beq.n	800830e <__sflush_r+0x1a>
 800831a:	2300      	movs	r3, #0
 800831c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008320:	682f      	ldr	r7, [r5, #0]
 8008322:	6a21      	ldr	r1, [r4, #32]
 8008324:	602b      	str	r3, [r5, #0]
 8008326:	d032      	beq.n	800838e <__sflush_r+0x9a>
 8008328:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	075a      	lsls	r2, r3, #29
 800832e:	d505      	bpl.n	800833c <__sflush_r+0x48>
 8008330:	6863      	ldr	r3, [r4, #4]
 8008332:	1ac0      	subs	r0, r0, r3
 8008334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008336:	b10b      	cbz	r3, 800833c <__sflush_r+0x48>
 8008338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800833a:	1ac0      	subs	r0, r0, r3
 800833c:	2300      	movs	r3, #0
 800833e:	4602      	mov	r2, r0
 8008340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008342:	6a21      	ldr	r1, [r4, #32]
 8008344:	4628      	mov	r0, r5
 8008346:	47b0      	blx	r6
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	d106      	bne.n	800835c <__sflush_r+0x68>
 800834e:	6829      	ldr	r1, [r5, #0]
 8008350:	291d      	cmp	r1, #29
 8008352:	d82b      	bhi.n	80083ac <__sflush_r+0xb8>
 8008354:	4a29      	ldr	r2, [pc, #164]	; (80083fc <__sflush_r+0x108>)
 8008356:	410a      	asrs	r2, r1
 8008358:	07d6      	lsls	r6, r2, #31
 800835a:	d427      	bmi.n	80083ac <__sflush_r+0xb8>
 800835c:	2200      	movs	r2, #0
 800835e:	6062      	str	r2, [r4, #4]
 8008360:	04d9      	lsls	r1, r3, #19
 8008362:	6922      	ldr	r2, [r4, #16]
 8008364:	6022      	str	r2, [r4, #0]
 8008366:	d504      	bpl.n	8008372 <__sflush_r+0x7e>
 8008368:	1c42      	adds	r2, r0, #1
 800836a:	d101      	bne.n	8008370 <__sflush_r+0x7c>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b903      	cbnz	r3, 8008372 <__sflush_r+0x7e>
 8008370:	6560      	str	r0, [r4, #84]	; 0x54
 8008372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008374:	602f      	str	r7, [r5, #0]
 8008376:	2900      	cmp	r1, #0
 8008378:	d0c9      	beq.n	800830e <__sflush_r+0x1a>
 800837a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800837e:	4299      	cmp	r1, r3
 8008380:	d002      	beq.n	8008388 <__sflush_r+0x94>
 8008382:	4628      	mov	r0, r5
 8008384:	f7ff ff6a 	bl	800825c <_free_r>
 8008388:	2000      	movs	r0, #0
 800838a:	6360      	str	r0, [r4, #52]	; 0x34
 800838c:	e7c0      	b.n	8008310 <__sflush_r+0x1c>
 800838e:	2301      	movs	r3, #1
 8008390:	4628      	mov	r0, r5
 8008392:	47b0      	blx	r6
 8008394:	1c41      	adds	r1, r0, #1
 8008396:	d1c8      	bne.n	800832a <__sflush_r+0x36>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0c5      	beq.n	800832a <__sflush_r+0x36>
 800839e:	2b1d      	cmp	r3, #29
 80083a0:	d001      	beq.n	80083a6 <__sflush_r+0xb2>
 80083a2:	2b16      	cmp	r3, #22
 80083a4:	d101      	bne.n	80083aa <__sflush_r+0xb6>
 80083a6:	602f      	str	r7, [r5, #0]
 80083a8:	e7b1      	b.n	800830e <__sflush_r+0x1a>
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b0:	81a3      	strh	r3, [r4, #12]
 80083b2:	e7ad      	b.n	8008310 <__sflush_r+0x1c>
 80083b4:	690f      	ldr	r7, [r1, #16]
 80083b6:	2f00      	cmp	r7, #0
 80083b8:	d0a9      	beq.n	800830e <__sflush_r+0x1a>
 80083ba:	0793      	lsls	r3, r2, #30
 80083bc:	680e      	ldr	r6, [r1, #0]
 80083be:	bf08      	it	eq
 80083c0:	694b      	ldreq	r3, [r1, #20]
 80083c2:	600f      	str	r7, [r1, #0]
 80083c4:	bf18      	it	ne
 80083c6:	2300      	movne	r3, #0
 80083c8:	eba6 0807 	sub.w	r8, r6, r7
 80083cc:	608b      	str	r3, [r1, #8]
 80083ce:	f1b8 0f00 	cmp.w	r8, #0
 80083d2:	dd9c      	ble.n	800830e <__sflush_r+0x1a>
 80083d4:	6a21      	ldr	r1, [r4, #32]
 80083d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083d8:	4643      	mov	r3, r8
 80083da:	463a      	mov	r2, r7
 80083dc:	4628      	mov	r0, r5
 80083de:	47b0      	blx	r6
 80083e0:	2800      	cmp	r0, #0
 80083e2:	dc06      	bgt.n	80083f2 <__sflush_r+0xfe>
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	e78e      	b.n	8008310 <__sflush_r+0x1c>
 80083f2:	4407      	add	r7, r0
 80083f4:	eba8 0800 	sub.w	r8, r8, r0
 80083f8:	e7e9      	b.n	80083ce <__sflush_r+0xda>
 80083fa:	bf00      	nop
 80083fc:	dfbffffe 	.word	0xdfbffffe

08008400 <_fflush_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	690b      	ldr	r3, [r1, #16]
 8008404:	4605      	mov	r5, r0
 8008406:	460c      	mov	r4, r1
 8008408:	b913      	cbnz	r3, 8008410 <_fflush_r+0x10>
 800840a:	2500      	movs	r5, #0
 800840c:	4628      	mov	r0, r5
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	b118      	cbz	r0, 800841a <_fflush_r+0x1a>
 8008412:	6a03      	ldr	r3, [r0, #32]
 8008414:	b90b      	cbnz	r3, 800841a <_fflush_r+0x1a>
 8008416:	f7ff fd17 	bl	8007e48 <__sinit>
 800841a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0f3      	beq.n	800840a <_fflush_r+0xa>
 8008422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008424:	07d0      	lsls	r0, r2, #31
 8008426:	d404      	bmi.n	8008432 <_fflush_r+0x32>
 8008428:	0599      	lsls	r1, r3, #22
 800842a:	d402      	bmi.n	8008432 <_fflush_r+0x32>
 800842c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800842e:	f7ff ff12 	bl	8008256 <__retarget_lock_acquire_recursive>
 8008432:	4628      	mov	r0, r5
 8008434:	4621      	mov	r1, r4
 8008436:	f7ff ff5d 	bl	80082f4 <__sflush_r>
 800843a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800843c:	07da      	lsls	r2, r3, #31
 800843e:	4605      	mov	r5, r0
 8008440:	d4e4      	bmi.n	800840c <_fflush_r+0xc>
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	059b      	lsls	r3, r3, #22
 8008446:	d4e1      	bmi.n	800840c <_fflush_r+0xc>
 8008448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800844a:	f7ff ff05 	bl	8008258 <__retarget_lock_release_recursive>
 800844e:	e7dd      	b.n	800840c <_fflush_r+0xc>

08008450 <__swhatbuf_r>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	460c      	mov	r4, r1
 8008454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008458:	2900      	cmp	r1, #0
 800845a:	b096      	sub	sp, #88	; 0x58
 800845c:	4615      	mov	r5, r2
 800845e:	461e      	mov	r6, r3
 8008460:	da0d      	bge.n	800847e <__swhatbuf_r+0x2e>
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008468:	f04f 0100 	mov.w	r1, #0
 800846c:	bf0c      	ite	eq
 800846e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008472:	2340      	movne	r3, #64	; 0x40
 8008474:	2000      	movs	r0, #0
 8008476:	6031      	str	r1, [r6, #0]
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	b016      	add	sp, #88	; 0x58
 800847c:	bd70      	pop	{r4, r5, r6, pc}
 800847e:	466a      	mov	r2, sp
 8008480:	f000 f848 	bl	8008514 <_fstat_r>
 8008484:	2800      	cmp	r0, #0
 8008486:	dbec      	blt.n	8008462 <__swhatbuf_r+0x12>
 8008488:	9901      	ldr	r1, [sp, #4]
 800848a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800848e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008492:	4259      	negs	r1, r3
 8008494:	4159      	adcs	r1, r3
 8008496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800849a:	e7eb      	b.n	8008474 <__swhatbuf_r+0x24>

0800849c <__smakebuf_r>:
 800849c:	898b      	ldrh	r3, [r1, #12]
 800849e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084a0:	079d      	lsls	r5, r3, #30
 80084a2:	4606      	mov	r6, r0
 80084a4:	460c      	mov	r4, r1
 80084a6:	d507      	bpl.n	80084b8 <__smakebuf_r+0x1c>
 80084a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	6123      	str	r3, [r4, #16]
 80084b0:	2301      	movs	r3, #1
 80084b2:	6163      	str	r3, [r4, #20]
 80084b4:	b002      	add	sp, #8
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	ab01      	add	r3, sp, #4
 80084ba:	466a      	mov	r2, sp
 80084bc:	f7ff ffc8 	bl	8008450 <__swhatbuf_r>
 80084c0:	9900      	ldr	r1, [sp, #0]
 80084c2:	4605      	mov	r5, r0
 80084c4:	4630      	mov	r0, r6
 80084c6:	f7ff fba7 	bl	8007c18 <_malloc_r>
 80084ca:	b948      	cbnz	r0, 80084e0 <__smakebuf_r+0x44>
 80084cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d0:	059a      	lsls	r2, r3, #22
 80084d2:	d4ef      	bmi.n	80084b4 <__smakebuf_r+0x18>
 80084d4:	f023 0303 	bic.w	r3, r3, #3
 80084d8:	f043 0302 	orr.w	r3, r3, #2
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	e7e3      	b.n	80084a8 <__smakebuf_r+0xc>
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	6020      	str	r0, [r4, #0]
 80084e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e8:	81a3      	strh	r3, [r4, #12]
 80084ea:	9b00      	ldr	r3, [sp, #0]
 80084ec:	6163      	str	r3, [r4, #20]
 80084ee:	9b01      	ldr	r3, [sp, #4]
 80084f0:	6120      	str	r0, [r4, #16]
 80084f2:	b15b      	cbz	r3, 800850c <__smakebuf_r+0x70>
 80084f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084f8:	4630      	mov	r0, r6
 80084fa:	f000 f81d 	bl	8008538 <_isatty_r>
 80084fe:	b128      	cbz	r0, 800850c <__smakebuf_r+0x70>
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	f023 0303 	bic.w	r3, r3, #3
 8008506:	f043 0301 	orr.w	r3, r3, #1
 800850a:	81a3      	strh	r3, [r4, #12]
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	431d      	orrs	r5, r3
 8008510:	81a5      	strh	r5, [r4, #12]
 8008512:	e7cf      	b.n	80084b4 <__smakebuf_r+0x18>

08008514 <_fstat_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4d07      	ldr	r5, [pc, #28]	; (8008534 <_fstat_r+0x20>)
 8008518:	2300      	movs	r3, #0
 800851a:	4604      	mov	r4, r0
 800851c:	4608      	mov	r0, r1
 800851e:	4611      	mov	r1, r2
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	f7f8 fbfe 	bl	8000d22 <_fstat>
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	d102      	bne.n	8008530 <_fstat_r+0x1c>
 800852a:	682b      	ldr	r3, [r5, #0]
 800852c:	b103      	cbz	r3, 8008530 <_fstat_r+0x1c>
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	bd38      	pop	{r3, r4, r5, pc}
 8008532:	bf00      	nop
 8008534:	20000ea4 	.word	0x20000ea4

08008538 <_isatty_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4d06      	ldr	r5, [pc, #24]	; (8008554 <_isatty_r+0x1c>)
 800853c:	2300      	movs	r3, #0
 800853e:	4604      	mov	r4, r0
 8008540:	4608      	mov	r0, r1
 8008542:	602b      	str	r3, [r5, #0]
 8008544:	f7f8 fbfd 	bl	8000d42 <_isatty>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_isatty_r+0x1a>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	b103      	cbz	r3, 8008552 <_isatty_r+0x1a>
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	20000ea4 	.word	0x20000ea4

08008558 <_init>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr

08008564 <_fini>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr
