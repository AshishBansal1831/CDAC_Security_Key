
Security_Key.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007134  08007134  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08007134  08007134  00017134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800713c  0800713c  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800713c  0800713c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007140  08007140  00017140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08007144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00000a8c  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bd8  20000bd8  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011288  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002fa3  00000000  00000000  00031447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dc0  00000000  00000000  000343f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a54  00000000  00000000  000351b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005139  00000000  00000000  00035c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001329f  00000000  00000000  0003ad3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c7e57  00000000  00000000  0004dfdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003758  00000000  00000000  00115e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0011958c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000014c 	.word	0x2000014c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080070b0 	.word	0x080070b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000150 	.word	0x20000150
 80001c4:	080070b0 	.word	0x080070b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b092      	sub	sp, #72	; 0x48
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char hid_report[REPORT_BUF_SIZE];
	for(uint8_t i=1; i<sizeof(hid_report); ++i)
 80004ca:	2301      	movs	r3, #1
 80004cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80004d0:	e00c      	b.n	80004ec <main+0x28>
	{
		hid_report[i] = i;
 80004d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80004d6:	3348      	adds	r3, #72	; 0x48
 80004d8:	443b      	add	r3, r7
 80004da:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80004de:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(uint8_t i=1; i<sizeof(hid_report); ++i)
 80004e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80004e6:	3301      	adds	r3, #1
 80004e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80004ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80004f0:	2b3f      	cmp	r3, #63	; 0x3f
 80004f2:	d9ee      	bls.n	80004d2 <main+0xe>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fa44 	bl	8000980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f83a 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8cc 	bl	8000698 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000500:	f006 f926 	bl	8006750 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000504:	f000 f89e 	bl	8000644 <MX_UART4_Init>
  MX_MBEDTLS_Init();
 8000508:	f004 fa87 	bl	8004a1a <MX_MBEDTLS_Init>
  while (1)
  {
//	  Operations[operation]();

//	  report_buffer[1] = 0;
	  HAL_Delay(2000);
 800050c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000510:	f000 faa8 	bl	8000a64 <HAL_Delay>
	 // ... fill other bytes as needed

	 // Send the report to the host
//	 send_report((uint8_t*)hid_report, sizeof(hid_report));

	  if(operation == 0x01)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <main+0x9c>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d114      	bne.n	8000546 <main+0x82>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800051c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000520:	4810      	ldr	r0, [pc, #64]	; (8000564 <main+0xa0>)
 8000522:	f000 fd8a 	bl	800103a <HAL_GPIO_TogglePin>
		  if(strncmp((char*)report_buffer, "Ashish Bansal", 13) == 0)
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <main+0xa4>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	220d      	movs	r2, #13
 800052c:	490f      	ldr	r1, [pc, #60]	; (800056c <main+0xa8>)
 800052e:	4618      	mov	r0, r3
 8000530:	f006 fd88 	bl	8007044 <strncmp>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d10e      	bne.n	8000558 <main+0x94>
		  {
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800053a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053e:	4809      	ldr	r0, [pc, #36]	; (8000564 <main+0xa0>)
 8000540:	f000 fd7b 	bl	800103a <HAL_GPIO_TogglePin>
 8000544:	e008      	b.n	8000558 <main+0x94>
		  }
	  }
	  else if(operation == 'B')
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <main+0x9c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b42      	cmp	r3, #66	; 0x42
 800054c:	d104      	bne.n	8000558 <main+0x94>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800054e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <main+0xa0>)
 8000554:	f000 fd71 	bl	800103a <HAL_GPIO_TogglePin>
	  }
	  operation = NO_ACTION;
 8000558:	4b01      	ldr	r3, [pc, #4]	; (8000560 <main+0x9c>)
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(2000);
 800055e:	e7d5      	b.n	800050c <main+0x48>
 8000560:	200001b4 	.word	0x200001b4
 8000564:	40020c00 	.word	0x40020c00
 8000568:	200001b0 	.word	0x200001b0
 800056c:	080070c8 	.word	0x080070c8

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f006 fd58 	bl	8007034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b28      	ldr	r3, [pc, #160]	; (800063c <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a27      	ldr	r2, [pc, #156]	; (800063c <SystemClock_Config+0xcc>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <SystemClock_Config+0xd0>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005e4:	23a8      	movs	r3, #168	; 0xa8
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ec:	2307      	movs	r3, #7
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 ff73 	bl	80024e0 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000600:	f000 f8b8 	bl	8000774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000610:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2105      	movs	r1, #5
 8000622:	4618      	mov	r0, r3
 8000624:	f002 f9d4 	bl	80029d0 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800062e:	f000 f8a1 	bl	8000774 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_UART4_Init+0x4c>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_UART4_Init+0x50>)
 800064c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_UART4_Init+0x4c>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_UART4_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_UART4_Init+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_UART4_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_UART4_Init+0x4c>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_UART4_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_UART4_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_UART4_Init+0x4c>)
 800067c:	f002 fbc8 	bl	8002e10 <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000686:	f000 f875 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000168 	.word	0x20000168
 8000694:	40004c00 	.word	0x40004c00

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a2c      	ldr	r2, [pc, #176]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a25      	ldr	r2, [pc, #148]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b23      	ldr	r3, [pc, #140]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <MX_GPIO_Init+0xd0>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000724:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_GPIO_Init+0xd4>)
 8000726:	f000 fc6f 	bl	8001008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800072a:	2301      	movs	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <MX_GPIO_Init+0xd8>)
 800073e:	f000 fac7 	bl	8000cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000742:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_GPIO_Init+0xd4>)
 800075c:	f000 fab8 	bl	8000cd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40020c00 	.word	0x40020c00
 8000770:	40020000 	.word	0x40020000

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077c:	e7fe      	b.n	800077c <Error_Handler+0x8>
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <HAL_MspInit+0x4c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6453      	str	r3, [r2, #68]	; 0x44
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a28      	ldr	r2, [pc, #160]	; (8000890 <HAL_UART_MspInit+0xc0>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d14a      	bne.n	8000888 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <HAL_UART_MspInit+0xc4>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a26      	ldr	r2, [pc, #152]	; (8000894 <HAL_UART_MspInit+0xc4>)
 80007fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b24      	ldr	r3, [pc, #144]	; (8000894 <HAL_UART_MspInit+0xc4>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <HAL_UART_MspInit+0xc4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <HAL_UART_MspInit+0xc4>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <HAL_UART_MspInit+0xc4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <HAL_UART_MspInit+0xc4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a18      	ldr	r2, [pc, #96]	; (8000894 <HAL_UART_MspInit+0xc4>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <HAL_UART_MspInit+0xc4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000846:	2302      	movs	r3, #2
 8000848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000856:	2308      	movs	r3, #8
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <HAL_UART_MspInit+0xc8>)
 8000862:	f000 fa35 	bl	8000cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000878:	2308      	movs	r3, #8
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <HAL_UART_MspInit+0xcc>)
 8000884:	f000 fa24 	bl	8000cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40004c00 	.word	0x40004c00
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000
 800089c:	40020800 	.word	0x40020800

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f89a 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <OTG_FS_IRQHandler+0x10>)
 80008fa:	f000 fcfc 	bl	80012f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000069c 	.word	0x2000069c

08000908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000964 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000930:	f7ff ffea 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	; (800096c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	; (8000978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095a:	f006 fb85 	bl	8007068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095e:	f7ff fdb1 	bl	80004c4 <main>
  bx  lr    
 8000962:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000970:	08007144 	.word	0x08007144
  ldr r2, =_sbss
 8000974:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000978:	20000bd8 	.word	0x20000bd8

0800097c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>
	...

08000980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <HAL_Init+0x40>)
 800098a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_Init+0x40>)
 8000996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <HAL_Init+0x40>)
 80009a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f94f 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	200f      	movs	r0, #15
 80009b0:	f000 f808 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff fee4 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023c00 	.word	0x40023c00

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f967 	bl	8000cb6 <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f000 f92f 	bl	8000c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x20>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x24>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_IncTick+0x24>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	200001b8 	.word	0x200001b8

08000a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_GetTick+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	200001b8 	.word	0x200001b8

08000a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a6c:	f7ff ffee 	bl	8000a4c <HAL_GetTick>
 8000a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7c:	d005      	beq.n	8000a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_Delay+0x44>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a8a:	bf00      	nop
 8000a8c:	f7ff ffde 	bl	8000a4c <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d8f7      	bhi.n	8000a8c <HAL_Delay+0x28>
  {
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0b      	blt.n	8000b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4907      	ldr	r1, [pc, #28]	; (8000b48 <__NVIC_EnableIRQ+0x38>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	; (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	; (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	; 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c18:	d301      	bcc.n	8000c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00f      	b.n	8000c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <SysTick_Config+0x40>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c26:	210f      	movs	r1, #15
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f7ff ff8e 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SysTick_Config+0x40>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SysTick_Config+0x40>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff29 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c74:	f7ff ff3e 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	6978      	ldr	r0, [r7, #20]
 8000c80:	f7ff ff8e 	bl	8000ba0 <NVIC_EncodePriority>
 8000c84:	4602      	mov	r2, r0
 8000c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff5d 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff31 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffa2 	bl	8000c08 <SysTick_Config>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	e16b      	b.n	8000fc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cec:	2201      	movs	r2, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	f040 815a 	bne.w	8000fbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d005      	beq.n	8000d22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d130      	bne.n	8000d84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4013      	ands	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	68da      	ldr	r2, [r3, #12]
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	091b      	lsrs	r3, r3, #4
 8000d6e:	f003 0201 	and.w	r2, r3, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d017      	beq.n	8000dc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d123      	bne.n	8000e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	08da      	lsrs	r2, r3, #3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	220f      	movs	r2, #15
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	691a      	ldr	r2, [r3, #16]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	08da      	lsrs	r2, r3, #3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3208      	adds	r2, #8
 8000e0e:	69b9      	ldr	r1, [r7, #24]
 8000e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0203 	and.w	r2, r3, #3
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 80b4 	beq.w	8000fbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b60      	ldr	r3, [pc, #384]	; (8000fdc <HAL_GPIO_Init+0x30c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a5f      	ldr	r2, [pc, #380]	; (8000fdc <HAL_GPIO_Init+0x30c>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b5d      	ldr	r3, [pc, #372]	; (8000fdc <HAL_GPIO_Init+0x30c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e72:	4a5b      	ldr	r2, [pc, #364]	; (8000fe0 <HAL_GPIO_Init+0x310>)
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	220f      	movs	r2, #15
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a52      	ldr	r2, [pc, #328]	; (8000fe4 <HAL_GPIO_Init+0x314>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d02b      	beq.n	8000ef6 <HAL_GPIO_Init+0x226>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a51      	ldr	r2, [pc, #324]	; (8000fe8 <HAL_GPIO_Init+0x318>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d025      	beq.n	8000ef2 <HAL_GPIO_Init+0x222>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a50      	ldr	r2, [pc, #320]	; (8000fec <HAL_GPIO_Init+0x31c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d01f      	beq.n	8000eee <HAL_GPIO_Init+0x21e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_GPIO_Init+0x320>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d019      	beq.n	8000eea <HAL_GPIO_Init+0x21a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4e      	ldr	r2, [pc, #312]	; (8000ff4 <HAL_GPIO_Init+0x324>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d013      	beq.n	8000ee6 <HAL_GPIO_Init+0x216>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4d      	ldr	r2, [pc, #308]	; (8000ff8 <HAL_GPIO_Init+0x328>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d00d      	beq.n	8000ee2 <HAL_GPIO_Init+0x212>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4c      	ldr	r2, [pc, #304]	; (8000ffc <HAL_GPIO_Init+0x32c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d007      	beq.n	8000ede <HAL_GPIO_Init+0x20e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4b      	ldr	r2, [pc, #300]	; (8001000 <HAL_GPIO_Init+0x330>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d101      	bne.n	8000eda <HAL_GPIO_Init+0x20a>
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	e00e      	b.n	8000ef8 <HAL_GPIO_Init+0x228>
 8000eda:	2308      	movs	r3, #8
 8000edc:	e00c      	b.n	8000ef8 <HAL_GPIO_Init+0x228>
 8000ede:	2306      	movs	r3, #6
 8000ee0:	e00a      	b.n	8000ef8 <HAL_GPIO_Init+0x228>
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	e008      	b.n	8000ef8 <HAL_GPIO_Init+0x228>
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	e006      	b.n	8000ef8 <HAL_GPIO_Init+0x228>
 8000eea:	2303      	movs	r3, #3
 8000eec:	e004      	b.n	8000ef8 <HAL_GPIO_Init+0x228>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e002      	b.n	8000ef8 <HAL_GPIO_Init+0x228>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <HAL_GPIO_Init+0x228>
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	69fa      	ldr	r2, [r7, #28]
 8000efa:	f002 0203 	and.w	r2, r2, #3
 8000efe:	0092      	lsls	r2, r2, #2
 8000f00:	4093      	lsls	r3, r2
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f08:	4935      	ldr	r1, [pc, #212]	; (8000fe0 <HAL_GPIO_Init+0x310>)
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f16:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <HAL_GPIO_Init+0x334>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f3a:	4a32      	ldr	r2, [pc, #200]	; (8001004 <HAL_GPIO_Init+0x334>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <HAL_GPIO_Init+0x334>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f64:	4a27      	ldr	r2, [pc, #156]	; (8001004 <HAL_GPIO_Init+0x334>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <HAL_GPIO_Init+0x334>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f8e:	4a1d      	ldr	r2, [pc, #116]	; (8001004 <HAL_GPIO_Init+0x334>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_GPIO_Init+0x334>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fb8:	4a12      	ldr	r2, [pc, #72]	; (8001004 <HAL_GPIO_Init+0x334>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	2b0f      	cmp	r3, #15
 8000fc8:	f67f ae90 	bls.w	8000cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40013800 	.word	0x40013800
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	40020800 	.word	0x40020800
 8000ff0:	40020c00 	.word	0x40020c00
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40021400 	.word	0x40021400
 8000ffc:	40021800 	.word	0x40021800
 8001000:	40021c00 	.word	0x40021c00
 8001004:	40013c00 	.word	0x40013c00

08001008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
 8001014:	4613      	mov	r3, r2
 8001016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001018:	787b      	ldrb	r3, [r7, #1]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001024:	e003      	b.n	800102e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	041a      	lsls	r2, r3, #16
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	619a      	str	r2, [r3, #24]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800103a:	b480      	push	{r7}
 800103c:	b085      	sub	sp, #20
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800104c:	887a      	ldrh	r2, [r7, #2]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4013      	ands	r3, r2
 8001052:	041a      	lsls	r2, r3, #16
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43d9      	mvns	r1, r3
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	400b      	ands	r3, r1
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	619a      	str	r2, [r3, #24]
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af02      	add	r7, sp, #8
 8001074:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e101      	b.n	8001284 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d106      	bne.n	80010a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f005 fcc8 	bl	8006a30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2203      	movs	r2, #3
 80010a4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ae:	d102      	bne.n	80010b6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 fa83 	bl	80035c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7c1a      	ldrb	r2, [r3, #16]
 80010c8:	f88d 2000 	strb.w	r2, [sp]
 80010cc:	3304      	adds	r3, #4
 80010ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d0:	f002 f962 	bl	8003398 <USB_CoreInit>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2202      	movs	r2, #2
 80010de:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e0ce      	b.n	8001284 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fa7b 	bl	80035e8 <USB_SetCurrentMode>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2202      	movs	r2, #2
 80010fc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e0bf      	b.n	8001284 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e04a      	b.n	80011a0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4413      	add	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	3315      	adds	r3, #21
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	3314      	adds	r3, #20
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	b298      	uxth	r0, r3
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	332e      	adds	r3, #46	; 0x2e
 8001146:	4602      	mov	r2, r0
 8001148:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	3318      	adds	r3, #24
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	331c      	adds	r3, #28
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	3320      	adds	r3, #32
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4413      	add	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	3324      	adds	r3, #36	; 0x24
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	3301      	adds	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	791b      	ldrb	r3, [r3, #4]
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d3af      	bcc.n	800110a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	e044      	b.n	800123a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	f203 2355 	addw	r3, r3, #597	; 0x255
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011c6:	7bfa      	ldrb	r2, [r7, #15]
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	440b      	add	r3, r1
 80011d4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	3301      	adds	r3, #1
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	791b      	ldrb	r3, [r3, #4]
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	429a      	cmp	r2, r3
 8001242:	d3b5      	bcc.n	80011b0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7c1a      	ldrb	r2, [r3, #16]
 800124c:	f88d 2000 	strb.w	r2, [sp]
 8001250:	3304      	adds	r3, #4
 8001252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001254:	f002 fa14 	bl	8003680 <USB_DevInit>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2202      	movs	r2, #2
 8001262:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00c      	b.n	8001284 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f003 fa58 	bl	8004732 <USB_DevDisconnect>

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_PCD_Start+0x1c>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e022      	b.n	80012ee <HAL_PCD_Start+0x62>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d009      	beq.n	80012d0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d105      	bne.n	80012d0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 f965 	bl	80035a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fa06 	bl	80046f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012f6:	b590      	push	{r4, r7, lr}
 80012f8:	b08d      	sub	sp, #52	; 0x34
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f003 fac4 	bl	800489a <USB_GetMode>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	f040 848c 	bne.w	8001c32 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fa28 	bl	8004774 <USB_ReadInterrupts>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8482 	beq.w	8001c30 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f003 fa15 	bl	8004774 <USB_ReadInterrupts>
 800134a:	4603      	mov	r3, r0
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b02      	cmp	r3, #2
 8001352:	d107      	bne.n	8001364 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695a      	ldr	r2, [r3, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f002 0202 	and.w	r2, r2, #2
 8001362:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f003 fa03 	bl	8004774 <USB_ReadInterrupts>
 800136e:	4603      	mov	r3, r0
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	2b10      	cmp	r3, #16
 8001376:	d161      	bne.n	800143c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	699a      	ldr	r2, [r3, #24]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0210 	bic.w	r2, r2, #16
 8001386:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	f003 020f 	and.w	r2, r3, #15
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	3304      	adds	r3, #4
 80013a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	0c5b      	lsrs	r3, r3, #17
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d124      	bne.n	80013fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d035      	beq.n	800142c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	6a38      	ldr	r0, [r7, #32]
 80013d4:	f003 f83a 	bl	800444c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013e4:	441a      	add	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f6:	441a      	add	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	e016      	b.n	800142c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	0c5b      	lsrs	r3, r3, #17
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	2b06      	cmp	r3, #6
 8001408:	d110      	bne.n	800142c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001410:	2208      	movs	r2, #8
 8001412:	4619      	mov	r1, r3
 8001414:	6a38      	ldr	r0, [r7, #32]
 8001416:	f003 f819 	bl	800444c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	091b      	lsrs	r3, r3, #4
 8001422:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001426:	441a      	add	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	699a      	ldr	r2, [r3, #24]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0210 	orr.w	r2, r2, #16
 800143a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f003 f997 	bl	8004774 <USB_ReadInterrupts>
 8001446:	4603      	mov	r3, r0
 8001448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800144c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001450:	f040 80a7 	bne.w	80015a2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f003 f99c 	bl	800479a <USB_ReadDevAllOutEpInterrupt>
 8001462:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001464:	e099      	b.n	800159a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 808e 	beq.w	800158e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f003 f9c0 	bl	8004802 <USB_ReadDevOutEPInterrupt>
 8001482:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00c      	beq.n	80014a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	015a      	lsls	r2, r3, #5
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800149a:	461a      	mov	r2, r3
 800149c:	2301      	movs	r3, #1
 800149e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fe8a 	bl	80021bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00c      	beq.n	80014cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014be:	461a      	mov	r2, r3
 80014c0:	2308      	movs	r3, #8
 80014c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 ff60 	bl	800238c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d008      	beq.n	80014e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e2:	461a      	mov	r2, r3
 80014e4:	2310      	movs	r3, #16
 80014e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d030      	beq.n	8001554 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fa:	2b80      	cmp	r3, #128	; 0x80
 80014fc:	d109      	bne.n	8001512 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800150c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001510:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001514:	4613      	mov	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	3304      	adds	r3, #4
 8001526:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	78db      	ldrb	r3, [r3, #3]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d108      	bne.n	8001542 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2200      	movs	r2, #0
 8001534:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	b2db      	uxtb	r3, r3
 800153a:	4619      	mov	r1, r3
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f005 fb7d 	bl	8006c3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	015a      	lsls	r2, r3, #5
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	4413      	add	r3, r2
 800154a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800154e:	461a      	mov	r2, r3
 8001550:	2302      	movs	r3, #2
 8001552:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	f003 0320 	and.w	r3, r3, #32
 800155a:	2b00      	cmp	r3, #0
 800155c:	d008      	beq.n	8001570 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	015a      	lsls	r2, r3, #5
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	4413      	add	r3, r2
 8001566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800156a:	461a      	mov	r2, r3
 800156c:	2320      	movs	r3, #32
 800156e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	015a      	lsls	r2, r3, #5
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	4413      	add	r3, r2
 8001582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001586:	461a      	mov	r2, r3
 8001588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	3301      	adds	r3, #1
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001596:	085b      	lsrs	r3, r3, #1
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159c:	2b00      	cmp	r3, #0
 800159e:	f47f af62 	bne.w	8001466 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 f8e4 	bl	8004774 <USB_ReadInterrupts>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015b6:	f040 80db 	bne.w	8001770 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 f905 	bl	80047ce <USB_ReadDevAllInEpInterrupt>
 80015c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015ca:	e0cd      	b.n	8001768 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80c2 	beq.w	800175c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 f92b 	bl	800483e <USB_ReadDevInEPInterrupt>
 80015e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d057      	beq.n	80016a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	2201      	movs	r2, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	43db      	mvns	r3, r3
 800160e:	69f9      	ldr	r1, [r7, #28]
 8001610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001614:	4013      	ands	r3, r2
 8001616:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	015a      	lsls	r2, r3, #5
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	4413      	add	r3, r2
 8001620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001624:	461a      	mov	r2, r3
 8001626:	2301      	movs	r3, #1
 8001628:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	799b      	ldrb	r3, [r3, #6]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d132      	bne.n	8001698 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	3320      	adds	r3, #32
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4413      	add	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4403      	add	r3, r0
 8001652:	331c      	adds	r3, #28
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4419      	add	r1, r3
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4403      	add	r3, r0
 8001666:	3320      	adds	r3, #32
 8001668:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	2b00      	cmp	r3, #0
 800166e:	d113      	bne.n	8001698 <HAL_PCD_IRQHandler+0x3a2>
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001674:	4613      	mov	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	3324      	adds	r3, #36	; 0x24
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d108      	bne.n	8001698 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001690:	461a      	mov	r2, r3
 8001692:	2101      	movs	r1, #1
 8001694:	f003 f932 	bl	80048fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f005 fa47 	bl	8006b32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d008      	beq.n	80016c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ba:	461a      	mov	r2, r3
 80016bc:	2308      	movs	r3, #8
 80016be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d008      	beq.n	80016dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	015a      	lsls	r2, r3, #5
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d6:	461a      	mov	r2, r3
 80016d8:	2310      	movs	r3, #16
 80016da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d008      	beq.n	80016f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	015a      	lsls	r2, r3, #5
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f2:	461a      	mov	r2, r3
 80016f4:	2340      	movs	r3, #64	; 0x40
 80016f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d023      	beq.n	800174a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001704:	6a38      	ldr	r0, [r7, #32]
 8001706:	f002 f91f 	bl	8003948 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800170a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170c:	4613      	mov	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	3310      	adds	r3, #16
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	3304      	adds	r3, #4
 800171c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	78db      	ldrb	r3, [r3, #3]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2200      	movs	r2, #0
 800172a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4619      	mov	r1, r3
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f005 fa94 	bl	8006c60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	015a      	lsls	r2, r3, #5
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	4413      	add	r3, r2
 8001740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001744:	461a      	mov	r2, r3
 8001746:	2302      	movs	r3, #2
 8001748:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fca3 	bl	80020a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	3301      	adds	r3, #1
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176a:	2b00      	cmp	r3, #0
 800176c:	f47f af2e 	bne.w	80015cc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f002 fffd 	bl	8004774 <USB_ReadInterrupts>
 800177a:	4603      	mov	r3, r0
 800177c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001784:	d122      	bne.n	80017cc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d108      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017ac:	2100      	movs	r1, #0
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 fe8a 	bl	80024c8 <HAL_PCDEx_LPM_Callback>
 80017b4:	e002      	b.n	80017bc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f005 fa32 	bl	8006c20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80017ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 ffcf 	bl	8004774 <USB_ReadInterrupts>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017e0:	d112      	bne.n	8001808 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f005 f9ee 	bl	8006bd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001806:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f002 ffb1 	bl	8004774 <USB_ReadInterrupts>
 8001812:	4603      	mov	r3, r0
 8001814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800181c:	f040 80b7 	bne.w	800198e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2110      	movs	r1, #16
 800183a:	4618      	mov	r0, r3
 800183c:	f002 f884 	bl	8003948 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001844:	e046      	b.n	80018d4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	015a      	lsls	r2, r3, #5
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	4413      	add	r3, r2
 800184e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001852:	461a      	mov	r2, r3
 8001854:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001858:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186a:	0151      	lsls	r1, r2, #5
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	440a      	add	r2, r1
 8001870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001874:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001878:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	4413      	add	r3, r2
 8001882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001886:	461a      	mov	r2, r3
 8001888:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800188c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189e:	0151      	lsls	r1, r2, #5
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	440a      	add	r2, r1
 80018a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018be:	0151      	lsls	r1, r2, #5
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	440a      	add	r2, r1
 80018c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	3301      	adds	r3, #1
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	791b      	ldrb	r3, [r3, #4]
 80018d8:	461a      	mov	r2, r3
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	4293      	cmp	r3, r2
 80018de:	d3b2      	bcc.n	8001846 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7bdb      	ldrb	r3, [r3, #15]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d016      	beq.n	800192a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800190c:	f043 030b 	orr.w	r3, r3, #11
 8001910:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001922:	f043 030b 	orr.w	r3, r3, #11
 8001926:	6453      	str	r3, [r2, #68]	; 0x44
 8001928:	e015      	b.n	8001956 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001938:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800193c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001940:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001950:	f043 030b 	orr.w	r3, r3, #11
 8001954:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001964:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001968:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001978:	461a      	mov	r2, r3
 800197a:	f002 ffbf 	bl	80048fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800198c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f002 feee 	bl	8004774 <USB_ReadInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800199e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a2:	d123      	bne.n	80019ec <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 ff84 	bl	80048b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 f841 	bl	8003a3a <USB_GetDevSpeed>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681c      	ldr	r4, [r3, #0]
 80019c4:	f001 f9f0 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 80019c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019ce:	461a      	mov	r2, r3
 80019d0:	4620      	mov	r0, r4
 80019d2:	f001 fd45 	bl	8003460 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f005 f8d3 	bl	8006b82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 febf 	bl	8004774 <USB_ReadInterrupts>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d10a      	bne.n	8001a16 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f005 f8b0 	bl	8006b66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f002 0208 	and.w	r2, r2, #8
 8001a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 feaa 	bl	8004774 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	2b80      	cmp	r3, #128	; 0x80
 8001a28:	d123      	bne.n	8001a72 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a36:	2301      	movs	r3, #1
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3a:	e014      	b.n	8001a66 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d105      	bne.n	8001a60 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 faf0 	bl	8002040 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	3301      	adds	r3, #1
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	791b      	ldrb	r3, [r3, #4]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d3e4      	bcc.n	8001a3c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 fe7c 	bl	8004774 <USB_ReadInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a86:	d13c      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a88:	2301      	movs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8c:	e02b      	b.n	8001ae6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	3318      	adds	r3, #24
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d115      	bne.n	8001ae0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ab4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da12      	bge.n	8001ae0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3317      	adds	r3, #23
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fab0 	bl	8002040 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	791b      	ldrb	r3, [r3, #4]
 8001aea:	461a      	mov	r2, r3
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d3cd      	bcc.n	8001a8e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fe34 	bl	8004774 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b16:	d156      	bne.n	8001bc6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b18:	2301      	movs	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1c:	e045      	b.n	8001baa <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d12e      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da2b      	bge.n	8001ba4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001b58:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d121      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	4613      	mov	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10a      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba0:	6053      	str	r3, [r2, #4]
            break;
 8001ba2:	e008      	b.n	8001bb6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	791b      	ldrb	r3, [r3, #4]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d3b3      	bcc.n	8001b1e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 fdd2 	bl	8004774 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bda:	d10a      	bne.n	8001bf2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f005 f851 	bl	8006c84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fdbc 	bl	8004774 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d115      	bne.n	8001c32 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f005 f841 	bl	8006ca0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	e000      	b.n	8001c32 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c30:	bf00      	nop
    }
  }
}
 8001c32:	3734      	adds	r7, #52	; 0x34
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd90      	pop	{r4, r7, pc}

08001c38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_PCD_SetAddress+0x1a>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e012      	b.n	8001c78 <HAL_PCD_SetAddress+0x40>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 fd1b 	bl	80046a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	4608      	mov	r0, r1
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4603      	mov	r3, r0
 8001c90:	70fb      	strb	r3, [r7, #3]
 8001c92:	460b      	mov	r3, r1
 8001c94:	803b      	strh	r3, [r7, #0]
 8001c96:	4613      	mov	r3, r2
 8001c98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da0f      	bge.n	8001cc6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca6:	78fb      	ldrb	r3, [r7, #3]
 8001ca8:	f003 020f 	and.w	r2, r3, #15
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	3310      	adds	r3, #16
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	3304      	adds	r3, #4
 8001cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	705a      	strb	r2, [r3, #1]
 8001cc4:	e00f      	b.n	8001ce6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f003 020f 	and.w	r2, r3, #15
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cf2:	883a      	ldrh	r2, [r7, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	78ba      	ldrb	r2, [r7, #2]
 8001cfc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	785b      	ldrb	r3, [r3, #1]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d004      	beq.n	8001d10 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d10:	78bb      	ldrb	r3, [r7, #2]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d102      	bne.n	8001d1c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_PCD_EP_Open+0xaa>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e00e      	b.n	8001d48 <HAL_PCD_EP_Open+0xc8>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68f9      	ldr	r1, [r7, #12]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f001 fea3 	bl	8003a84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8001d46:	7afb      	ldrb	r3, [r7, #11]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da0f      	bge.n	8001d84 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 020f 	and.w	r2, r3, #15
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	3310      	adds	r3, #16
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	3304      	adds	r3, #4
 8001d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	705a      	strb	r2, [r3, #1]
 8001d82:	e00f      	b.n	8001da4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	f003 020f 	and.w	r2, r3, #15
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_PCD_EP_Close+0x6e>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e00e      	b.n	8001ddc <HAL_PCD_EP_Close+0x8c>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68f9      	ldr	r1, [r7, #12]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fee1 	bl	8003b94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	460b      	mov	r3, r1
 8001df2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001df4:	7afb      	ldrb	r3, [r7, #11]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4413      	add	r3, r2
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2200      	movs	r2, #0
 8001e24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e26:	7afb      	ldrb	r3, [r7, #11]
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	799b      	ldrb	r3, [r3, #6]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d102      	bne.n	8001e40 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	799b      	ldrb	r3, [r3, #6]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	6979      	ldr	r1, [r7, #20]
 8001e4c:	f001 ff7e 	bl	8003d4c <USB_EPStartXfer>

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	460b      	mov	r3, r1
 8001e68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
 8001e6c:	f003 020f 	and.w	r2, r3, #15
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	3310      	adds	r3, #16
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3304      	adds	r3, #4
 8001e80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2201      	movs	r2, #1
 8001e98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	799b      	ldrb	r3, [r3, #6]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	799b      	ldrb	r3, [r3, #6]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	6979      	ldr	r1, [r7, #20]
 8001ec0:	f001 ff44 	bl	8003d4c <USB_EPStartXfer>

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	7912      	ldrb	r2, [r2, #4]
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e04f      	b.n	8001f8c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	da0f      	bge.n	8001f14 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	f003 020f 	and.w	r2, r3, #15
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	3310      	adds	r3, #16
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	3304      	adds	r3, #4
 8001f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	705a      	strb	r2, [r3, #1]
 8001f12:	e00d      	b.n	8001f30 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	3304      	adds	r3, #4
 8001f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2201      	movs	r2, #1
 8001f34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_PCD_EP_SetStall+0x82>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e01d      	b.n	8001f8c <HAL_PCD_EP_SetStall+0xbe>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68f9      	ldr	r1, [r7, #12]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 facc 	bl	80044fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7999      	ldrb	r1, [r3, #6]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f002 fcbd 	bl	80048fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	7912      	ldrb	r2, [r2, #4]
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e042      	b.n	8002038 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da0f      	bge.n	8001fda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 020f 	and.w	r2, r3, #15
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	3310      	adds	r3, #16
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	3304      	adds	r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	705a      	strb	r2, [r3, #1]
 8001fd8:	e00f      	b.n	8001ffa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 020f 	and.w	r2, r3, #15
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	b2da      	uxtb	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_PCD_EP_ClrStall+0x86>
 8002016:	2302      	movs	r3, #2
 8002018:	e00e      	b.n	8002038 <HAL_PCD_EP_ClrStall+0xa4>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68f9      	ldr	r1, [r7, #12]
 8002028:	4618      	mov	r0, r3
 800202a:	f002 fad5 	bl	80045d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800204c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002050:	2b00      	cmp	r3, #0
 8002052:	da0c      	bge.n	800206e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 020f 	and.w	r2, r3, #15
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	3310      	adds	r3, #16
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	3304      	adds	r3, #4
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e00c      	b.n	8002088 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 020f 	and.w	r2, r3, #15
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	3304      	adds	r3, #4
 8002086:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	4618      	mov	r0, r3
 8002090:	f002 f8f4 	bl	800427c <USB_EPStopXfer>
 8002094:	4603      	mov	r3, r0
 8002096:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002098:	7afb      	ldrb	r3, [r7, #11]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b08a      	sub	sp, #40	; 0x28
 80020a6:	af02      	add	r7, sp, #8
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	3310      	adds	r3, #16
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	3304      	adds	r3, #4
 80020c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d901      	bls.n	80020da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e06b      	b.n	80021b2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d902      	bls.n	80020f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3303      	adds	r3, #3
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020fe:	e02a      	b.n	8002156 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	429a      	cmp	r2, r3
 8002114:	d902      	bls.n	800211c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	3303      	adds	r3, #3
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	68d9      	ldr	r1, [r3, #12]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	4603      	mov	r3, r0
 8002138:	6978      	ldr	r0, [r7, #20]
 800213a:	f002 f949 	bl	80043d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	441a      	add	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	441a      	add	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	429a      	cmp	r2, r3
 800216a:	d809      	bhi.n	8002180 <PCD_WriteEmptyTxFifo+0xde>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002174:	429a      	cmp	r2, r3
 8002176:	d203      	bcs.n	8002180 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1bf      	bne.n	8002100 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	d811      	bhi.n	80021b0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	2201      	movs	r2, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	6939      	ldr	r1, [r7, #16]
 80021a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021ac:	4013      	ands	r3, r2
 80021ae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	333c      	adds	r3, #60	; 0x3c
 80021d4:	3304      	adds	r3, #4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	799b      	ldrb	r3, [r3, #6]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d17b      	bne.n	80022ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d015      	beq.n	8002228 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	4a61      	ldr	r2, [pc, #388]	; (8002384 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	f240 80b9 	bls.w	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80b3 	beq.w	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221e:	461a      	mov	r2, r3
 8002220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002224:	6093      	str	r3, [r2, #8]
 8002226:	e0a7      	b.n	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223e:	461a      	mov	r2, r3
 8002240:	2320      	movs	r3, #32
 8002242:	6093      	str	r3, [r2, #8]
 8002244:	e098      	b.n	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 8093 	bne.w	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4a4b      	ldr	r2, [pc, #300]	; (8002384 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d90f      	bls.n	800227a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	4413      	add	r3, r2
 800226c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002270:	461a      	mov	r2, r3
 8002272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002276:	6093      	str	r3, [r2, #8]
 8002278:	e07e      	b.n	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	3304      	adds	r3, #4
 800228e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a1a      	ldr	r2, [r3, #32]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	0159      	lsls	r1, r3, #5
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	440b      	add	r3, r1
 800229c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	1ad2      	subs	r2, r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d114      	bne.n	80022dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80022c4:	461a      	mov	r2, r3
 80022c6:	2101      	movs	r1, #1
 80022c8:	f002 fb18 	bl	80048fc <USB_EP0_OutStart>
 80022cc:	e006      	b.n	80022dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	441a      	add	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	4619      	mov	r1, r3
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f004 fc0a 	bl	8006afc <HAL_PCD_DataOutStageCallback>
 80022e8:	e046      	b.n	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	4a26      	ldr	r2, [pc, #152]	; (8002388 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d124      	bne.n	800233c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	4413      	add	r3, r2
 8002304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002308:	461a      	mov	r2, r3
 800230a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230e:	6093      	str	r3, [r2, #8]
 8002310:	e032      	b.n	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002328:	461a      	mov	r2, r3
 800232a:	2320      	movs	r3, #32
 800232c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	4619      	mov	r1, r3
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f004 fbe1 	bl	8006afc <HAL_PCD_DataOutStageCallback>
 800233a:	e01d      	b.n	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d114      	bne.n	800236c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d108      	bne.n	800236c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002364:	461a      	mov	r2, r3
 8002366:	2100      	movs	r1, #0
 8002368:	f002 fac8 	bl	80048fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f004 fbc2 	bl	8006afc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3720      	adds	r7, #32
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	4f54300a 	.word	0x4f54300a
 8002388:	4f54310a 	.word	0x4f54310a

0800238c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	333c      	adds	r3, #60	; 0x3c
 80023a4:	3304      	adds	r3, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a15      	ldr	r2, [pc, #84]	; (8002414 <PCD_EP_OutSetupPacket_int+0x88>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d90e      	bls.n	80023e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d8:	461a      	mov	r2, r3
 80023da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f004 fb79 	bl	8006ad8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <PCD_EP_OutSetupPacket_int+0x88>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d90c      	bls.n	8002408 <PCD_EP_OutSetupPacket_int+0x7c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	799b      	ldrb	r3, [r3, #6]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002400:	461a      	mov	r2, r3
 8002402:	2101      	movs	r1, #1
 8002404:	f002 fa7a 	bl	80048fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	4f54300a 	.word	0x4f54300a

08002418 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
 8002424:	4613      	mov	r3, r2
 8002426:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d107      	bne.n	8002446 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002436:	883b      	ldrh	r3, [r7, #0]
 8002438:	0419      	lsls	r1, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	430a      	orrs	r2, r1
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
 8002444:	e028      	b.n	8002498 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	4413      	add	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	e00d      	b.n	8002476 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	3340      	adds	r3, #64	; 0x40
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	4413      	add	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	3301      	adds	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	3b01      	subs	r3, #1
 800247c:	429a      	cmp	r2, r3
 800247e:	d3ec      	bcc.n	800245a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002480:	883b      	ldrh	r3, [r7, #0]
 8002482:	0418      	lsls	r0, r3, #16
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6819      	ldr	r1, [r3, #0]
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	3b01      	subs	r3, #1
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	4302      	orrs	r2, r0
 8002490:	3340      	adds	r3, #64	; 0x40
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e267      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d075      	beq.n	80025ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fe:	4b88      	ldr	r3, [pc, #544]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d00c      	beq.n	8002524 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250a:	4b85      	ldr	r3, [pc, #532]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002512:	2b08      	cmp	r3, #8
 8002514:	d112      	bne.n	800253c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002516:	4b82      	ldr	r3, [pc, #520]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002522:	d10b      	bne.n	800253c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	4b7e      	ldr	r3, [pc, #504]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d05b      	beq.n	80025e8 <HAL_RCC_OscConfig+0x108>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d157      	bne.n	80025e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e242      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d106      	bne.n	8002554 <HAL_RCC_OscConfig+0x74>
 8002546:	4b76      	ldr	r3, [pc, #472]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a75      	ldr	r2, [pc, #468]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e01d      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x98>
 800255e:	4b70      	ldr	r3, [pc, #448]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6f      	ldr	r2, [pc, #444]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b6d      	ldr	r3, [pc, #436]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6c      	ldr	r2, [pc, #432]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002578:	4b69      	ldr	r3, [pc, #420]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a68      	ldr	r2, [pc, #416]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b66      	ldr	r3, [pc, #408]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a65      	ldr	r2, [pc, #404]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800258a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fa58 	bl	8000a4c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a0:	f7fe fa54 	bl	8000a4c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e207      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b5b      	ldr	r3, [pc, #364]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0xc0>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe fa44 	bl	8000a4c <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe fa40 	bl	8000a4c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1f3      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b51      	ldr	r3, [pc, #324]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0xe8>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d063      	beq.n	80026be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f6:	4b4a      	ldr	r3, [pc, #296]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b47      	ldr	r3, [pc, #284]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800260a:	2b08      	cmp	r3, #8
 800260c:	d11c      	bne.n	8002648 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260e:	4b44      	ldr	r3, [pc, #272]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d116      	bne.n	8002648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	4b41      	ldr	r3, [pc, #260]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_RCC_OscConfig+0x152>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1c7      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4937      	ldr	r1, [pc, #220]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	e03a      	b.n	80026be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002650:	4b34      	ldr	r3, [pc, #208]	; (8002724 <HAL_RCC_OscConfig+0x244>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fe f9f9 	bl	8000a4c <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265e:	f7fe f9f5 	bl	8000a4c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1a8      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4b28      	ldr	r3, [pc, #160]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4925      	ldr	r1, [pc, #148]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e015      	b.n	80026be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_RCC_OscConfig+0x244>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7fe f9d8 	bl	8000a4c <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a0:	f7fe f9d4 	bl	8000a4c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e187      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d036      	beq.n	8002738 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d016      	beq.n	8002700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_RCC_OscConfig+0x248>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fe f9b8 	bl	8000a4c <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e0:	f7fe f9b4 	bl	8000a4c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e167      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 80026f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x200>
 80026fe:	e01b      	b.n	8002738 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCC_OscConfig+0x248>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7fe f9a1 	bl	8000a4c <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	e00e      	b.n	800272c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270e:	f7fe f99d 	bl	8000a4c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d907      	bls.n	800272c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e150      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
 8002720:	40023800 	.word	0x40023800
 8002724:	42470000 	.word	0x42470000
 8002728:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	4b88      	ldr	r3, [pc, #544]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ea      	bne.n	800270e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8097 	beq.w	8002874 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274a:	4b81      	ldr	r3, [pc, #516]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	4b7d      	ldr	r3, [pc, #500]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a7c      	ldr	r2, [pc, #496]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b7a      	ldr	r3, [pc, #488]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002772:	2301      	movs	r3, #1
 8002774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b77      	ldr	r3, [pc, #476]	; (8002954 <HAL_RCC_OscConfig+0x474>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d118      	bne.n	80027b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002782:	4b74      	ldr	r3, [pc, #464]	; (8002954 <HAL_RCC_OscConfig+0x474>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a73      	ldr	r2, [pc, #460]	; (8002954 <HAL_RCC_OscConfig+0x474>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278e:	f7fe f95d 	bl	8000a4c <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002796:	f7fe f959 	bl	8000a4c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e10c      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <HAL_RCC_OscConfig+0x474>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d106      	bne.n	80027ca <HAL_RCC_OscConfig+0x2ea>
 80027bc:	4b64      	ldr	r3, [pc, #400]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a63      	ldr	r2, [pc, #396]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
 80027c8:	e01c      	b.n	8002804 <HAL_RCC_OscConfig+0x324>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b05      	cmp	r3, #5
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0x30c>
 80027d2:	4b5f      	ldr	r3, [pc, #380]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	4a5e      	ldr	r2, [pc, #376]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
 80027de:	4b5c      	ldr	r3, [pc, #368]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a5b      	ldr	r2, [pc, #364]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_OscConfig+0x324>
 80027ec:	4b58      	ldr	r3, [pc, #352]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	4a57      	ldr	r2, [pc, #348]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	6713      	str	r3, [r2, #112]	; 0x70
 80027f8:	4b55      	ldr	r3, [pc, #340]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a54      	ldr	r2, [pc, #336]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027fe:	f023 0304 	bic.w	r3, r3, #4
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d015      	beq.n	8002838 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280c:	f7fe f91e 	bl	8000a4c <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	e00a      	b.n	800282a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002814:	f7fe f91a 	bl	8000a4c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e0cb      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282a:	4b49      	ldr	r3, [pc, #292]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0ee      	beq.n	8002814 <HAL_RCC_OscConfig+0x334>
 8002836:	e014      	b.n	8002862 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002838:	f7fe f908 	bl	8000a4c <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe f904 	bl	8000a4c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e0b5      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002856:	4b3e      	ldr	r3, [pc, #248]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ee      	bne.n	8002840 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002868:	4b39      	ldr	r3, [pc, #228]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	4a38      	ldr	r2, [pc, #224]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800286e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002872:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a1 	beq.w	80029c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800287e:	4b34      	ldr	r3, [pc, #208]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b08      	cmp	r3, #8
 8002888:	d05c      	beq.n	8002944 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d141      	bne.n	8002916 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002892:	4b31      	ldr	r3, [pc, #196]	; (8002958 <HAL_RCC_OscConfig+0x478>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe f8d8 	bl	8000a4c <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe f8d4 	bl	8000a4c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e087      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	4b27      	ldr	r3, [pc, #156]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	019b      	lsls	r3, r3, #6
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	3b01      	subs	r3, #1
 80028d8:	041b      	lsls	r3, r3, #16
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	491b      	ldr	r1, [pc, #108]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <HAL_RCC_OscConfig+0x478>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7fe f8ad 	bl	8000a4c <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f6:	f7fe f8a9 	bl	8000a4c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e05c      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x416>
 8002914:	e054      	b.n	80029c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_RCC_OscConfig+0x478>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe f896 	bl	8000a4c <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002924:	f7fe f892 	bl	8000a4c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e045      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x444>
 8002942:	e03d      	b.n	80029c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d107      	bne.n	800295c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e038      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
 8002950:	40023800 	.word	0x40023800
 8002954:	40007000 	.word	0x40007000
 8002958:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800295c:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x4ec>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d028      	beq.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d121      	bne.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d11a      	bne.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800298c:	4013      	ands	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002992:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002994:	4293      	cmp	r3, r2
 8002996:	d111      	bne.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	3b01      	subs	r3, #1
 80029a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800

080029d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0cc      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e4:	4b68      	ldr	r3, [pc, #416]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d90c      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a3c:	4b53      	ldr	r3, [pc, #332]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	494d      	ldr	r1, [pc, #308]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d044      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d119      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d003      	beq.n	8002a8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8e:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e06f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e067      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aae:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4934      	ldr	r1, [pc, #208]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac0:	f7fd ffc4 	bl	8000a4c <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac8:	f7fd ffc0 	bl	8000a4c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e04f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 020c 	and.w	r2, r3, #12
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d1eb      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af0:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d20c      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e032      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4916      	ldr	r1, [pc, #88]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	490e      	ldr	r1, [pc, #56]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b56:	f000 f821 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	490a      	ldr	r1, [pc, #40]	; (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd ff24 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023c00 	.word	0x40023c00
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	0800711c 	.word	0x0800711c
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000004 	.word	0x20000004

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba0:	b094      	sub	sp, #80	; 0x50
 8002ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba8:	2300      	movs	r3, #0
 8002baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bac:	2300      	movs	r3, #0
 8002bae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb4:	4b79      	ldr	r3, [pc, #484]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d00d      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x40>
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	f200 80e1 	bhi.w	8002d88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bce:	e0db      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b73      	ldr	r3, [pc, #460]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002bd4:	e0db      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd6:	4b73      	ldr	r3, [pc, #460]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bda:	e0d8      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bdc:	4b6f      	ldr	r3, [pc, #444]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be6:	4b6d      	ldr	r3, [pc, #436]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d063      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf2:	4b6a      	ldr	r3, [pc, #424]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c04:	633b      	str	r3, [r7, #48]	; 0x30
 8002c06:	2300      	movs	r3, #0
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
 8002c0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c0e:	4622      	mov	r2, r4
 8002c10:	462b      	mov	r3, r5
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	0159      	lsls	r1, r3, #5
 8002c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c20:	0150      	lsls	r0, r2, #5
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4621      	mov	r1, r4
 8002c28:	1a51      	subs	r1, r2, r1
 8002c2a:	6139      	str	r1, [r7, #16]
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c40:	4659      	mov	r1, fp
 8002c42:	018b      	lsls	r3, r1, #6
 8002c44:	4651      	mov	r1, sl
 8002c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c4a:	4651      	mov	r1, sl
 8002c4c:	018a      	lsls	r2, r1, #6
 8002c4e:	4651      	mov	r1, sl
 8002c50:	ebb2 0801 	subs.w	r8, r2, r1
 8002c54:	4659      	mov	r1, fp
 8002c56:	eb63 0901 	sbc.w	r9, r3, r1
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c6e:	4690      	mov	r8, r2
 8002c70:	4699      	mov	r9, r3
 8002c72:	4623      	mov	r3, r4
 8002c74:	eb18 0303 	adds.w	r3, r8, r3
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	462b      	mov	r3, r5
 8002c7c:	eb49 0303 	adc.w	r3, r9, r3
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c8e:	4629      	mov	r1, r5
 8002c90:	024b      	lsls	r3, r1, #9
 8002c92:	4621      	mov	r1, r4
 8002c94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c98:	4621      	mov	r1, r4
 8002c9a:	024a      	lsls	r2, r1, #9
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ca8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cac:	f7fd fa8c 	bl	80001c8 <__aeabi_uldivmod>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cb8:	e058      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cba:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	099b      	lsrs	r3, r3, #6
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cca:	623b      	str	r3, [r7, #32]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	f04f 0000 	mov.w	r0, #0
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	0159      	lsls	r1, r3, #5
 8002ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce6:	0150      	lsls	r0, r2, #5
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4641      	mov	r1, r8
 8002cee:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d0c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d10:	eb63 050b 	sbc.w	r5, r3, fp
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	00eb      	lsls	r3, r5, #3
 8002d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d22:	00e2      	lsls	r2, r4, #3
 8002d24:	4614      	mov	r4, r2
 8002d26:	461d      	mov	r5, r3
 8002d28:	4643      	mov	r3, r8
 8002d2a:	18e3      	adds	r3, r4, r3
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	464b      	mov	r3, r9
 8002d30:	eb45 0303 	adc.w	r3, r5, r3
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d42:	4629      	mov	r1, r5
 8002d44:	028b      	lsls	r3, r1, #10
 8002d46:	4621      	mov	r1, r4
 8002d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	028a      	lsls	r2, r1, #10
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d56:	2200      	movs	r2, #0
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	61fa      	str	r2, [r7, #28]
 8002d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d60:	f7fd fa32 	bl	80001c8 <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4613      	mov	r3, r2
 8002d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	0c1b      	lsrs	r3, r3, #16
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	3301      	adds	r3, #1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d86:	e002      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3750      	adds	r7, #80	; 0x50
 8002d94:	46bd      	mov	sp, r7
 8002d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	00f42400 	.word	0x00f42400
 8002da4:	007a1200 	.word	0x007a1200

08002da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000000 	.word	0x20000000

08002dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dc4:	f7ff fff0 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	0a9b      	lsrs	r3, r3, #10
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4903      	ldr	r1, [pc, #12]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40023800 	.word	0x40023800
 8002de4:	0800712c 	.word	0x0800712c

08002de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dec:	f7ff ffdc 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0b5b      	lsrs	r3, r3, #13
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	0800712c 	.word	0x0800712c

08002e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e042      	b.n	8002ea8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fd fcca 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2224      	movs	r2, #36	; 0x24
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f82b 	bl	8002eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb4:	b0c0      	sub	sp, #256	; 0x100
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	68d9      	ldr	r1, [r3, #12]
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	ea40 0301 	orr.w	r3, r0, r1
 8002ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f08:	f021 010c 	bic.w	r1, r1, #12
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f16:	430b      	orrs	r3, r1
 8002f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2a:	6999      	ldr	r1, [r3, #24]
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	ea40 0301 	orr.w	r3, r0, r1
 8002f36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4b8f      	ldr	r3, [pc, #572]	; (800317c <UART_SetConfig+0x2cc>)
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d005      	beq.n	8002f50 <UART_SetConfig+0xa0>
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4b8d      	ldr	r3, [pc, #564]	; (8003180 <UART_SetConfig+0x2d0>)
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d104      	bne.n	8002f5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f50:	f7ff ff4a 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8002f54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f58:	e003      	b.n	8002f62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f5a:	f7ff ff31 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 8002f5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f6c:	f040 810c 	bne.w	8003188 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f82:	4622      	mov	r2, r4
 8002f84:	462b      	mov	r3, r5
 8002f86:	1891      	adds	r1, r2, r2
 8002f88:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f8a:	415b      	adcs	r3, r3
 8002f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f92:	4621      	mov	r1, r4
 8002f94:	eb12 0801 	adds.w	r8, r2, r1
 8002f98:	4629      	mov	r1, r5
 8002f9a:	eb43 0901 	adc.w	r9, r3, r1
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb2:	4690      	mov	r8, r2
 8002fb4:	4699      	mov	r9, r3
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	eb18 0303 	adds.w	r3, r8, r3
 8002fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	eb49 0303 	adc.w	r3, r9, r3
 8002fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fde:	460b      	mov	r3, r1
 8002fe0:	18db      	adds	r3, r3, r3
 8002fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	eb42 0303 	adc.w	r3, r2, r3
 8002fea:	657b      	str	r3, [r7, #84]	; 0x54
 8002fec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ff0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ff4:	f7fd f8e8 	bl	80001c8 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4b61      	ldr	r3, [pc, #388]	; (8003184 <UART_SetConfig+0x2d4>)
 8002ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	011c      	lsls	r4, r3, #4
 8003006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800300a:	2200      	movs	r2, #0
 800300c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003010:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003014:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003018:	4642      	mov	r2, r8
 800301a:	464b      	mov	r3, r9
 800301c:	1891      	adds	r1, r2, r2
 800301e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003020:	415b      	adcs	r3, r3
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003024:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003028:	4641      	mov	r1, r8
 800302a:	eb12 0a01 	adds.w	sl, r2, r1
 800302e:	4649      	mov	r1, r9
 8003030:	eb43 0b01 	adc.w	fp, r3, r1
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003040:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003048:	4692      	mov	sl, r2
 800304a:	469b      	mov	fp, r3
 800304c:	4643      	mov	r3, r8
 800304e:	eb1a 0303 	adds.w	r3, sl, r3
 8003052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003056:	464b      	mov	r3, r9
 8003058:	eb4b 0303 	adc.w	r3, fp, r3
 800305c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800306c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003070:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003074:	460b      	mov	r3, r1
 8003076:	18db      	adds	r3, r3, r3
 8003078:	643b      	str	r3, [r7, #64]	; 0x40
 800307a:	4613      	mov	r3, r2
 800307c:	eb42 0303 	adc.w	r3, r2, r3
 8003080:	647b      	str	r3, [r7, #68]	; 0x44
 8003082:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003086:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800308a:	f7fd f89d 	bl	80001c8 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4611      	mov	r1, r2
 8003094:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <UART_SetConfig+0x2d4>)
 8003096:	fba3 2301 	umull	r2, r3, r3, r1
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2264      	movs	r2, #100	; 0x64
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	1acb      	subs	r3, r1, r3
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030aa:	4b36      	ldr	r3, [pc, #216]	; (8003184 <UART_SetConfig+0x2d4>)
 80030ac:	fba3 2302 	umull	r2, r3, r3, r2
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030b8:	441c      	add	r4, r3
 80030ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030cc:	4642      	mov	r2, r8
 80030ce:	464b      	mov	r3, r9
 80030d0:	1891      	adds	r1, r2, r2
 80030d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030d4:	415b      	adcs	r3, r3
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030dc:	4641      	mov	r1, r8
 80030de:	1851      	adds	r1, r2, r1
 80030e0:	6339      	str	r1, [r7, #48]	; 0x30
 80030e2:	4649      	mov	r1, r9
 80030e4:	414b      	adcs	r3, r1
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030f4:	4659      	mov	r1, fp
 80030f6:	00cb      	lsls	r3, r1, #3
 80030f8:	4651      	mov	r1, sl
 80030fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030fe:	4651      	mov	r1, sl
 8003100:	00ca      	lsls	r2, r1, #3
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	4603      	mov	r3, r0
 8003108:	4642      	mov	r2, r8
 800310a:	189b      	adds	r3, r3, r2
 800310c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003110:	464b      	mov	r3, r9
 8003112:	460a      	mov	r2, r1
 8003114:	eb42 0303 	adc.w	r3, r2, r3
 8003118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003128:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800312c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003130:	460b      	mov	r3, r1
 8003132:	18db      	adds	r3, r3, r3
 8003134:	62bb      	str	r3, [r7, #40]	; 0x28
 8003136:	4613      	mov	r3, r2
 8003138:	eb42 0303 	adc.w	r3, r2, r3
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003142:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003146:	f7fd f83f 	bl	80001c8 <__aeabi_uldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <UART_SetConfig+0x2d4>)
 8003150:	fba3 1302 	umull	r1, r3, r3, r2
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	2164      	movs	r1, #100	; 0x64
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	3332      	adds	r3, #50	; 0x32
 8003162:	4a08      	ldr	r2, [pc, #32]	; (8003184 <UART_SetConfig+0x2d4>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	f003 0207 	and.w	r2, r3, #7
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4422      	add	r2, r4
 8003176:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003178:	e106      	b.n	8003388 <UART_SetConfig+0x4d8>
 800317a:	bf00      	nop
 800317c:	40011000 	.word	0x40011000
 8003180:	40011400 	.word	0x40011400
 8003184:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800318c:	2200      	movs	r2, #0
 800318e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003192:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003196:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800319a:	4642      	mov	r2, r8
 800319c:	464b      	mov	r3, r9
 800319e:	1891      	adds	r1, r2, r2
 80031a0:	6239      	str	r1, [r7, #32]
 80031a2:	415b      	adcs	r3, r3
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
 80031a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031aa:	4641      	mov	r1, r8
 80031ac:	1854      	adds	r4, r2, r1
 80031ae:	4649      	mov	r1, r9
 80031b0:	eb43 0501 	adc.w	r5, r3, r1
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	00eb      	lsls	r3, r5, #3
 80031be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031c2:	00e2      	lsls	r2, r4, #3
 80031c4:	4614      	mov	r4, r2
 80031c6:	461d      	mov	r5, r3
 80031c8:	4643      	mov	r3, r8
 80031ca:	18e3      	adds	r3, r4, r3
 80031cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031d0:	464b      	mov	r3, r9
 80031d2:	eb45 0303 	adc.w	r3, r5, r3
 80031d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031f6:	4629      	mov	r1, r5
 80031f8:	008b      	lsls	r3, r1, #2
 80031fa:	4621      	mov	r1, r4
 80031fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003200:	4621      	mov	r1, r4
 8003202:	008a      	lsls	r2, r1, #2
 8003204:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003208:	f7fc ffde 	bl	80001c8 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4b60      	ldr	r3, [pc, #384]	; (8003394 <UART_SetConfig+0x4e4>)
 8003212:	fba3 2302 	umull	r2, r3, r3, r2
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	011c      	lsls	r4, r3, #4
 800321a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800321e:	2200      	movs	r2, #0
 8003220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003224:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003228:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800322c:	4642      	mov	r2, r8
 800322e:	464b      	mov	r3, r9
 8003230:	1891      	adds	r1, r2, r2
 8003232:	61b9      	str	r1, [r7, #24]
 8003234:	415b      	adcs	r3, r3
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323c:	4641      	mov	r1, r8
 800323e:	1851      	adds	r1, r2, r1
 8003240:	6139      	str	r1, [r7, #16]
 8003242:	4649      	mov	r1, r9
 8003244:	414b      	adcs	r3, r1
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003254:	4659      	mov	r1, fp
 8003256:	00cb      	lsls	r3, r1, #3
 8003258:	4651      	mov	r1, sl
 800325a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325e:	4651      	mov	r1, sl
 8003260:	00ca      	lsls	r2, r1, #3
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	4603      	mov	r3, r0
 8003268:	4642      	mov	r2, r8
 800326a:	189b      	adds	r3, r3, r2
 800326c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003270:	464b      	mov	r3, r9
 8003272:	460a      	mov	r2, r1
 8003274:	eb42 0303 	adc.w	r3, r2, r3
 8003278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	67bb      	str	r3, [r7, #120]	; 0x78
 8003286:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003294:	4649      	mov	r1, r9
 8003296:	008b      	lsls	r3, r1, #2
 8003298:	4641      	mov	r1, r8
 800329a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800329e:	4641      	mov	r1, r8
 80032a0:	008a      	lsls	r2, r1, #2
 80032a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032a6:	f7fc ff8f 	bl	80001c8 <__aeabi_uldivmod>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4611      	mov	r1, r2
 80032b0:	4b38      	ldr	r3, [pc, #224]	; (8003394 <UART_SetConfig+0x4e4>)
 80032b2:	fba3 2301 	umull	r2, r3, r3, r1
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	2264      	movs	r2, #100	; 0x64
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	1acb      	subs	r3, r1, r3
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	3332      	adds	r3, #50	; 0x32
 80032c4:	4a33      	ldr	r2, [pc, #204]	; (8003394 <UART_SetConfig+0x4e4>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d0:	441c      	add	r4, r3
 80032d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d6:	2200      	movs	r2, #0
 80032d8:	673b      	str	r3, [r7, #112]	; 0x70
 80032da:	677a      	str	r2, [r7, #116]	; 0x74
 80032dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032e0:	4642      	mov	r2, r8
 80032e2:	464b      	mov	r3, r9
 80032e4:	1891      	adds	r1, r2, r2
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	415b      	adcs	r3, r3
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032f0:	4641      	mov	r1, r8
 80032f2:	1851      	adds	r1, r2, r1
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	4649      	mov	r1, r9
 80032f8:	414b      	adcs	r3, r1
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003308:	4659      	mov	r1, fp
 800330a:	00cb      	lsls	r3, r1, #3
 800330c:	4651      	mov	r1, sl
 800330e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003312:	4651      	mov	r1, sl
 8003314:	00ca      	lsls	r2, r1, #3
 8003316:	4610      	mov	r0, r2
 8003318:	4619      	mov	r1, r3
 800331a:	4603      	mov	r3, r0
 800331c:	4642      	mov	r2, r8
 800331e:	189b      	adds	r3, r3, r2
 8003320:	66bb      	str	r3, [r7, #104]	; 0x68
 8003322:	464b      	mov	r3, r9
 8003324:	460a      	mov	r2, r1
 8003326:	eb42 0303 	adc.w	r3, r2, r3
 800332a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	663b      	str	r3, [r7, #96]	; 0x60
 8003336:	667a      	str	r2, [r7, #100]	; 0x64
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003344:	4649      	mov	r1, r9
 8003346:	008b      	lsls	r3, r1, #2
 8003348:	4641      	mov	r1, r8
 800334a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800334e:	4641      	mov	r1, r8
 8003350:	008a      	lsls	r2, r1, #2
 8003352:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003356:	f7fc ff37 	bl	80001c8 <__aeabi_uldivmod>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <UART_SetConfig+0x4e4>)
 8003360:	fba3 1302 	umull	r1, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	2164      	movs	r1, #100	; 0x64
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	3332      	adds	r3, #50	; 0x32
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <UART_SetConfig+0x4e4>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	f003 020f 	and.w	r2, r3, #15
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4422      	add	r2, r4
 8003386:	609a      	str	r2, [r3, #8]
}
 8003388:	bf00      	nop
 800338a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800338e:	46bd      	mov	sp, r7
 8003390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003394:	51eb851f 	.word	0x51eb851f

08003398 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003398:	b084      	sub	sp, #16
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	f107 001c 	add.w	r0, r7, #28
 80033a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d123      	bne.n	80033fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80033da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d105      	bne.n	80033ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f001 fae2 	bl	80049b8 <USB_CoreReset>
 80033f4:	4603      	mov	r3, r0
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e01b      	b.n	8003432 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f001 fad6 	bl	80049b8 <USB_CoreReset>
 800340c:	4603      	mov	r3, r0
 800340e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003410:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003414:	2b00      	cmp	r3, #0
 8003416:	d106      	bne.n	8003426 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
 8003424:	e005      	b.n	8003432 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003432:	7fbb      	ldrb	r3, [r7, #30]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d10b      	bne.n	8003450 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f043 0206 	orr.w	r2, r3, #6
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800345c:	b004      	add	sp, #16
 800345e:	4770      	bx	lr

08003460 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	4613      	mov	r3, r2
 800346c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d165      	bne.n	8003540 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4a41      	ldr	r2, [pc, #260]	; (800357c <USB_SetTurnaroundTime+0x11c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d906      	bls.n	800348a <USB_SetTurnaroundTime+0x2a>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4a40      	ldr	r2, [pc, #256]	; (8003580 <USB_SetTurnaroundTime+0x120>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d202      	bcs.n	800348a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003484:	230f      	movs	r3, #15
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	e062      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4a3c      	ldr	r2, [pc, #240]	; (8003580 <USB_SetTurnaroundTime+0x120>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d306      	bcc.n	80034a0 <USB_SetTurnaroundTime+0x40>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4a3b      	ldr	r2, [pc, #236]	; (8003584 <USB_SetTurnaroundTime+0x124>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d202      	bcs.n	80034a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800349a:	230e      	movs	r3, #14
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e057      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4a38      	ldr	r2, [pc, #224]	; (8003584 <USB_SetTurnaroundTime+0x124>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d306      	bcc.n	80034b6 <USB_SetTurnaroundTime+0x56>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4a37      	ldr	r2, [pc, #220]	; (8003588 <USB_SetTurnaroundTime+0x128>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d202      	bcs.n	80034b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034b0:	230d      	movs	r3, #13
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	e04c      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4a33      	ldr	r2, [pc, #204]	; (8003588 <USB_SetTurnaroundTime+0x128>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d306      	bcc.n	80034cc <USB_SetTurnaroundTime+0x6c>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4a32      	ldr	r2, [pc, #200]	; (800358c <USB_SetTurnaroundTime+0x12c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d802      	bhi.n	80034cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80034c6:	230c      	movs	r3, #12
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e041      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4a2f      	ldr	r2, [pc, #188]	; (800358c <USB_SetTurnaroundTime+0x12c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d906      	bls.n	80034e2 <USB_SetTurnaroundTime+0x82>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4a2e      	ldr	r2, [pc, #184]	; (8003590 <USB_SetTurnaroundTime+0x130>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d802      	bhi.n	80034e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80034dc:	230b      	movs	r3, #11
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e036      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4a2a      	ldr	r2, [pc, #168]	; (8003590 <USB_SetTurnaroundTime+0x130>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d906      	bls.n	80034f8 <USB_SetTurnaroundTime+0x98>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4a29      	ldr	r2, [pc, #164]	; (8003594 <USB_SetTurnaroundTime+0x134>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d802      	bhi.n	80034f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034f2:	230a      	movs	r3, #10
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e02b      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4a26      	ldr	r2, [pc, #152]	; (8003594 <USB_SetTurnaroundTime+0x134>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d906      	bls.n	800350e <USB_SetTurnaroundTime+0xae>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4a25      	ldr	r2, [pc, #148]	; (8003598 <USB_SetTurnaroundTime+0x138>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d202      	bcs.n	800350e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003508:	2309      	movs	r3, #9
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e020      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4a21      	ldr	r2, [pc, #132]	; (8003598 <USB_SetTurnaroundTime+0x138>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d306      	bcc.n	8003524 <USB_SetTurnaroundTime+0xc4>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4a20      	ldr	r2, [pc, #128]	; (800359c <USB_SetTurnaroundTime+0x13c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d802      	bhi.n	8003524 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800351e:	2308      	movs	r3, #8
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	e015      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4a1d      	ldr	r2, [pc, #116]	; (800359c <USB_SetTurnaroundTime+0x13c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d906      	bls.n	800353a <USB_SetTurnaroundTime+0xda>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <USB_SetTurnaroundTime+0x140>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d202      	bcs.n	800353a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003534:	2307      	movs	r3, #7
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e00a      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800353a:	2306      	movs	r3, #6
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e007      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003546:	2309      	movs	r3, #9
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	e001      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800354c:	2309      	movs	r3, #9
 800354e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	029b      	lsls	r3, r3, #10
 8003564:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003568:	431a      	orrs	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	00d8acbf 	.word	0x00d8acbf
 8003580:	00e4e1c0 	.word	0x00e4e1c0
 8003584:	00f42400 	.word	0x00f42400
 8003588:	01067380 	.word	0x01067380
 800358c:	011a499f 	.word	0x011a499f
 8003590:	01312cff 	.word	0x01312cff
 8003594:	014ca43f 	.word	0x014ca43f
 8003598:	016e3600 	.word	0x016e3600
 800359c:	01a6ab1f 	.word	0x01a6ab1f
 80035a0:	01e84800 	.word	0x01e84800

080035a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 0201 	bic.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d115      	bne.n	8003636 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003616:	200a      	movs	r0, #10
 8003618:	f7fd fa24 	bl	8000a64 <HAL_Delay>
      ms += 10U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	330a      	adds	r3, #10
 8003620:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f001 f939 	bl	800489a <USB_GetMode>
 8003628:	4603      	mov	r3, r0
 800362a:	2b01      	cmp	r3, #1
 800362c:	d01e      	beq.n	800366c <USB_SetCurrentMode+0x84>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2bc7      	cmp	r3, #199	; 0xc7
 8003632:	d9f0      	bls.n	8003616 <USB_SetCurrentMode+0x2e>
 8003634:	e01a      	b.n	800366c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d115      	bne.n	8003668 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003648:	200a      	movs	r0, #10
 800364a:	f7fd fa0b 	bl	8000a64 <HAL_Delay>
      ms += 10U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	330a      	adds	r3, #10
 8003652:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f001 f920 	bl	800489a <USB_GetMode>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <USB_SetCurrentMode+0x84>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2bc7      	cmp	r3, #199	; 0xc7
 8003664:	d9f0      	bls.n	8003648 <USB_SetCurrentMode+0x60>
 8003666:	e001      	b.n	800366c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e005      	b.n	8003678 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2bc8      	cmp	r3, #200	; 0xc8
 8003670:	d101      	bne.n	8003676 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003680:	b084      	sub	sp, #16
 8003682:	b580      	push	{r7, lr}
 8003684:	b086      	sub	sp, #24
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800368e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800369a:	2300      	movs	r3, #0
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	e009      	b.n	80036b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	3340      	adds	r3, #64	; 0x40
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	2200      	movs	r2, #0
 80036ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	3301      	adds	r3, #1
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b0e      	cmp	r3, #14
 80036b8:	d9f2      	bls.n	80036a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d11c      	bne.n	80036fc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d0:	f043 0302 	orr.w	r3, r3, #2
 80036d4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
 80036fa:	e00b      	b.n	8003714 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800371a:	461a      	mov	r2, r3
 800371c:	2300      	movs	r3, #0
 800371e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003720:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003724:	2b01      	cmp	r3, #1
 8003726:	d10d      	bne.n	8003744 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800372c:	2b00      	cmp	r3, #0
 800372e:	d104      	bne.n	800373a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003730:	2100      	movs	r1, #0
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f968 	bl	8003a08 <USB_SetDevSpeed>
 8003738:	e008      	b.n	800374c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800373a:	2101      	movs	r1, #1
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f963 	bl	8003a08 <USB_SetDevSpeed>
 8003742:	e003      	b.n	800374c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003744:	2103      	movs	r1, #3
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f95e 	bl	8003a08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800374c:	2110      	movs	r1, #16
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8fa 	bl	8003948 <USB_FlushTxFifo>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f924 	bl	80039ac <USB_FlushRxFifo>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003774:	461a      	mov	r2, r3
 8003776:	2300      	movs	r3, #0
 8003778:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003780:	461a      	mov	r2, r3
 8003782:	2300      	movs	r3, #0
 8003784:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378c:	461a      	mov	r2, r3
 800378e:	2300      	movs	r3, #0
 8003790:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	e043      	b.n	8003820 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ae:	d118      	bne.n	80037e2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10a      	bne.n	80037cc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c2:	461a      	mov	r2, r3
 80037c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e013      	b.n	80037f4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d8:	461a      	mov	r2, r3
 80037da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	e008      	b.n	80037f4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ee:	461a      	mov	r2, r3
 80037f0:	2300      	movs	r3, #0
 80037f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003800:	461a      	mov	r2, r3
 8003802:	2300      	movs	r3, #0
 8003804:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003812:	461a      	mov	r2, r3
 8003814:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003818:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	3301      	adds	r3, #1
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003824:	461a      	mov	r2, r3
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4293      	cmp	r3, r2
 800382a:	d3b5      	bcc.n	8003798 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	e043      	b.n	80038ba <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003848:	d118      	bne.n	800387c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	461a      	mov	r2, r3
 800385e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	e013      	b.n	800388e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e008      	b.n	800388e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003888:	461a      	mov	r2, r3
 800388a:	2300      	movs	r3, #0
 800388c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389a:	461a      	mov	r2, r3
 800389c:	2300      	movs	r3, #0
 800389e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	461a      	mov	r2, r3
 80038ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	3301      	adds	r3, #1
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038be:	461a      	mov	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d3b5      	bcc.n	8003832 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d105      	bne.n	80038fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f043 0210 	orr.w	r2, r3, #16
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699a      	ldr	r2, [r3, #24]
 8003900:	4b10      	ldr	r3, [pc, #64]	; (8003944 <USB_DevInit+0x2c4>)
 8003902:	4313      	orrs	r3, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003908:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f043 0208 	orr.w	r2, r3, #8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800391c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003920:	2b01      	cmp	r3, #1
 8003922:	d107      	bne.n	8003934 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800392c:	f043 0304 	orr.w	r3, r3, #4
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003934:	7dfb      	ldrb	r3, [r7, #23]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003940:	b004      	add	sp, #16
 8003942:	4770      	bx	lr
 8003944:	803c3800 	.word	0x803c3800

08003948 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3301      	adds	r3, #1
 800395a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003962:	d901      	bls.n	8003968 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e01b      	b.n	80039a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	daf2      	bge.n	8003956 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	019b      	lsls	r3, r3, #6
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3301      	adds	r3, #1
 8003984:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800398c:	d901      	bls.n	8003992 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e006      	b.n	80039a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b20      	cmp	r3, #32
 800399c:	d0f0      	beq.n	8003980 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3301      	adds	r3, #1
 80039bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80039c4:	d901      	bls.n	80039ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e018      	b.n	80039fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	daf2      	bge.n	80039b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2210      	movs	r2, #16
 80039da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3301      	adds	r3, #1
 80039e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80039e8:	d901      	bls.n	80039ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e006      	b.n	80039fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d0f0      	beq.n	80039dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	68f9      	ldr	r1, [r7, #12]
 8003a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b087      	sub	sp, #28
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0306 	and.w	r3, r3, #6
 8003a52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	75fb      	strb	r3, [r7, #23]
 8003a5e:	e00a      	b.n	8003a76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d002      	beq.n	8003a6c <USB_GetDevSpeed+0x32>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b06      	cmp	r3, #6
 8003a6a:	d102      	bne.n	8003a72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	75fb      	strb	r3, [r7, #23]
 8003a70:	e001      	b.n	8003a76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a72:	230f      	movs	r3, #15
 8003a74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	785b      	ldrb	r3, [r3, #1]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d13a      	bne.n	8003b16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	68f9      	ldr	r1, [r7, #12]
 8003aba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d155      	bne.n	8003b84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	791b      	ldrb	r3, [r3, #4]
 8003af2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003af4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	059b      	lsls	r3, r3, #22
 8003afa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003afc:	4313      	orrs	r3, r2
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	0151      	lsls	r1, r2, #5
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	440a      	add	r2, r1
 8003b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	e036      	b.n	8003b84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	2101      	movs	r1, #1
 8003b28:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2c:	041b      	lsls	r3, r3, #16
 8003b2e:	68f9      	ldr	r1, [r7, #12]
 8003b30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d11a      	bne.n	8003b84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	791b      	ldrb	r3, [r3, #4]
 8003b68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	0151      	lsls	r1, r2, #5
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	440a      	add	r2, r1
 8003b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	785b      	ldrb	r3, [r3, #1]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d161      	bne.n	8003c74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bc6:	d11f      	bne.n	8003c08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	440a      	add	r2, r1
 8003bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003be6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	0151      	lsls	r1, r2, #5
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	440a      	add	r2, r1
 8003bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	2101      	movs	r1, #1
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	68f9      	ldr	r1, [r7, #12]
 8003c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c28:	4013      	ands	r3, r2
 8003c2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	0159      	lsls	r1, r3, #5
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	440b      	add	r3, r1
 8003c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <USB_DeactivateEndpoint+0x1b0>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
 8003c72:	e060      	b.n	8003d36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c8a:	d11f      	bne.n	8003ccc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	0151      	lsls	r1, r2, #5
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	440a      	add	r2, r1
 8003ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003caa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	0151      	lsls	r1, r2, #5
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	440a      	add	r2, r1
 8003cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	2101      	movs	r1, #1
 8003cde:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	68f9      	ldr	r1, [r7, #12]
 8003ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cec:	4013      	ands	r3, r2
 8003cee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	2101      	movs	r1, #1
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	68f9      	ldr	r1, [r7, #12]
 8003d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d10:	4013      	ands	r3, r2
 8003d12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	0159      	lsls	r1, r3, #5
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	440b      	add	r3, r1
 8003d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <USB_DeactivateEndpoint+0x1b4>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	ec337800 	.word	0xec337800
 8003d48:	eff37800 	.word	0xeff37800

08003d4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	4613      	mov	r3, r2
 8003d58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	785b      	ldrb	r3, [r3, #1]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	f040 817a 	bne.w	8004062 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d132      	bne.n	8003ddc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	0151      	lsls	r1, r2, #5
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	440a      	add	r2, r1
 8003d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	0151      	lsls	r1, r2, #5
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	440a      	add	r2, r1
 8003db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003db4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003db8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd4:	0cdb      	lsrs	r3, r3, #19
 8003dd6:	04db      	lsls	r3, r3, #19
 8003dd8:	6113      	str	r3, [r2, #16]
 8003dda:	e092      	b.n	8003f02 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	0151      	lsls	r1, r2, #5
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	440a      	add	r2, r1
 8003df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df6:	0cdb      	lsrs	r3, r3, #19
 8003df8:	04db      	lsls	r3, r3, #19
 8003dfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	0151      	lsls	r1, r2, #5
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	440a      	add	r2, r1
 8003e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e1e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d11a      	bne.n	8003e5c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d903      	bls.n	8003e3a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	0151      	lsls	r1, r2, #5
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	440a      	add	r2, r1
 8003e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e58:	6113      	str	r3, [r2, #16]
 8003e5a:	e01b      	b.n	8003e94 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e68:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	6919      	ldr	r1, [r3, #16]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	440b      	add	r3, r1
 8003e74:	1e59      	subs	r1, r3, #1
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e7e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e80:	4ba2      	ldr	r3, [pc, #648]	; (800410c <USB_EPStartXfer+0x3c0>)
 8003e82:	400b      	ands	r3, r1
 8003e84:	69b9      	ldr	r1, [r7, #24]
 8003e86:	0148      	lsls	r0, r1, #5
 8003e88:	69f9      	ldr	r1, [r7, #28]
 8003e8a:	4401      	add	r1, r0
 8003e8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e90:	4313      	orrs	r3, r2
 8003e92:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eaa:	69b9      	ldr	r1, [r7, #24]
 8003eac:	0148      	lsls	r0, r1, #5
 8003eae:	69f9      	ldr	r1, [r7, #28]
 8003eb0:	4401      	add	r1, r0
 8003eb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	791b      	ldrb	r3, [r3, #4]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d11f      	bne.n	8003f02 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003edc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ee0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003efc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d14b      	bne.n	8003fa0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d009      	beq.n	8003f24 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	791b      	ldrb	r3, [r3, #4]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d128      	bne.n	8003f7e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d110      	bne.n	8003f5e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	0151      	lsls	r1, r2, #5
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	440a      	add	r2, r1
 8003f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	e00f      	b.n	8003f7e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	0151      	lsls	r1, r2, #5
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	440a      	add	r2, r1
 8003f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	0151      	lsls	r1, r2, #5
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	440a      	add	r2, r1
 8003f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e165      	b.n	800426c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	0151      	lsls	r1, r2, #5
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	791b      	ldrb	r3, [r3, #4]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d015      	beq.n	8003ff4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 814d 	beq.w	800426c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	69f9      	ldr	r1, [r7, #28]
 8003fea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	634b      	str	r3, [r1, #52]	; 0x34
 8003ff2:	e13b      	b.n	800426c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d110      	bne.n	8004026 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	440a      	add	r2, r1
 800401a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e00f      	b.n	8004046 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	0151      	lsls	r1, r2, #5
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	440a      	add	r2, r1
 800403c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004044:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	68d9      	ldr	r1, [r3, #12]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	b298      	uxth	r0, r3
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4603      	mov	r3, r0
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f9b8 	bl	80043d0 <USB_WritePacket>
 8004060:	e104      	b.n	800426c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	0151      	lsls	r1, r2, #5
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	440a      	add	r2, r1
 8004078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800407c:	0cdb      	lsrs	r3, r3, #19
 800407e:	04db      	lsls	r3, r3, #19
 8004080:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	440a      	add	r2, r1
 8004098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800409c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040a4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d131      	bne.n	8004110 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040da:	69b9      	ldr	r1, [r7, #24]
 80040dc:	0148      	lsls	r0, r1, #5
 80040de:	69f9      	ldr	r1, [r7, #28]
 80040e0:	4401      	add	r1, r0
 80040e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040e6:	4313      	orrs	r3, r2
 80040e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	0151      	lsls	r1, r2, #5
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	440a      	add	r2, r1
 8004100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004104:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004108:	6113      	str	r3, [r2, #16]
 800410a:	e061      	b.n	80041d0 <USB_EPStartXfer+0x484>
 800410c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d123      	bne.n	8004160 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412e:	69b9      	ldr	r1, [r7, #24]
 8004130:	0148      	lsls	r0, r1, #5
 8004132:	69f9      	ldr	r1, [r7, #28]
 8004134:	4401      	add	r1, r0
 8004136:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800413a:	4313      	orrs	r3, r2
 800413c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	440a      	add	r2, r1
 8004154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004158:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800415c:	6113      	str	r3, [r2, #16]
 800415e:	e037      	b.n	80041d0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	4413      	add	r3, r2
 800416a:	1e5a      	subs	r2, r3, #1
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	8afa      	ldrh	r2, [r7, #22]
 800417c:	fb03 f202 	mul.w	r2, r3, r2
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	8afb      	ldrh	r3, [r7, #22]
 8004194:	04d9      	lsls	r1, r3, #19
 8004196:	4b38      	ldr	r3, [pc, #224]	; (8004278 <USB_EPStartXfer+0x52c>)
 8004198:	400b      	ands	r3, r1
 800419a:	69b9      	ldr	r1, [r7, #24]
 800419c:	0148      	lsls	r0, r1, #5
 800419e:	69f9      	ldr	r1, [r7, #28]
 80041a0:	4401      	add	r1, r0
 80041a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041a6:	4313      	orrs	r3, r2
 80041a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c0:	69b9      	ldr	r1, [r7, #24]
 80041c2:	0148      	lsls	r0, r1, #5
 80041c4:	69f9      	ldr	r1, [r7, #28]
 80041c6:	4401      	add	r1, r0
 80041c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041cc:	4313      	orrs	r3, r2
 80041ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d10d      	bne.n	80041f2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	68d9      	ldr	r1, [r3, #12]
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ee:	460a      	mov	r2, r1
 80041f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	791b      	ldrb	r3, [r3, #4]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d128      	bne.n	800424c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d110      	bne.n	800422c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	0151      	lsls	r1, r2, #5
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	440a      	add	r2, r1
 8004220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004224:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e00f      	b.n	800424c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	0151      	lsls	r1, r2, #5
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	440a      	add	r2, r1
 8004242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	0151      	lsls	r1, r2, #5
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	440a      	add	r2, r1
 8004262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004266:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800426a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3720      	adds	r7, #32
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	1ff80000 	.word	0x1ff80000

0800427c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	785b      	ldrb	r3, [r3, #1]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d14a      	bne.n	8004330 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b2:	f040 8086 	bne.w	80043c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	7812      	ldrb	r2, [r2, #0]
 80042ca:	0151      	lsls	r1, r2, #5
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	440a      	add	r2, r1
 80042d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	7812      	ldrb	r2, [r2, #0]
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3301      	adds	r3, #1
 8004302:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f242 7210 	movw	r2, #10000	; 0x2710
 800430a:	4293      	cmp	r3, r2
 800430c:	d902      	bls.n	8004314 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]
          break;
 8004312:	e056      	b.n	80043c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800432c:	d0e7      	beq.n	80042fe <USB_EPStopXfer+0x82>
 800432e:	e048      	b.n	80043c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004348:	d13b      	bne.n	80043c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	7812      	ldrb	r2, [r2, #0]
 800435e:	0151      	lsls	r1, r2, #5
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	440a      	add	r2, r1
 8004364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004368:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800436c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	7812      	ldrb	r2, [r2, #0]
 8004382:	0151      	lsls	r1, r2, #5
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	440a      	add	r2, r1
 8004388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800438c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004390:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3301      	adds	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f242 7210 	movw	r2, #10000	; 0x2710
 800439e:	4293      	cmp	r3, r2
 80043a0:	d902      	bls.n	80043a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	75fb      	strb	r3, [r7, #23]
          break;
 80043a6:	e00c      	b.n	80043c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043c0:	d0e7      	beq.n	8004392 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b089      	sub	sp, #36	; 0x24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	4611      	mov	r1, r2
 80043dc:	461a      	mov	r2, r3
 80043de:	460b      	mov	r3, r1
 80043e0:	71fb      	strb	r3, [r7, #7]
 80043e2:	4613      	mov	r3, r2
 80043e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80043ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d123      	bne.n	800443e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80043f6:	88bb      	ldrh	r3, [r7, #4]
 80043f8:	3303      	adds	r3, #3
 80043fa:	089b      	lsrs	r3, r3, #2
 80043fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80043fe:	2300      	movs	r3, #0
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	e018      	b.n	8004436 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	031a      	lsls	r2, r3, #12
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	4413      	add	r3, r2
 800440c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004410:	461a      	mov	r2, r3
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	3301      	adds	r3, #1
 800441c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3301      	adds	r3, #1
 8004422:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	3301      	adds	r3, #1
 8004428:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3301      	adds	r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	3301      	adds	r3, #1
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	429a      	cmp	r2, r3
 800443c:	d3e2      	bcc.n	8004404 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3724      	adds	r7, #36	; 0x24
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800444c:	b480      	push	{r7}
 800444e:	b08b      	sub	sp, #44	; 0x2c
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004462:	88fb      	ldrh	r3, [r7, #6]
 8004464:	089b      	lsrs	r3, r3, #2
 8004466:	b29b      	uxth	r3, r3
 8004468:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004472:	2300      	movs	r3, #0
 8004474:	623b      	str	r3, [r7, #32]
 8004476:	e014      	b.n	80044a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	601a      	str	r2, [r3, #0]
    pDest++;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	3301      	adds	r3, #1
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	3301      	adds	r3, #1
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	3301      	adds	r3, #1
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	3301      	adds	r3, #1
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	3301      	adds	r3, #1
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	6a3a      	ldr	r2, [r7, #32]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d3e6      	bcc.n	8004478 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80044aa:	8bfb      	ldrh	r3, [r7, #30]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01e      	beq.n	80044ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ba:	461a      	mov	r2, r3
 80044bc:	f107 0310 	add.w	r3, r7, #16
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	701a      	strb	r2, [r3, #0]
      i++;
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	3301      	adds	r3, #1
 80044da:	623b      	str	r3, [r7, #32]
      pDest++;
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	3301      	adds	r3, #1
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80044e2:	8bfb      	ldrh	r3, [r7, #30]
 80044e4:	3b01      	subs	r3, #1
 80044e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80044e8:	8bfb      	ldrh	r3, [r7, #30]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ea      	bne.n	80044c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	372c      	adds	r7, #44	; 0x2c
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	785b      	ldrb	r3, [r3, #1]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d12c      	bne.n	8004572 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	db12      	blt.n	8004550 <USB_EPSetStall+0x54>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00f      	beq.n	8004550 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	0151      	lsls	r1, r2, #5
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	440a      	add	r2, r1
 8004546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800454e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	0151      	lsls	r1, r2, #5
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	440a      	add	r2, r1
 8004566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800456a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	e02b      	b.n	80045ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	db12      	blt.n	80045aa <USB_EPSetStall+0xae>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00f      	beq.n	80045aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	0151      	lsls	r1, r2, #5
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	440a      	add	r2, r1
 80045a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	0151      	lsls	r1, r2, #5
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	440a      	add	r2, r1
 80045c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	785b      	ldrb	r3, [r3, #1]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d128      	bne.n	8004646 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	0151      	lsls	r1, r2, #5
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	440a      	add	r2, r1
 800460a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004612:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	791b      	ldrb	r3, [r3, #4]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d003      	beq.n	8004624 <USB_EPClearStall+0x4c>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	791b      	ldrb	r3, [r3, #4]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d138      	bne.n	8004696 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800463e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	e027      	b.n	8004696 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	0151      	lsls	r1, r2, #5
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	440a      	add	r2, r1
 800465c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004660:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004664:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	791b      	ldrb	r3, [r3, #4]
 800466a:	2b03      	cmp	r3, #3
 800466c:	d003      	beq.n	8004676 <USB_EPClearStall+0x9e>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	791b      	ldrb	r3, [r3, #4]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d10f      	bne.n	8004696 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	0151      	lsls	r1, r2, #5
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	440a      	add	r2, r1
 800468c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004694:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80046d8:	68f9      	ldr	r1, [r7, #12]
 80046da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800470a:	f023 0303 	bic.w	r3, r3, #3
 800470e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800471e:	f023 0302 	bic.w	r3, r3, #2
 8004722:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800474c:	f023 0303 	bic.w	r3, r3, #3
 8004750:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004760:	f043 0302 	orr.w	r3, r3, #2
 8004764:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4013      	ands	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800478c:	68fb      	ldr	r3, [r7, #12]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	4013      	ands	r3, r2
 80047bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	0c1b      	lsrs	r3, r3, #16
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	4013      	ands	r3, r2
 80047f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	b29b      	uxth	r3, r3
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	460b      	mov	r3, r1
 800480c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	4013      	ands	r3, r2
 800482e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004830:	68bb      	ldr	r3, [r7, #8]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800483e:	b480      	push	{r7}
 8004840:	b087      	sub	sp, #28
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	460b      	mov	r3, r1
 8004848:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004860:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	fa22 f303 	lsr.w	r3, r2, r3
 800486e:	01db      	lsls	r3, r3, #7
 8004870:	b2db      	uxtb	r3, r3
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4013      	ands	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800488c:	68bb      	ldr	r3, [r7, #8]
}
 800488e:	4618      	mov	r0, r3
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0301 	and.w	r3, r3, #1
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048d4:	f023 0307 	bic.w	r3, r3, #7
 80048d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	460b      	mov	r3, r1
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	333c      	adds	r3, #60	; 0x3c
 8004912:	3304      	adds	r3, #4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4a26      	ldr	r2, [pc, #152]	; (80049b4 <USB_EP0_OutStart+0xb8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d90a      	bls.n	8004936 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800492c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004930:	d101      	bne.n	8004936 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	e037      	b.n	80049a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493c:	461a      	mov	r2, r3
 800493e:	2300      	movs	r3, #0
 8004940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004964:	f043 0318 	orr.w	r3, r3, #24
 8004968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004978:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800497c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800497e:	7afb      	ldrb	r3, [r7, #11]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d10f      	bne.n	80049a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	461a      	mov	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800499e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80049a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	4f54300a 	.word	0x4f54300a

080049b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3301      	adds	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80049d0:	d901      	bls.n	80049d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e01b      	b.n	8004a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	daf2      	bge.n	80049c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f043 0201 	orr.w	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3301      	adds	r3, #1
 80049f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80049fa:	d901      	bls.n	8004a00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e006      	b.n	8004a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d0f0      	beq.n	80049ee <USB_CoreReset+0x36>

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004a34:	2054      	movs	r0, #84	; 0x54
 8004a36:	f002 fab9 	bl	8006fac <USBD_static_malloc>
 8004a3a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	32b0      	adds	r2, #176	; 0xb0
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004a52:	2302      	movs	r3, #2
 8004a54:	e08b      	b.n	8004b6e <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	32b0      	adds	r2, #176	; 0xb0
 8004a60:	68f9      	ldr	r1, [r7, #12]
 8004a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	32b0      	adds	r2, #176	; 0xb0
 8004a70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	7c1b      	ldrb	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d11b      	bne.n	8004aba <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004a82:	4b3d      	ldr	r3, [pc, #244]	; (8004b78 <USBD_CUSTOM_HID_Init+0x150>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	f003 020f 	and.w	r2, r3, #15
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	3326      	adds	r3, #38	; 0x26
 8004a98:	2205      	movs	r2, #5
 8004a9a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004a9c:	4b37      	ldr	r3, [pc, #220]	; (8004b7c <USBD_CUSTOM_HID_Init+0x154>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	f003 020f 	and.w	r2, r3, #15
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8004ab4:	2205      	movs	r2, #5
 8004ab6:	801a      	strh	r2, [r3, #0]
 8004ab8:	e01a      	b.n	8004af0 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004aba:	4b2f      	ldr	r3, [pc, #188]	; (8004b78 <USBD_CUSTOM_HID_Init+0x150>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	f003 020f 	and.w	r2, r3, #15
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	3326      	adds	r3, #38	; 0x26
 8004ad0:	2205      	movs	r2, #5
 8004ad2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004ad4:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <USBD_CUSTOM_HID_Init+0x154>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	f003 020f 	and.w	r2, r3, #15
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8004aec:	2205      	movs	r2, #5
 8004aee:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004af0:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <USBD_CUSTOM_HID_Init+0x150>)
 8004af2:	7819      	ldrb	r1, [r3, #0]
 8004af4:	2302      	movs	r3, #2
 8004af6:	2203      	movs	r2, #3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f002 f946 	bl	8006d8a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004afe:	4b1e      	ldr	r3, [pc, #120]	; (8004b78 <USBD_CUSTOM_HID_Init+0x150>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f003 020f 	and.w	r2, r3, #15
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	3324      	adds	r3, #36	; 0x24
 8004b14:	2201      	movs	r2, #1
 8004b16:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004b18:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <USBD_CUSTOM_HID_Init+0x154>)
 8004b1a:	7819      	ldrb	r1, [r3, #0]
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	2203      	movs	r2, #3
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f002 f932 	bl	8006d8a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8004b26:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <USBD_CUSTOM_HID_Init+0x154>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	f003 020f 	and.w	r2, r3, #15
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004b3e:	2201      	movs	r2, #1
 8004b40:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	33b0      	adds	r3, #176	; 0xb0
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004b5e:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <USBD_CUSTOM_HID_Init+0x154>)
 8004b60:	7819      	ldrb	r1, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	2340      	movs	r3, #64	; 0x40
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f002 f9fe 	bl	8006f68 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000086 	.word	0x20000086
 8004b7c:	20000087 	.word	0x20000087

08004b80 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8004b8c:	4b37      	ldr	r3, [pc, #220]	; (8004c6c <USBD_CUSTOM_HID_DeInit+0xec>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	4619      	mov	r1, r3
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f002 f91f 	bl	8006dd6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8004b98:	4b34      	ldr	r3, [pc, #208]	; (8004c6c <USBD_CUSTOM_HID_DeInit+0xec>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	f003 020f 	and.w	r2, r3, #15
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	3324      	adds	r3, #36	; 0x24
 8004bae:	2200      	movs	r2, #0
 8004bb0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8004bb2:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <USBD_CUSTOM_HID_DeInit+0xec>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	f003 020f 	and.w	r2, r3, #15
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3326      	adds	r3, #38	; 0x26
 8004bc8:	2200      	movs	r2, #0
 8004bca:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8004bcc:	4b28      	ldr	r3, [pc, #160]	; (8004c70 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f002 f8ff 	bl	8006dd6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8004bd8:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	f003 020f 	and.w	r2, r3, #15
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	440b      	add	r3, r1
 8004bec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004bf4:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	f003 020f 	and.w	r2, r3, #15
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	32b0      	adds	r2, #176	; 0xb0
 8004c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d01f      	beq.n	8004c62 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	33b0      	adds	r3, #176	; 0xb0
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	32b0      	adds	r2, #176	; 0xb0
 8004c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f002 f9bf 	bl	8006fc8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	32b0      	adds	r2, #176	; 0xb0
 8004c54:	2100      	movs	r1, #0
 8004c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000086 	.word	0x20000086
 8004c70:	20000087 	.word	0x20000087

08004c74 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	32b0      	adds	r2, #176	; 0xb0
 8004c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e0f8      	b.n	8004e9a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d056      	beq.n	8004d62 <USBD_CUSTOM_HID_Setup+0xee>
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	f040 80e8 	bne.w	8004e8a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	785b      	ldrb	r3, [r3, #1]
 8004cbe:	3b02      	subs	r3, #2
 8004cc0:	2b09      	cmp	r3, #9
 8004cc2:	d846      	bhi.n	8004d52 <USBD_CUSTOM_HID_Setup+0xde>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <USBD_CUSTOM_HID_Setup+0x58>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004d25 	.word	0x08004d25
 8004cd0:	08004d03 	.word	0x08004d03
 8004cd4:	08004d53 	.word	0x08004d53
 8004cd8:	08004d53 	.word	0x08004d53
 8004cdc:	08004d53 	.word	0x08004d53
 8004ce0:	08004d53 	.word	0x08004d53
 8004ce4:	08004d53 	.word	0x08004d53
 8004ce8:	08004d35 	.word	0x08004d35
 8004cec:	08004d13 	.word	0x08004d13
 8004cf0:	08004cf5 	.word	0x08004cf5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	885b      	ldrh	r3, [r3, #2]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8004d00:	e02e      	b.n	8004d60 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	3340      	adds	r3, #64	; 0x40
 8004d06:	2201      	movs	r2, #1
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 fca0 	bl	8006650 <USBD_CtlSendData>
          break;
 8004d10:	e026      	b.n	8004d60 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	885b      	ldrh	r3, [r3, #2]
 8004d16:	0a1b      	lsrs	r3, r3, #8
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8004d22:	e01d      	b.n	8004d60 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	3344      	adds	r3, #68	; 0x44
 8004d28:	2201      	movs	r2, #1
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f001 fc8f 	bl	8006650 <USBD_CtlSendData>
          break;
 8004d32:	e015      	b.n	8004d60 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2201      	movs	r2, #1
 8004d38:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004d3a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	88db      	ldrh	r3, [r3, #6]
 8004d40:	2b40      	cmp	r3, #64	; 0x40
 8004d42:	bf28      	it	cs
 8004d44:	2340      	movcs	r3, #64	; 0x40
 8004d46:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f001 fcac 	bl	80066a8 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8004d50:	e006      	b.n	8004d60 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8004d52:	6839      	ldr	r1, [r7, #0]
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f001 fc0a 	bl	800656e <USBD_CtlError>
          ret = USBD_FAIL;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8004d5e:	bf00      	nop
      }
      break;
 8004d60:	e09a      	b.n	8004e98 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	785b      	ldrb	r3, [r3, #1]
 8004d66:	2b0b      	cmp	r3, #11
 8004d68:	f200 8086 	bhi.w	8004e78 <USBD_CUSTOM_HID_Setup+0x204>
 8004d6c:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <USBD_CUSTOM_HID_Setup+0x100>)
 8004d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d72:	bf00      	nop
 8004d74:	08004da5 	.word	0x08004da5
 8004d78:	08004e87 	.word	0x08004e87
 8004d7c:	08004e79 	.word	0x08004e79
 8004d80:	08004e79 	.word	0x08004e79
 8004d84:	08004e79 	.word	0x08004e79
 8004d88:	08004e79 	.word	0x08004e79
 8004d8c:	08004dcf 	.word	0x08004dcf
 8004d90:	08004e79 	.word	0x08004e79
 8004d94:	08004e79 	.word	0x08004e79
 8004d98:	08004e79 	.word	0x08004e79
 8004d9c:	08004e27 	.word	0x08004e27
 8004da0:	08004e51 	.word	0x08004e51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d107      	bne.n	8004dc0 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004db0:	f107 030e 	add.w	r3, r7, #14
 8004db4:	2202      	movs	r2, #2
 8004db6:	4619      	mov	r1, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f001 fc49 	bl	8006650 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004dbe:	e063      	b.n	8004e88 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f001 fbd3 	bl	800656e <USBD_CtlError>
            ret = USBD_FAIL;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	75fb      	strb	r3, [r7, #23]
          break;
 8004dcc:	e05c      	b.n	8004e88 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	885b      	ldrh	r3, [r3, #2]
 8004dd2:	0a1b      	lsrs	r3, r3, #8
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b22      	cmp	r3, #34	; 0x22
 8004dd8:	d110      	bne.n	8004dfc <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	88db      	ldrh	r3, [r3, #6]
 8004dde:	2b62      	cmp	r3, #98	; 0x62
 8004de0:	bf28      	it	cs
 8004de2:	2362      	movcs	r3, #98	; 0x62
 8004de4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	33b0      	adds	r3, #176	; 0xb0
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	e00d      	b.n	8004e18 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	885b      	ldrh	r3, [r3, #2]
 8004e00:	0a1b      	lsrs	r3, r3, #8
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b21      	cmp	r3, #33	; 0x21
 8004e06:	d107      	bne.n	8004e18 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8004e08:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <USBD_CUSTOM_HID_Setup+0x230>)
 8004e0a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	88db      	ldrh	r3, [r3, #6]
 8004e10:	2b09      	cmp	r3, #9
 8004e12:	bf28      	it	cs
 8004e14:	2309      	movcs	r3, #9
 8004e16:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004e18:	8bfb      	ldrh	r3, [r7, #30]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	69b9      	ldr	r1, [r7, #24]
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f001 fc16 	bl	8006650 <USBD_CtlSendData>
          break;
 8004e24:	e030      	b.n	8004e88 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d107      	bne.n	8004e42 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	3348      	adds	r3, #72	; 0x48
 8004e36:	2201      	movs	r2, #1
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 fc08 	bl	8006650 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e40:	e022      	b.n	8004e88 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f001 fb92 	bl	800656e <USBD_CtlError>
            ret = USBD_FAIL;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	75fb      	strb	r3, [r7, #23]
          break;
 8004e4e:	e01b      	b.n	8004e88 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d106      	bne.n	8004e6a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	885b      	ldrh	r3, [r3, #2]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e68:	e00e      	b.n	8004e88 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f001 fb7e 	bl	800656e <USBD_CtlError>
            ret = USBD_FAIL;
 8004e72:	2303      	movs	r3, #3
 8004e74:	75fb      	strb	r3, [r7, #23]
          break;
 8004e76:	e007      	b.n	8004e88 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004e78:	6839      	ldr	r1, [r7, #0]
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f001 fb77 	bl	800656e <USBD_CtlError>
          ret = USBD_FAIL;
 8004e80:	2303      	movs	r3, #3
 8004e82:	75fb      	strb	r3, [r7, #23]
          break;
 8004e84:	e000      	b.n	8004e88 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8004e86:	bf00      	nop
      }
      break;
 8004e88:	e006      	b.n	8004e98 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f001 fb6e 	bl	800656e <USBD_CtlError>
      ret = USBD_FAIL;
 8004e92:	2303      	movs	r3, #3
 8004e94:	75fb      	strb	r3, [r7, #23]
      break;
 8004e96:	bf00      	nop
  }
  return (uint8_t)ret;
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000070 	.word	0x20000070

08004ea8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004eb0:	2181      	movs	r1, #129	; 0x81
 8004eb2:	4815      	ldr	r0, [pc, #84]	; (8004f08 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8004eb4:	f000 fd23 	bl	80058fe <USBD_GetEpDesc>
 8004eb8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8004eba:	2101      	movs	r1, #1
 8004ebc:	4812      	ldr	r0, [pc, #72]	; (8004f08 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8004ebe:	f000 fd1e 	bl	80058fe <USBD_GetEpDesc>
 8004ec2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f042 0202 	orr.w	r2, r2, #2
 8004ed2:	711a      	strb	r2, [r3, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2205      	movs	r2, #5
 8004edc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f042 0202 	orr.w	r2, r2, #2
 8004eec:	711a      	strb	r2, [r3, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2205      	movs	r2, #5
 8004ef6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2229      	movs	r2, #41	; 0x29
 8004efc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004efe:	4b02      	ldr	r3, [pc, #8]	; (8004f08 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20000044 	.word	0x20000044

08004f0c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004f14:	2181      	movs	r1, #129	; 0x81
 8004f16:	4815      	ldr	r0, [pc, #84]	; (8004f6c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8004f18:	f000 fcf1 	bl	80058fe <USBD_GetEpDesc>
 8004f1c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4812      	ldr	r0, [pc, #72]	; (8004f6c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8004f22:	f000 fcec 	bl	80058fe <USBD_GetEpDesc>
 8004f26:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f042 0202 	orr.w	r2, r2, #2
 8004f36:	711a      	strb	r2, [r3, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2205      	movs	r2, #5
 8004f40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f042 0202 	orr.w	r2, r2, #2
 8004f50:	711a      	strb	r2, [r3, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2205      	movs	r2, #5
 8004f5a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2229      	movs	r2, #41	; 0x29
 8004f60:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004f62:	4b02      	ldr	r3, [pc, #8]	; (8004f6c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000044 	.word	0x20000044

08004f70 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004f78:	2181      	movs	r1, #129	; 0x81
 8004f7a:	4815      	ldr	r0, [pc, #84]	; (8004fd0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8004f7c:	f000 fcbf 	bl	80058fe <USBD_GetEpDesc>
 8004f80:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8004f82:	2101      	movs	r1, #1
 8004f84:	4812      	ldr	r0, [pc, #72]	; (8004fd0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8004f86:	f000 fcba 	bl	80058fe <USBD_GetEpDesc>
 8004f8a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f042 0202 	orr.w	r2, r2, #2
 8004f9a:	711a      	strb	r2, [r3, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2205      	movs	r2, #5
 8004fa4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f042 0202 	orr.w	r2, r2, #2
 8004fb4:	711a      	strb	r2, [r3, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2205      	movs	r2, #5
 8004fbe:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2229      	movs	r2, #41	; 0x29
 8004fc4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004fc6:	4b02      	ldr	r3, [pc, #8]	; (8004fd0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20000044 	.word	0x20000044

08004fd4 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8004fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fe4:	4808      	ldr	r0, [pc, #32]	; (8005008 <USBD_CUSTOM_HID_DataIn+0x34>)
 8004fe6:	f7fc f828 	bl	800103a <HAL_GPIO_TogglePin>
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	32b0      	adds	r2, #176	; 0xb0
 8004ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40020c00 	.word	0x40020c00

0800500c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	32b0      	adds	r2, #176	; 0xb0
 8005022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800502a:	2303      	movs	r3, #3
 800502c:	e017      	b.n	800505e <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	32b0      	adds	r2, #176	; 0xb0
 8005038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	33b0      	adds	r3, #176	; 0xb0
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	7810      	ldrb	r0, [r2, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	7852      	ldrb	r2, [r2, #1]
 8005058:	4611      	mov	r1, r2
 800505a:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	32b0      	adds	r2, #176	; 0xb0
 800507a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005082:	2303      	movs	r3, #3
 8005084:	e00f      	b.n	80050a6 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	32b0      	adds	r2, #176	; 0xb0
 8005090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005094:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005098:	7819      	ldrb	r1, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	2340      	movs	r3, #64	; 0x40
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f001 ff62 	bl	8006f68 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000087 	.word	0x20000087

080050b4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	32b0      	adds	r2, #176	; 0xb0
 80050c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ca:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e016      	b.n	8005104 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d111      	bne.n	8005102 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	33b0      	adds	r3, #176	; 0xb0
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	7810      	ldrb	r0, [r2, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	7852      	ldrb	r2, [r2, #1]
 80050f8:	4611      	mov	r1, r2
 80050fa:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	220a      	movs	r2, #10
 8005118:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800511a:	4b03      	ldr	r3, [pc, #12]	; (8005128 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	2000007c 	.word	0x2000007c

0800512c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800513c:	2303      	movs	r3, #3
 800513e:	e009      	b.n	8005154 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	33b0      	adds	r3, #176	; 0xb0
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005174:	2303      	movs	r3, #3
 8005176:	e01f      	b.n	80051b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	79fa      	ldrb	r2, [r7, #7]
 80051aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f001 fd85 	bl	8006cbc <USBD_LL_Init>
 80051b2:	4603      	mov	r3, r0
 80051b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e025      	b.n	8005224 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	32ae      	adds	r2, #174	; 0xae
 80051ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00f      	beq.n	8005214 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	32ae      	adds	r2, #174	; 0xae
 80051fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	f107 020e 	add.w	r2, r7, #14
 8005208:	4610      	mov	r0, r2
 800520a:	4798      	blx	r3
 800520c:	4602      	mov	r2, r0
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f001 fd8d 	bl	8006d54 <USBD_LL_Start>
 800523a:	4603      	mov	r3, r0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800524c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005270:	2b00      	cmp	r3, #0
 8005272:	d009      	beq.n	8005288 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	78fa      	ldrb	r2, [r7, #3]
 800527e:	4611      	mov	r1, r2
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
 8005284:	4603      	mov	r3, r0
 8005286:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005288:	7bfb      	ldrb	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	78fa      	ldrb	r2, [r7, #3]
 80052ac:	4611      	mov	r1, r2
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	4798      	blx	r3
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80052b8:	2303      	movs	r3, #3
 80052ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80052d6:	6839      	ldr	r1, [r7, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f001 f90e 	bl	80064fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80052ec:	461a      	mov	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d01a      	beq.n	8005338 <USBD_LL_SetupStage+0x72>
 8005302:	2b02      	cmp	r3, #2
 8005304:	d822      	bhi.n	800534c <USBD_LL_SetupStage+0x86>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <USBD_LL_SetupStage+0x4a>
 800530a:	2b01      	cmp	r3, #1
 800530c:	d00a      	beq.n	8005324 <USBD_LL_SetupStage+0x5e>
 800530e:	e01d      	b.n	800534c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005316:	4619      	mov	r1, r3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fb65 	bl	80059e8 <USBD_StdDevReq>
 800531e:	4603      	mov	r3, r0
 8005320:	73fb      	strb	r3, [r7, #15]
      break;
 8005322:	e020      	b.n	8005366 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800532a:	4619      	mov	r1, r3
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fbcd 	bl	8005acc <USBD_StdItfReq>
 8005332:	4603      	mov	r3, r0
 8005334:	73fb      	strb	r3, [r7, #15]
      break;
 8005336:	e016      	b.n	8005366 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fc2f 	bl	8005ba4 <USBD_StdEPReq>
 8005346:	4603      	mov	r3, r0
 8005348:	73fb      	strb	r3, [r7, #15]
      break;
 800534a:	e00c      	b.n	8005366 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005352:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005356:	b2db      	uxtb	r3, r3
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f001 fd5a 	bl	8006e14 <USBD_LL_StallEP>
 8005360:	4603      	mov	r3, r0
 8005362:	73fb      	strb	r3, [r7, #15]
      break;
 8005364:	bf00      	nop
  }

  return ret;
 8005366:	7bfb      	ldrb	r3, [r7, #15]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	460b      	mov	r3, r1
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005382:	7afb      	ldrb	r3, [r7, #11]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d16e      	bne.n	8005466 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800538e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005396:	2b03      	cmp	r3, #3
 8005398:	f040 8098 	bne.w	80054cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d913      	bls.n	80053d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	1ad2      	subs	r2, r2, r3
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	4293      	cmp	r3, r2
 80053c0:	bf28      	it	cs
 80053c2:	4613      	movcs	r3, r2
 80053c4:	461a      	mov	r2, r3
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f001 f98a 	bl	80066e2 <USBD_CtlContinueRx>
 80053ce:	e07d      	b.n	80054cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053d6:	f003 031f 	and.w	r3, r3, #31
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d014      	beq.n	8005408 <USBD_LL_DataOutStage+0x98>
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d81d      	bhi.n	800541e <USBD_LL_DataOutStage+0xae>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <USBD_LL_DataOutStage+0x7c>
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d003      	beq.n	80053f2 <USBD_LL_DataOutStage+0x82>
 80053ea:	e018      	b.n	800541e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	75bb      	strb	r3, [r7, #22]
            break;
 80053f0:	e018      	b.n	8005424 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	4619      	mov	r1, r3
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 fa64 	bl	80058ca <USBD_CoreFindIF>
 8005402:	4603      	mov	r3, r0
 8005404:	75bb      	strb	r3, [r7, #22]
            break;
 8005406:	e00d      	b.n	8005424 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800540e:	b2db      	uxtb	r3, r3
 8005410:	4619      	mov	r1, r3
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fa66 	bl	80058e4 <USBD_CoreFindEP>
 8005418:	4603      	mov	r3, r0
 800541a:	75bb      	strb	r3, [r7, #22]
            break;
 800541c:	e002      	b.n	8005424 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	75bb      	strb	r3, [r7, #22]
            break;
 8005422:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005424:	7dbb      	ldrb	r3, [r7, #22]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d119      	bne.n	800545e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b03      	cmp	r3, #3
 8005434:	d113      	bne.n	800545e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005436:	7dba      	ldrb	r2, [r7, #22]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	32ae      	adds	r2, #174	; 0xae
 800543c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005446:	7dba      	ldrb	r2, [r7, #22]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800544e:	7dba      	ldrb	r2, [r7, #22]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	32ae      	adds	r2, #174	; 0xae
 8005454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f001 f950 	bl	8006704 <USBD_CtlSendStatus>
 8005464:	e032      	b.n	80054cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005466:	7afb      	ldrb	r3, [r7, #11]
 8005468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800546c:	b2db      	uxtb	r3, r3
 800546e:	4619      	mov	r1, r3
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fa37 	bl	80058e4 <USBD_CoreFindEP>
 8005476:	4603      	mov	r3, r0
 8005478:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800547a:	7dbb      	ldrb	r3, [r7, #22]
 800547c:	2bff      	cmp	r3, #255	; 0xff
 800547e:	d025      	beq.n	80054cc <USBD_LL_DataOutStage+0x15c>
 8005480:	7dbb      	ldrb	r3, [r7, #22]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d122      	bne.n	80054cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b03      	cmp	r3, #3
 8005490:	d117      	bne.n	80054c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005492:	7dba      	ldrb	r2, [r7, #22]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	32ae      	adds	r2, #174	; 0xae
 8005498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00f      	beq.n	80054c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80054a2:	7dba      	ldrb	r2, [r7, #22]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80054aa:	7dba      	ldrb	r2, [r7, #22]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	32ae      	adds	r2, #174	; 0xae
 80054b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	7afa      	ldrb	r2, [r7, #11]
 80054b8:	4611      	mov	r1, r2
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	4798      	blx	r3
 80054be:	4603      	mov	r3, r0
 80054c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80054c8:	7dfb      	ldrb	r3, [r7, #23]
 80054ca:	e000      	b.n	80054ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b086      	sub	sp, #24
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	460b      	mov	r3, r1
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80054e4:	7afb      	ldrb	r3, [r7, #11]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d16f      	bne.n	80055ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3314      	adds	r3, #20
 80054ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d15a      	bne.n	80055b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	429a      	cmp	r2, r3
 8005504:	d914      	bls.n	8005530 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	461a      	mov	r2, r3
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f001 f8b2 	bl	8006686 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005522:	2300      	movs	r3, #0
 8005524:	2200      	movs	r2, #0
 8005526:	2100      	movs	r1, #0
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f001 fd1d 	bl	8006f68 <USBD_LL_PrepareReceive>
 800552e:	e03f      	b.n	80055b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	429a      	cmp	r2, r3
 800553a:	d11c      	bne.n	8005576 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005544:	429a      	cmp	r2, r3
 8005546:	d316      	bcc.n	8005576 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005552:	429a      	cmp	r2, r3
 8005554:	d20f      	bcs.n	8005576 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005556:	2200      	movs	r2, #0
 8005558:	2100      	movs	r1, #0
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f001 f893 	bl	8006686 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005568:	2300      	movs	r3, #0
 800556a:	2200      	movs	r2, #0
 800556c:	2100      	movs	r1, #0
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f001 fcfa 	bl	8006f68 <USBD_LL_PrepareReceive>
 8005574:	e01c      	b.n	80055b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b03      	cmp	r3, #3
 8005580:	d10f      	bne.n	80055a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d009      	beq.n	80055a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80055a2:	2180      	movs	r1, #128	; 0x80
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f001 fc35 	bl	8006e14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f001 f8bd 	bl	800672a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d03a      	beq.n	8005630 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f7ff fe42 	bl	8005244 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80055c8:	e032      	b.n	8005630 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80055ca:	7afb      	ldrb	r3, [r7, #11]
 80055cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	4619      	mov	r1, r3
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f985 	bl	80058e4 <USBD_CoreFindEP>
 80055da:	4603      	mov	r3, r0
 80055dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	2bff      	cmp	r3, #255	; 0xff
 80055e2:	d025      	beq.n	8005630 <USBD_LL_DataInStage+0x15a>
 80055e4:	7dfb      	ldrb	r3, [r7, #23]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d122      	bne.n	8005630 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d11c      	bne.n	8005630 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80055f6:	7dfa      	ldrb	r2, [r7, #23]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	32ae      	adds	r2, #174	; 0xae
 80055fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d014      	beq.n	8005630 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005606:	7dfa      	ldrb	r2, [r7, #23]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800560e:	7dfa      	ldrb	r2, [r7, #23]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	32ae      	adds	r2, #174	; 0xae
 8005614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	7afa      	ldrb	r2, [r7, #11]
 800561c:	4611      	mov	r1, r2
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	4798      	blx	r3
 8005622:	4603      	mov	r3, r0
 8005624:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005626:	7dbb      	ldrb	r3, [r7, #22]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800562c:	7dbb      	ldrb	r3, [r7, #22]
 800562e:	e000      	b.n	8005632 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d014      	beq.n	80056a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00e      	beq.n	80056a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6852      	ldr	r2, [r2, #4]
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	4611      	mov	r1, r2
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800569c:	2303      	movs	r3, #3
 800569e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056a0:	2340      	movs	r3, #64	; 0x40
 80056a2:	2200      	movs	r2, #0
 80056a4:	2100      	movs	r1, #0
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f001 fb6f 	bl	8006d8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2240      	movs	r2, #64	; 0x40
 80056b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056bc:	2340      	movs	r3, #64	; 0x40
 80056be:	2200      	movs	r2, #0
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 fb61 	bl	8006d8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2240      	movs	r2, #64	; 0x40
 80056d2:	621a      	str	r2, [r3, #32]

  return ret;
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	460b      	mov	r3, r1
 80056e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b04      	cmp	r3, #4
 8005710:	d006      	beq.n	8005720 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005718:	b2da      	uxtb	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2204      	movs	r2, #4
 8005724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b04      	cmp	r3, #4
 8005748:	d106      	bne.n	8005758 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005750:	b2da      	uxtb	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b03      	cmp	r3, #3
 8005778:	d110      	bne.n	800579c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00b      	beq.n	800579c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	32ae      	adds	r2, #174	; 0xae
 80057bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e01c      	b.n	8005802 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d115      	bne.n	8005800 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	32ae      	adds	r2, #174	; 0xae
 80057de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00b      	beq.n	8005800 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	32ae      	adds	r2, #174	; 0xae
 80057f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	4611      	mov	r1, r2
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	460b      	mov	r3, r1
 8005814:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	32ae      	adds	r2, #174	; 0xae
 8005820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005828:	2303      	movs	r3, #3
 800582a:	e01c      	b.n	8005866 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b03      	cmp	r3, #3
 8005836:	d115      	bne.n	8005864 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	32ae      	adds	r2, #174	; 0xae
 8005842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00b      	beq.n	8005864 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	32ae      	adds	r2, #174	; 0xae
 8005856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	78fa      	ldrb	r2, [r7, #3]
 800585e:	4611      	mov	r1, r2
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00e      	beq.n	80058c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6852      	ldr	r2, [r2, #4]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	4611      	mov	r1, r2
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	4798      	blx	r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80058bc:	2303      	movs	r3, #3
 80058be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	460b      	mov	r3, r1
 80058d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80058d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80058f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005912:	2300      	movs	r3, #0
 8005914:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	885b      	ldrh	r3, [r3, #2]
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	429a      	cmp	r2, r3
 8005924:	d920      	bls.n	8005968 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800592e:	e013      	b.n	8005958 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005930:	f107 030a 	add.w	r3, r7, #10
 8005934:	4619      	mov	r1, r3
 8005936:	6978      	ldr	r0, [r7, #20]
 8005938:	f000 f81b 	bl	8005972 <USBD_GetNextDesc>
 800593c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	2b05      	cmp	r3, #5
 8005944:	d108      	bne.n	8005958 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	789b      	ldrb	r3, [r3, #2]
 800594e:	78fa      	ldrb	r2, [r7, #3]
 8005950:	429a      	cmp	r2, r3
 8005952:	d008      	beq.n	8005966 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005954:	2300      	movs	r3, #0
 8005956:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	885b      	ldrh	r3, [r3, #2]
 800595c:	b29a      	uxth	r2, r3
 800595e:	897b      	ldrh	r3, [r7, #10]
 8005960:	429a      	cmp	r2, r3
 8005962:	d8e5      	bhi.n	8005930 <USBD_GetEpDesc+0x32>
 8005964:	e000      	b.n	8005968 <USBD_GetEpDesc+0x6a>
          break;
 8005966:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005968:	693b      	ldr	r3, [r7, #16]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	881a      	ldrh	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	4413      	add	r3, r2
 800598c:	b29a      	uxth	r2, r3
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4413      	add	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800599e:	68fb      	ldr	r3, [r7, #12]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	3301      	adds	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80059ca:	8a3b      	ldrh	r3, [r7, #16]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	b21a      	sxth	r2, r3
 80059d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	b21b      	sxth	r3, r3
 80059d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80059da:	89fb      	ldrh	r3, [r7, #14]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	d005      	beq.n	8005a0e <USBD_StdDevReq+0x26>
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d857      	bhi.n	8005ab6 <USBD_StdDevReq+0xce>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00f      	beq.n	8005a2a <USBD_StdDevReq+0x42>
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d153      	bne.n	8005ab6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	32ae      	adds	r2, #174	; 0xae
 8005a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	6839      	ldr	r1, [r7, #0]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
 8005a24:	4603      	mov	r3, r0
 8005a26:	73fb      	strb	r3, [r7, #15]
      break;
 8005a28:	e04a      	b.n	8005ac0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	2b09      	cmp	r3, #9
 8005a30:	d83b      	bhi.n	8005aaa <USBD_StdDevReq+0xc2>
 8005a32:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <USBD_StdDevReq+0x50>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a8d 	.word	0x08005a8d
 8005a3c:	08005aa1 	.word	0x08005aa1
 8005a40:	08005aab 	.word	0x08005aab
 8005a44:	08005a97 	.word	0x08005a97
 8005a48:	08005aab 	.word	0x08005aab
 8005a4c:	08005a6b 	.word	0x08005a6b
 8005a50:	08005a61 	.word	0x08005a61
 8005a54:	08005aab 	.word	0x08005aab
 8005a58:	08005a83 	.word	0x08005a83
 8005a5c:	08005a75 	.word	0x08005a75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fa3c 	bl	8005ee0 <USBD_GetDescriptor>
          break;
 8005a68:	e024      	b.n	8005ab4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fba1 	bl	80061b4 <USBD_SetAddress>
          break;
 8005a72:	e01f      	b.n	8005ab4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fbe0 	bl	800623c <USBD_SetConfig>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]
          break;
 8005a80:	e018      	b.n	8005ab4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fc83 	bl	8006390 <USBD_GetConfig>
          break;
 8005a8a:	e013      	b.n	8005ab4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a8c:	6839      	ldr	r1, [r7, #0]
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fcb4 	bl	80063fc <USBD_GetStatus>
          break;
 8005a94:	e00e      	b.n	8005ab4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fce3 	bl	8006464 <USBD_SetFeature>
          break;
 8005a9e:	e009      	b.n	8005ab4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fd07 	bl	80064b6 <USBD_ClrFeature>
          break;
 8005aa8:	e004      	b.n	8005ab4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fd5e 	bl	800656e <USBD_CtlError>
          break;
 8005ab2:	bf00      	nop
      }
      break;
 8005ab4:	e004      	b.n	8005ac0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005ab6:	6839      	ldr	r1, [r7, #0]
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fd58 	bl	800656e <USBD_CtlError>
      break;
 8005abe:	bf00      	nop
  }

  return ret;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop

08005acc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	d005      	beq.n	8005af2 <USBD_StdItfReq+0x26>
 8005ae6:	2b40      	cmp	r3, #64	; 0x40
 8005ae8:	d852      	bhi.n	8005b90 <USBD_StdItfReq+0xc4>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <USBD_StdItfReq+0x26>
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d14e      	bne.n	8005b90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d840      	bhi.n	8005b82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	889b      	ldrh	r3, [r3, #4]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d836      	bhi.n	8005b78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	889b      	ldrh	r3, [r3, #4]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff fed9 	bl	80058ca <USBD_CoreFindIF>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b1c:	7bbb      	ldrb	r3, [r7, #14]
 8005b1e:	2bff      	cmp	r3, #255	; 0xff
 8005b20:	d01d      	beq.n	8005b5e <USBD_StdItfReq+0x92>
 8005b22:	7bbb      	ldrb	r3, [r7, #14]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d11a      	bne.n	8005b5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005b28:	7bba      	ldrb	r2, [r7, #14]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	32ae      	adds	r2, #174	; 0xae
 8005b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00f      	beq.n	8005b58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005b38:	7bba      	ldrb	r2, [r7, #14]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005b40:	7bba      	ldrb	r2, [r7, #14]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	32ae      	adds	r2, #174	; 0xae
 8005b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	4798      	blx	r3
 8005b52:	4603      	mov	r3, r0
 8005b54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005b56:	e004      	b.n	8005b62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005b5c:	e001      	b.n	8005b62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	88db      	ldrh	r3, [r3, #6]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d110      	bne.n	8005b8c <USBD_StdItfReq+0xc0>
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10d      	bne.n	8005b8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fdc7 	bl	8006704 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b76:	e009      	b.n	8005b8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fcf7 	bl	800656e <USBD_CtlError>
          break;
 8005b80:	e004      	b.n	8005b8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fcf2 	bl	800656e <USBD_CtlError>
          break;
 8005b8a:	e000      	b.n	8005b8e <USBD_StdItfReq+0xc2>
          break;
 8005b8c:	bf00      	nop
      }
      break;
 8005b8e:	e004      	b.n	8005b9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fceb 	bl	800656e <USBD_CtlError>
      break;
 8005b98:	bf00      	nop
  }

  return ret;
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	889b      	ldrh	r3, [r3, #4]
 8005bb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d007      	beq.n	8005bd4 <USBD_StdEPReq+0x30>
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	f200 817f 	bhi.w	8005ec8 <USBD_StdEPReq+0x324>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d02a      	beq.n	8005c24 <USBD_StdEPReq+0x80>
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	f040 817a 	bne.w	8005ec8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff fe83 	bl	80058e4 <USBD_CoreFindEP>
 8005bde:	4603      	mov	r3, r0
 8005be0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005be2:	7b7b      	ldrb	r3, [r7, #13]
 8005be4:	2bff      	cmp	r3, #255	; 0xff
 8005be6:	f000 8174 	beq.w	8005ed2 <USBD_StdEPReq+0x32e>
 8005bea:	7b7b      	ldrb	r3, [r7, #13]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f040 8170 	bne.w	8005ed2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005bf2:	7b7a      	ldrb	r2, [r7, #13]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005bfa:	7b7a      	ldrb	r2, [r7, #13]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	32ae      	adds	r2, #174	; 0xae
 8005c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 8163 	beq.w	8005ed2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005c0c:	7b7a      	ldrb	r2, [r7, #13]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	32ae      	adds	r2, #174	; 0xae
 8005c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c22:	e156      	b.n	8005ed2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d008      	beq.n	8005c3e <USBD_StdEPReq+0x9a>
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	f300 8145 	bgt.w	8005ebc <USBD_StdEPReq+0x318>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 809b 	beq.w	8005d6e <USBD_StdEPReq+0x1ca>
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d03c      	beq.n	8005cb6 <USBD_StdEPReq+0x112>
 8005c3c:	e13e      	b.n	8005ebc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d002      	beq.n	8005c50 <USBD_StdEPReq+0xac>
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d016      	beq.n	8005c7c <USBD_StdEPReq+0xd8>
 8005c4e:	e02c      	b.n	8005caa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c50:	7bbb      	ldrb	r3, [r7, #14]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00d      	beq.n	8005c72 <USBD_StdEPReq+0xce>
 8005c56:	7bbb      	ldrb	r3, [r7, #14]
 8005c58:	2b80      	cmp	r3, #128	; 0x80
 8005c5a:	d00a      	beq.n	8005c72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c5c:	7bbb      	ldrb	r3, [r7, #14]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 f8d7 	bl	8006e14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c66:	2180      	movs	r1, #128	; 0x80
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f001 f8d3 	bl	8006e14 <USBD_LL_StallEP>
 8005c6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c70:	e020      	b.n	8005cb4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fc7a 	bl	800656e <USBD_CtlError>
              break;
 8005c7a:	e01b      	b.n	8005cb4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	885b      	ldrh	r3, [r3, #2]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10e      	bne.n	8005ca2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c84:	7bbb      	ldrb	r3, [r7, #14]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00b      	beq.n	8005ca2 <USBD_StdEPReq+0xfe>
 8005c8a:	7bbb      	ldrb	r3, [r7, #14]
 8005c8c:	2b80      	cmp	r3, #128	; 0x80
 8005c8e:	d008      	beq.n	8005ca2 <USBD_StdEPReq+0xfe>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	88db      	ldrh	r3, [r3, #6]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d104      	bne.n	8005ca2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 f8b9 	bl	8006e14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fd2e 	bl	8006704 <USBD_CtlSendStatus>

              break;
 8005ca8:	e004      	b.n	8005cb4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fc5e 	bl	800656e <USBD_CtlError>
              break;
 8005cb2:	bf00      	nop
          }
          break;
 8005cb4:	e107      	b.n	8005ec6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d002      	beq.n	8005cc8 <USBD_StdEPReq+0x124>
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d016      	beq.n	8005cf4 <USBD_StdEPReq+0x150>
 8005cc6:	e04b      	b.n	8005d60 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cc8:	7bbb      	ldrb	r3, [r7, #14]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00d      	beq.n	8005cea <USBD_StdEPReq+0x146>
 8005cce:	7bbb      	ldrb	r3, [r7, #14]
 8005cd0:	2b80      	cmp	r3, #128	; 0x80
 8005cd2:	d00a      	beq.n	8005cea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005cd4:	7bbb      	ldrb	r3, [r7, #14]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 f89b 	bl	8006e14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cde:	2180      	movs	r1, #128	; 0x80
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 f897 	bl	8006e14 <USBD_LL_StallEP>
 8005ce6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ce8:	e040      	b.n	8005d6c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fc3e 	bl	800656e <USBD_CtlError>
              break;
 8005cf2:	e03b      	b.n	8005d6c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	885b      	ldrh	r3, [r3, #2]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d136      	bne.n	8005d6a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005cfc:	7bbb      	ldrb	r3, [r7, #14]
 8005cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d004      	beq.n	8005d10 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005d06:	7bbb      	ldrb	r3, [r7, #14]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 f8a1 	bl	8006e52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fcf7 	bl	8006704 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005d16:	7bbb      	ldrb	r3, [r7, #14]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff fde2 	bl	80058e4 <USBD_CoreFindEP>
 8005d20:	4603      	mov	r3, r0
 8005d22:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d24:	7b7b      	ldrb	r3, [r7, #13]
 8005d26:	2bff      	cmp	r3, #255	; 0xff
 8005d28:	d01f      	beq.n	8005d6a <USBD_StdEPReq+0x1c6>
 8005d2a:	7b7b      	ldrb	r3, [r7, #13]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d11c      	bne.n	8005d6a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005d30:	7b7a      	ldrb	r2, [r7, #13]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005d38:	7b7a      	ldrb	r2, [r7, #13]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	32ae      	adds	r2, #174	; 0xae
 8005d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d010      	beq.n	8005d6a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005d48:	7b7a      	ldrb	r2, [r7, #13]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	32ae      	adds	r2, #174	; 0xae
 8005d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	6839      	ldr	r1, [r7, #0]
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	4798      	blx	r3
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005d5e:	e004      	b.n	8005d6a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fc03 	bl	800656e <USBD_CtlError>
              break;
 8005d68:	e000      	b.n	8005d6c <USBD_StdEPReq+0x1c8>
              break;
 8005d6a:	bf00      	nop
          }
          break;
 8005d6c:	e0ab      	b.n	8005ec6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d002      	beq.n	8005d80 <USBD_StdEPReq+0x1dc>
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d032      	beq.n	8005de4 <USBD_StdEPReq+0x240>
 8005d7e:	e097      	b.n	8005eb0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d80:	7bbb      	ldrb	r3, [r7, #14]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <USBD_StdEPReq+0x1f2>
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	2b80      	cmp	r3, #128	; 0x80
 8005d8a:	d004      	beq.n	8005d96 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fbed 	bl	800656e <USBD_CtlError>
                break;
 8005d94:	e091      	b.n	8005eba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	da0b      	bge.n	8005db6 <USBD_StdEPReq+0x212>
 8005d9e:	7bbb      	ldrb	r3, [r7, #14]
 8005da0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	3310      	adds	r3, #16
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	4413      	add	r3, r2
 8005db2:	3304      	adds	r3, #4
 8005db4:	e00b      	b.n	8005dce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005db6:	7bbb      	ldrb	r3, [r7, #14]
 8005db8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	4413      	add	r3, r2
 8005dcc:	3304      	adds	r3, #4
 8005dce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fc37 	bl	8006650 <USBD_CtlSendData>
              break;
 8005de2:	e06a      	b.n	8005eba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005de4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	da11      	bge.n	8005e10 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005dec:	7bbb      	ldrb	r3, [r7, #14]
 8005dee:	f003 020f 	and.w	r2, r3, #15
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	3324      	adds	r3, #36	; 0x24
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d117      	bne.n	8005e36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fbb0 	bl	800656e <USBD_CtlError>
                  break;
 8005e0e:	e054      	b.n	8005eba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e10:	7bbb      	ldrb	r3, [r7, #14]
 8005e12:	f003 020f 	and.w	r2, r3, #15
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	440b      	add	r3, r1
 8005e22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fb9d 	bl	800656e <USBD_CtlError>
                  break;
 8005e34:	e041      	b.n	8005eba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	da0b      	bge.n	8005e56 <USBD_StdEPReq+0x2b2>
 8005e3e:	7bbb      	ldrb	r3, [r7, #14]
 8005e40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e44:	4613      	mov	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	3310      	adds	r3, #16
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	4413      	add	r3, r2
 8005e52:	3304      	adds	r3, #4
 8005e54:	e00b      	b.n	8005e6e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
 8005e58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e70:	7bbb      	ldrb	r3, [r7, #14]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <USBD_StdEPReq+0x2d8>
 8005e76:	7bbb      	ldrb	r3, [r7, #14]
 8005e78:	2b80      	cmp	r3, #128	; 0x80
 8005e7a:	d103      	bne.n	8005e84 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	e00e      	b.n	8005ea2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e84:	7bbb      	ldrb	r3, [r7, #14]
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f001 f801 	bl	8006e90 <USBD_LL_IsStallEP>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2201      	movs	r2, #1
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	e002      	b.n	8005ea2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fbd1 	bl	8006650 <USBD_CtlSendData>
              break;
 8005eae:	e004      	b.n	8005eba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fb5b 	bl	800656e <USBD_CtlError>
              break;
 8005eb8:	bf00      	nop
          }
          break;
 8005eba:	e004      	b.n	8005ec6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fb55 	bl	800656e <USBD_CtlError>
          break;
 8005ec4:	bf00      	nop
      }
      break;
 8005ec6:	e005      	b.n	8005ed4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fb4f 	bl	800656e <USBD_CtlError>
      break;
 8005ed0:	e000      	b.n	8005ed4 <USBD_StdEPReq+0x330>
      break;
 8005ed2:	bf00      	nop
  }

  return ret;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	885b      	ldrh	r3, [r3, #2]
 8005efa:	0a1b      	lsrs	r3, r3, #8
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	2b06      	cmp	r3, #6
 8005f02:	f200 8128 	bhi.w	8006156 <USBD_GetDescriptor+0x276>
 8005f06:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <USBD_GetDescriptor+0x2c>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f29 	.word	0x08005f29
 8005f10:	08005f41 	.word	0x08005f41
 8005f14:	08005f81 	.word	0x08005f81
 8005f18:	08006157 	.word	0x08006157
 8005f1c:	08006157 	.word	0x08006157
 8005f20:	080060f7 	.word	0x080060f7
 8005f24:	08006123 	.word	0x08006123
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	7c12      	ldrb	r2, [r2, #16]
 8005f34:	f107 0108 	add.w	r1, r7, #8
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4798      	blx	r3
 8005f3c:	60f8      	str	r0, [r7, #12]
      break;
 8005f3e:	e112      	b.n	8006166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	7c1b      	ldrb	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10d      	bne.n	8005f64 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f50:	f107 0208 	add.w	r2, r7, #8
 8005f54:	4610      	mov	r0, r2
 8005f56:	4798      	blx	r3
 8005f58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	2202      	movs	r2, #2
 8005f60:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f62:	e100      	b.n	8006166 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	f107 0208 	add.w	r2, r7, #8
 8005f70:	4610      	mov	r0, r2
 8005f72:	4798      	blx	r3
 8005f74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	701a      	strb	r2, [r3, #0]
      break;
 8005f7e:	e0f2      	b.n	8006166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	885b      	ldrh	r3, [r3, #2]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	f200 80ac 	bhi.w	80060e4 <USBD_GetDescriptor+0x204>
 8005f8c:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <USBD_GetDescriptor+0xb4>)
 8005f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f92:	bf00      	nop
 8005f94:	08005fad 	.word	0x08005fad
 8005f98:	08005fe1 	.word	0x08005fe1
 8005f9c:	08006015 	.word	0x08006015
 8005fa0:	08006049 	.word	0x08006049
 8005fa4:	0800607d 	.word	0x0800607d
 8005fa8:	080060b1 	.word	0x080060b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00b      	beq.n	8005fd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	7c12      	ldrb	r2, [r2, #16]
 8005fc4:	f107 0108 	add.w	r1, r7, #8
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4798      	blx	r3
 8005fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fce:	e091      	b.n	80060f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 facb 	bl	800656e <USBD_CtlError>
            err++;
 8005fd8:	7afb      	ldrb	r3, [r7, #11]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8005fde:	e089      	b.n	80060f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00b      	beq.n	8006004 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	7c12      	ldrb	r2, [r2, #16]
 8005ff8:	f107 0108 	add.w	r1, r7, #8
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4798      	blx	r3
 8006000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006002:	e077      	b.n	80060f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fab1 	bl	800656e <USBD_CtlError>
            err++;
 800600c:	7afb      	ldrb	r3, [r7, #11]
 800600e:	3301      	adds	r3, #1
 8006010:	72fb      	strb	r3, [r7, #11]
          break;
 8006012:	e06f      	b.n	80060f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00b      	beq.n	8006038 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	7c12      	ldrb	r2, [r2, #16]
 800602c:	f107 0108 	add.w	r1, r7, #8
 8006030:	4610      	mov	r0, r2
 8006032:	4798      	blx	r3
 8006034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006036:	e05d      	b.n	80060f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fa97 	bl	800656e <USBD_CtlError>
            err++;
 8006040:	7afb      	ldrb	r3, [r7, #11]
 8006042:	3301      	adds	r3, #1
 8006044:	72fb      	strb	r3, [r7, #11]
          break;
 8006046:	e055      	b.n	80060f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	7c12      	ldrb	r2, [r2, #16]
 8006060:	f107 0108 	add.w	r1, r7, #8
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
 8006068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800606a:	e043      	b.n	80060f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa7d 	bl	800656e <USBD_CtlError>
            err++;
 8006074:	7afb      	ldrb	r3, [r7, #11]
 8006076:	3301      	adds	r3, #1
 8006078:	72fb      	strb	r3, [r7, #11]
          break;
 800607a:	e03b      	b.n	80060f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	7c12      	ldrb	r2, [r2, #16]
 8006094:	f107 0108 	add.w	r1, r7, #8
 8006098:	4610      	mov	r0, r2
 800609a:	4798      	blx	r3
 800609c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800609e:	e029      	b.n	80060f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fa63 	bl	800656e <USBD_CtlError>
            err++;
 80060a8:	7afb      	ldrb	r3, [r7, #11]
 80060aa:	3301      	adds	r3, #1
 80060ac:	72fb      	strb	r3, [r7, #11]
          break;
 80060ae:	e021      	b.n	80060f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	7c12      	ldrb	r2, [r2, #16]
 80060c8:	f107 0108 	add.w	r1, r7, #8
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
 80060d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060d2:	e00f      	b.n	80060f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa49 	bl	800656e <USBD_CtlError>
            err++;
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	3301      	adds	r3, #1
 80060e0:	72fb      	strb	r3, [r7, #11]
          break;
 80060e2:	e007      	b.n	80060f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fa41 	bl	800656e <USBD_CtlError>
          err++;
 80060ec:	7afb      	ldrb	r3, [r7, #11]
 80060ee:	3301      	adds	r3, #1
 80060f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80060f2:	bf00      	nop
      }
      break;
 80060f4:	e037      	b.n	8006166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	7c1b      	ldrb	r3, [r3, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006106:	f107 0208 	add.w	r2, r7, #8
 800610a:	4610      	mov	r0, r2
 800610c:	4798      	blx	r3
 800610e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006110:	e029      	b.n	8006166 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fa2a 	bl	800656e <USBD_CtlError>
        err++;
 800611a:	7afb      	ldrb	r3, [r7, #11]
 800611c:	3301      	adds	r3, #1
 800611e:	72fb      	strb	r3, [r7, #11]
      break;
 8006120:	e021      	b.n	8006166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	7c1b      	ldrb	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10d      	bne.n	8006146 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	f107 0208 	add.w	r2, r7, #8
 8006136:	4610      	mov	r0, r2
 8006138:	4798      	blx	r3
 800613a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3301      	adds	r3, #1
 8006140:	2207      	movs	r2, #7
 8006142:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006144:	e00f      	b.n	8006166 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fa10 	bl	800656e <USBD_CtlError>
        err++;
 800614e:	7afb      	ldrb	r3, [r7, #11]
 8006150:	3301      	adds	r3, #1
 8006152:	72fb      	strb	r3, [r7, #11]
      break;
 8006154:	e007      	b.n	8006166 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fa08 	bl	800656e <USBD_CtlError>
      err++;
 800615e:	7afb      	ldrb	r3, [r7, #11]
 8006160:	3301      	adds	r3, #1
 8006162:	72fb      	strb	r3, [r7, #11]
      break;
 8006164:	bf00      	nop
  }

  if (err != 0U)
 8006166:	7afb      	ldrb	r3, [r7, #11]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d11e      	bne.n	80061aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	88db      	ldrh	r3, [r3, #6]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d016      	beq.n	80061a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006174:	893b      	ldrh	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00e      	beq.n	8006198 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	88da      	ldrh	r2, [r3, #6]
 800617e:	893b      	ldrh	r3, [r7, #8]
 8006180:	4293      	cmp	r3, r2
 8006182:	bf28      	it	cs
 8006184:	4613      	movcs	r3, r2
 8006186:	b29b      	uxth	r3, r3
 8006188:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800618a:	893b      	ldrh	r3, [r7, #8]
 800618c:	461a      	mov	r2, r3
 800618e:	68f9      	ldr	r1, [r7, #12]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fa5d 	bl	8006650 <USBD_CtlSendData>
 8006196:	e009      	b.n	80061ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f9e7 	bl	800656e <USBD_CtlError>
 80061a0:	e004      	b.n	80061ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 faae 	bl	8006704 <USBD_CtlSendStatus>
 80061a8:	e000      	b.n	80061ac <USBD_GetDescriptor+0x2cc>
    return;
 80061aa:	bf00      	nop
  }
}
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop

080061b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	889b      	ldrh	r3, [r3, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d131      	bne.n	800622a <USBD_SetAddress+0x76>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	88db      	ldrh	r3, [r3, #6]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d12d      	bne.n	800622a <USBD_SetAddress+0x76>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	885b      	ldrh	r3, [r3, #2]
 80061d2:	2b7f      	cmp	r3, #127	; 0x7f
 80061d4:	d829      	bhi.n	800622a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	885b      	ldrh	r3, [r3, #2]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d104      	bne.n	80061f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f9bc 	bl	800656e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f6:	e01d      	b.n	8006234 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	7bfa      	ldrb	r2, [r7, #15]
 80061fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fe6f 	bl	8006ee8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fa7a 	bl	8006704 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d004      	beq.n	8006220 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2202      	movs	r2, #2
 800621a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800621e:	e009      	b.n	8006234 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006228:	e004      	b.n	8006234 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f99e 	bl	800656e <USBD_CtlError>
  }
}
 8006232:	bf00      	nop
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	885b      	ldrh	r3, [r3, #2]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	4b4e      	ldr	r3, [pc, #312]	; (800638c <USBD_SetConfig+0x150>)
 8006252:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006254:	4b4d      	ldr	r3, [pc, #308]	; (800638c <USBD_SetConfig+0x150>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d905      	bls.n	8006268 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f985 	bl	800656e <USBD_CtlError>
    return USBD_FAIL;
 8006264:	2303      	movs	r3, #3
 8006266:	e08c      	b.n	8006382 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d002      	beq.n	800627a <USBD_SetConfig+0x3e>
 8006274:	2b03      	cmp	r3, #3
 8006276:	d029      	beq.n	80062cc <USBD_SetConfig+0x90>
 8006278:	e075      	b.n	8006366 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800627a:	4b44      	ldr	r3, [pc, #272]	; (800638c <USBD_SetConfig+0x150>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d020      	beq.n	80062c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006282:	4b42      	ldr	r3, [pc, #264]	; (800638c <USBD_SetConfig+0x150>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800628c:	4b3f      	ldr	r3, [pc, #252]	; (800638c <USBD_SetConfig+0x150>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fe ffe1 	bl	800525a <USBD_SetClassConfig>
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d008      	beq.n	80062b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f962 	bl	800656e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80062b2:	e065      	b.n	8006380 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fa25 	bl	8006704 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2203      	movs	r2, #3
 80062be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80062c2:	e05d      	b.n	8006380 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fa1d 	bl	8006704 <USBD_CtlSendStatus>
      break;
 80062ca:	e059      	b.n	8006380 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80062cc:	4b2f      	ldr	r3, [pc, #188]	; (800638c <USBD_SetConfig+0x150>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d112      	bne.n	80062fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80062dc:	4b2b      	ldr	r3, [pc, #172]	; (800638c <USBD_SetConfig+0x150>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80062e6:	4b29      	ldr	r3, [pc, #164]	; (800638c <USBD_SetConfig+0x150>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7fe ffd0 	bl	8005292 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fa06 	bl	8006704 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80062f8:	e042      	b.n	8006380 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80062fa:	4b24      	ldr	r3, [pc, #144]	; (800638c <USBD_SetConfig+0x150>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	429a      	cmp	r2, r3
 8006306:	d02a      	beq.n	800635e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7fe ffbe 	bl	8005292 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006316:	4b1d      	ldr	r3, [pc, #116]	; (800638c <USBD_SetConfig+0x150>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006320:	4b1a      	ldr	r3, [pc, #104]	; (800638c <USBD_SetConfig+0x150>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fe ff97 	bl	800525a <USBD_SetClassConfig>
 800632c:	4603      	mov	r3, r0
 800632e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00f      	beq.n	8006356 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f918 	bl	800656e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fe ffa3 	bl	8005292 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006354:	e014      	b.n	8006380 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f9d4 	bl	8006704 <USBD_CtlSendStatus>
      break;
 800635c:	e010      	b.n	8006380 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f9d0 	bl	8006704 <USBD_CtlSendStatus>
      break;
 8006364:	e00c      	b.n	8006380 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f900 	bl	800656e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800636e:	4b07      	ldr	r3, [pc, #28]	; (800638c <USBD_SetConfig+0x150>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7fe ff8c 	bl	8005292 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800637a:	2303      	movs	r3, #3
 800637c:	73fb      	strb	r3, [r7, #15]
      break;
 800637e:	bf00      	nop
  }

  return ret;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	200001bc 	.word	0x200001bc

08006390 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	88db      	ldrh	r3, [r3, #6]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d004      	beq.n	80063ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f8e2 	bl	800656e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80063aa:	e023      	b.n	80063f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	dc02      	bgt.n	80063be <USBD_GetConfig+0x2e>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	dc03      	bgt.n	80063c4 <USBD_GetConfig+0x34>
 80063bc:	e015      	b.n	80063ea <USBD_GetConfig+0x5a>
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d00b      	beq.n	80063da <USBD_GetConfig+0x4a>
 80063c2:	e012      	b.n	80063ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3308      	adds	r3, #8
 80063ce:	2201      	movs	r2, #1
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f93c 	bl	8006650 <USBD_CtlSendData>
        break;
 80063d8:	e00c      	b.n	80063f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3304      	adds	r3, #4
 80063de:	2201      	movs	r2, #1
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f934 	bl	8006650 <USBD_CtlSendData>
        break;
 80063e8:	e004      	b.n	80063f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f8be 	bl	800656e <USBD_CtlError>
        break;
 80063f2:	bf00      	nop
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640c:	b2db      	uxtb	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	2b02      	cmp	r3, #2
 8006412:	d81e      	bhi.n	8006452 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	88db      	ldrh	r3, [r3, #6]
 8006418:	2b02      	cmp	r3, #2
 800641a:	d004      	beq.n	8006426 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f8a5 	bl	800656e <USBD_CtlError>
        break;
 8006424:	e01a      	b.n	800645c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006432:	2b00      	cmp	r3, #0
 8006434:	d005      	beq.n	8006442 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f043 0202 	orr.w	r2, r3, #2
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	330c      	adds	r3, #12
 8006446:	2202      	movs	r2, #2
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f900 	bl	8006650 <USBD_CtlSendData>
      break;
 8006450:	e004      	b.n	800645c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f88a 	bl	800656e <USBD_CtlError>
      break;
 800645a:	bf00      	nop
  }
}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	885b      	ldrh	r3, [r3, #2]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d107      	bne.n	8006486 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f940 	bl	8006704 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006484:	e013      	b.n	80064ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	885b      	ldrh	r3, [r3, #2]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d10b      	bne.n	80064a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	889b      	ldrh	r3, [r3, #4]
 8006492:	0a1b      	lsrs	r3, r3, #8
 8006494:	b29b      	uxth	r3, r3
 8006496:	b2da      	uxtb	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f930 	bl	8006704 <USBD_CtlSendStatus>
}
 80064a4:	e003      	b.n	80064ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f860 	bl	800656e <USBD_CtlError>
}
 80064ae:	bf00      	nop
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b082      	sub	sp, #8
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d80b      	bhi.n	80064e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	885b      	ldrh	r3, [r3, #2]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d10c      	bne.n	80064f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f910 	bl	8006704 <USBD_CtlSendStatus>
      }
      break;
 80064e4:	e004      	b.n	80064f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f840 	bl	800656e <USBD_CtlError>
      break;
 80064ee:	e000      	b.n	80064f2 <USBD_ClrFeature+0x3c>
      break;
 80064f0:	bf00      	nop
  }
}
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	781a      	ldrb	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3301      	adds	r3, #1
 8006514:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	781a      	ldrb	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3301      	adds	r3, #1
 8006522:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7ff fa41 	bl	80059ac <SWAPBYTE>
 800652a:	4603      	mov	r3, r0
 800652c:	461a      	mov	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3301      	adds	r3, #1
 8006536:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3301      	adds	r3, #1
 800653c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f7ff fa34 	bl	80059ac <SWAPBYTE>
 8006544:	4603      	mov	r3, r0
 8006546:	461a      	mov	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3301      	adds	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3301      	adds	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f7ff fa27 	bl	80059ac <SWAPBYTE>
 800655e:	4603      	mov	r3, r0
 8006560:	461a      	mov	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	80da      	strh	r2, [r3, #6]
}
 8006566:	bf00      	nop
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006578:	2180      	movs	r1, #128	; 0x80
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fc4a 	bl	8006e14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006580:	2100      	movs	r1, #0
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fc46 	bl	8006e14 <USBD_LL_StallEP>
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d036      	beq.n	8006614 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80065aa:	6938      	ldr	r0, [r7, #16]
 80065ac:	f000 f836 	bl	800661c <USBD_GetLen>
 80065b0:	4603      	mov	r3, r0
 80065b2:	3301      	adds	r3, #1
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80065be:	7dfb      	ldrb	r3, [r7, #23]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	4413      	add	r3, r2
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	7812      	ldrb	r2, [r2, #0]
 80065c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	3301      	adds	r3, #1
 80065ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	4413      	add	r3, r2
 80065d6:	2203      	movs	r2, #3
 80065d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	3301      	adds	r3, #1
 80065de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80065e0:	e013      	b.n	800660a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	4413      	add	r3, r2
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	7812      	ldrb	r2, [r2, #0]
 80065ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	3301      	adds	r3, #1
 80065f2:	613b      	str	r3, [r7, #16]
    idx++;
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	3301      	adds	r3, #1
 80065f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	4413      	add	r3, r2
 8006600:	2200      	movs	r2, #0
 8006602:	701a      	strb	r2, [r3, #0]
    idx++;
 8006604:	7dfb      	ldrb	r3, [r7, #23]
 8006606:	3301      	adds	r3, #1
 8006608:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e7      	bne.n	80065e2 <USBD_GetString+0x52>
 8006612:	e000      	b.n	8006616 <USBD_GetString+0x86>
    return;
 8006614:	bf00      	nop
  }
}
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800662c:	e005      	b.n	800663a <USBD_GetLen+0x1e>
  {
    len++;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	3301      	adds	r3, #1
 8006632:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	3301      	adds	r3, #1
 8006638:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f5      	bne.n	800662e <USBD_GetLen+0x12>
  }

  return len;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2202      	movs	r2, #2
 8006660:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	2100      	movs	r1, #0
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 fc55 	bl	8006f26 <USBD_LL_Transmit>

  return USBD_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	2100      	movs	r1, #0
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 fc44 	bl	8006f26 <USBD_LL_Transmit>

  return USBD_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2203      	movs	r2, #3
 80066b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	2100      	movs	r1, #0
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fc48 	bl	8006f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	2100      	movs	r1, #0
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 fc37 	bl	8006f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2204      	movs	r2, #4
 8006710:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006714:	2300      	movs	r3, #0
 8006716:	2200      	movs	r2, #0
 8006718:	2100      	movs	r1, #0
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fc03 	bl	8006f26 <USBD_LL_Transmit>

  return USBD_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2205      	movs	r2, #5
 8006736:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800673a:	2300      	movs	r3, #0
 800673c:	2200      	movs	r2, #0
 800673e:	2100      	movs	r1, #0
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fc11 	bl	8006f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006754:	2200      	movs	r2, #0
 8006756:	4912      	ldr	r1, [pc, #72]	; (80067a0 <MX_USB_DEVICE_Init+0x50>)
 8006758:	4812      	ldr	r0, [pc, #72]	; (80067a4 <MX_USB_DEVICE_Init+0x54>)
 800675a:	f7fe fd01 	bl	8005160 <USBD_Init>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006764:	f7fa f806 	bl	8000774 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006768:	490f      	ldr	r1, [pc, #60]	; (80067a8 <MX_USB_DEVICE_Init+0x58>)
 800676a:	480e      	ldr	r0, [pc, #56]	; (80067a4 <MX_USB_DEVICE_Init+0x54>)
 800676c:	f7fe fd28 	bl	80051c0 <USBD_RegisterClass>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006776:	f7f9 fffd 	bl	8000774 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800677a:	490c      	ldr	r1, [pc, #48]	; (80067ac <MX_USB_DEVICE_Init+0x5c>)
 800677c:	4809      	ldr	r0, [pc, #36]	; (80067a4 <MX_USB_DEVICE_Init+0x54>)
 800677e:	f7fe fcd5 	bl	800512c <USBD_CUSTOM_HID_RegisterInterface>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006788:	f7f9 fff4 	bl	8000774 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800678c:	4805      	ldr	r0, [pc, #20]	; (80067a4 <MX_USB_DEVICE_Init+0x54>)
 800678e:	f7fe fd4d 	bl	800522c <USBD_Start>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006798:	f7f9 ffec 	bl	8000774 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800679c:	bf00      	nop
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	200000fc 	.word	0x200000fc
 80067a4:	200001c0 	.word	0x200001c0
 80067a8:	2000000c 	.word	0x2000000c
 80067ac:	200000ec 	.word	0x200000ec

080067b0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80067b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80067c4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	460a      	mov	r2, r1
 80067da:	71fb      	strb	r3, [r7, #7]
 80067dc:	4613      	mov	r3, r2
 80067de:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80067e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067e4:	4808      	ldr	r0, [pc, #32]	; (8006808 <CUSTOM_HID_OutEvent_FS+0x38>)
 80067e6:	f7fa fc28 	bl	800103a <HAL_GPIO_TogglePin>
  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 80067ea:	4808      	ldr	r0, [pc, #32]	; (800680c <CUSTOM_HID_OutEvent_FS+0x3c>)
 80067ec:	f7fe fc3c 	bl	8005068 <USBD_CUSTOM_HID_ReceivePacket>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <CUSTOM_HID_OutEvent_FS+0x2c>
  {
    return -1;
 80067f6:	f04f 33ff 	mov.w	r3, #4294967295
 80067fa:	e000      	b.n	80067fe <CUSTOM_HID_OutEvent_FS+0x2e>
  }

  return (USBD_OK);
 80067fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	40020c00 	.word	0x40020c00
 800680c:	200001c0 	.word	0x200001c0

08006810 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	6039      	str	r1, [r7, #0]
 800681a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2212      	movs	r2, #18
 8006820:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006822:	4b03      	ldr	r3, [pc, #12]	; (8006830 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006824:	4618      	mov	r0, r3
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	20000118 	.word	0x20000118

08006834 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	6039      	str	r1, [r7, #0]
 800683e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2204      	movs	r2, #4
 8006844:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006846:	4b03      	ldr	r3, [pc, #12]	; (8006854 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	2000012c 	.word	0x2000012c

08006858 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	6039      	str	r1, [r7, #0]
 8006862:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	4907      	ldr	r1, [pc, #28]	; (800688c <USBD_FS_ProductStrDescriptor+0x34>)
 800686e:	4808      	ldr	r0, [pc, #32]	; (8006890 <USBD_FS_ProductStrDescriptor+0x38>)
 8006870:	f7ff fe8e 	bl	8006590 <USBD_GetString>
 8006874:	e004      	b.n	8006880 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	4904      	ldr	r1, [pc, #16]	; (800688c <USBD_FS_ProductStrDescriptor+0x34>)
 800687a:	4805      	ldr	r0, [pc, #20]	; (8006890 <USBD_FS_ProductStrDescriptor+0x38>)
 800687c:	f7ff fe88 	bl	8006590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006880:	4b02      	ldr	r3, [pc, #8]	; (800688c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	2000049c 	.word	0x2000049c
 8006890:	080070d8 	.word	0x080070d8

08006894 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	6039      	str	r1, [r7, #0]
 800689e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	4904      	ldr	r1, [pc, #16]	; (80068b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80068a4:	4804      	ldr	r0, [pc, #16]	; (80068b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80068a6:	f7ff fe73 	bl	8006590 <USBD_GetString>
  return USBD_StrDesc;
 80068aa:	4b02      	ldr	r3, [pc, #8]	; (80068b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	2000049c 	.word	0x2000049c
 80068b8:	080070e8 	.word	0x080070e8

080068bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	6039      	str	r1, [r7, #0]
 80068c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	221a      	movs	r2, #26
 80068cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80068ce:	f000 f843 	bl	8006958 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80068d2:	4b02      	ldr	r3, [pc, #8]	; (80068dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000130 	.word	0x20000130

080068e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	6039      	str	r1, [r7, #0]
 80068ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d105      	bne.n	80068fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	4907      	ldr	r1, [pc, #28]	; (8006914 <USBD_FS_ConfigStrDescriptor+0x34>)
 80068f6:	4808      	ldr	r0, [pc, #32]	; (8006918 <USBD_FS_ConfigStrDescriptor+0x38>)
 80068f8:	f7ff fe4a 	bl	8006590 <USBD_GetString>
 80068fc:	e004      	b.n	8006908 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	4904      	ldr	r1, [pc, #16]	; (8006914 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006902:	4805      	ldr	r0, [pc, #20]	; (8006918 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006904:	f7ff fe44 	bl	8006590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006908:	4b02      	ldr	r3, [pc, #8]	; (8006914 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	2000049c 	.word	0x2000049c
 8006918:	080070f0 	.word	0x080070f0

0800691c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	4603      	mov	r3, r0
 8006924:	6039      	str	r1, [r7, #0]
 8006926:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	4907      	ldr	r1, [pc, #28]	; (8006950 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006932:	4808      	ldr	r0, [pc, #32]	; (8006954 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006934:	f7ff fe2c 	bl	8006590 <USBD_GetString>
 8006938:	e004      	b.n	8006944 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	4904      	ldr	r1, [pc, #16]	; (8006950 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800693e:	4805      	ldr	r0, [pc, #20]	; (8006954 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006940:	f7ff fe26 	bl	8006590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006944:	4b02      	ldr	r3, [pc, #8]	; (8006950 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	2000049c 	.word	0x2000049c
 8006954:	08007104 	.word	0x08007104

08006958 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800695e:	4b0f      	ldr	r3, [pc, #60]	; (800699c <Get_SerialNum+0x44>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006964:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <Get_SerialNum+0x48>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800696a:	4b0e      	ldr	r3, [pc, #56]	; (80069a4 <Get_SerialNum+0x4c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4413      	add	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d009      	beq.n	8006992 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800697e:	2208      	movs	r2, #8
 8006980:	4909      	ldr	r1, [pc, #36]	; (80069a8 <Get_SerialNum+0x50>)
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 f814 	bl	80069b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006988:	2204      	movs	r2, #4
 800698a:	4908      	ldr	r1, [pc, #32]	; (80069ac <Get_SerialNum+0x54>)
 800698c:	68b8      	ldr	r0, [r7, #8]
 800698e:	f000 f80f 	bl	80069b0 <IntToUnicode>
  }
}
 8006992:	bf00      	nop
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	1fff7a10 	.word	0x1fff7a10
 80069a0:	1fff7a14 	.word	0x1fff7a14
 80069a4:	1fff7a18 	.word	0x1fff7a18
 80069a8:	20000132 	.word	0x20000132
 80069ac:	20000142 	.word	0x20000142

080069b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80069c2:	2300      	movs	r3, #0
 80069c4:	75fb      	strb	r3, [r7, #23]
 80069c6:	e027      	b.n	8006a18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	0f1b      	lsrs	r3, r3, #28
 80069cc:	2b09      	cmp	r3, #9
 80069ce:	d80b      	bhi.n	80069e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	0f1b      	lsrs	r3, r3, #28
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	4619      	mov	r1, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	440b      	add	r3, r1
 80069e0:	3230      	adds	r2, #48	; 0x30
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	e00a      	b.n	80069fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	0f1b      	lsrs	r3, r3, #28
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	4619      	mov	r1, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	440b      	add	r3, r1
 80069f8:	3237      	adds	r2, #55	; 0x37
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	3301      	adds	r3, #1
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	2200      	movs	r2, #0
 8006a10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	3301      	adds	r3, #1
 8006a16:	75fb      	strb	r3, [r7, #23]
 8006a18:	7dfa      	ldrb	r2, [r7, #23]
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d3d3      	bcc.n	80069c8 <IntToUnicode+0x18>
  }
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
	...

08006a30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08a      	sub	sp, #40	; 0x28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a38:	f107 0314 	add.w	r3, r7, #20
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	609a      	str	r2, [r3, #8]
 8006a44:	60da      	str	r2, [r3, #12]
 8006a46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a50:	d13a      	bne.n	8006ac8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a52:	2300      	movs	r3, #0
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	4b1e      	ldr	r3, [pc, #120]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	4a1d      	ldr	r2, [pc, #116]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006a5c:	f043 0301 	orr.w	r3, r3, #1
 8006a60:	6313      	str	r3, [r2, #48]	; 0x30
 8006a62:	4b1b      	ldr	r3, [pc, #108]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	613b      	str	r3, [r7, #16]
 8006a6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a74:	2302      	movs	r3, #2
 8006a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a80:	230a      	movs	r3, #10
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a84:	f107 0314 	add.w	r3, r7, #20
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4812      	ldr	r0, [pc, #72]	; (8006ad4 <HAL_PCD_MspInit+0xa4>)
 8006a8c:	f7fa f920 	bl	8000cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a90:	4b0f      	ldr	r3, [pc, #60]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a94:	4a0e      	ldr	r2, [pc, #56]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9a:	6353      	str	r3, [r2, #52]	; 0x34
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa4:	4a0a      	ldr	r2, [pc, #40]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8006aac:	4b08      	ldr	r3, [pc, #32]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ab4:	60fb      	str	r3, [r7, #12]
 8006ab6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2100      	movs	r1, #0
 8006abc:	2043      	movs	r0, #67	; 0x43
 8006abe:	f7fa f8d0 	bl	8000c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006ac2:	2043      	movs	r0, #67	; 0x43
 8006ac4:	f7fa f8e9 	bl	8000c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ac8:	bf00      	nop
 8006aca:	3728      	adds	r7, #40	; 0x28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	40020000 	.word	0x40020000

08006ad8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fe fbe9 	bl	80052c6 <USBD_LL_SetupStage>
}
 8006af4:	bf00      	nop
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	4613      	mov	r3, r2
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	4619      	mov	r1, r3
 8006b26:	f7fe fc23 	bl	8005370 <USBD_LL_DataOutStage>
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8006b44:	78fa      	ldrb	r2, [r7, #3]
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	4413      	add	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	3320      	adds	r3, #32
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	78fb      	ldrb	r3, [r7, #3]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	f7fe fcbc 	bl	80054d6 <USBD_LL_DataInStage>
}
 8006b5e:	bf00      	nop
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fe fdf6 	bl	8005766 <USBD_LL_SOF>
}
 8006b7a:	bf00      	nop
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	79db      	ldrb	r3, [r3, #7]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d102      	bne.n	8006b9c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
 8006b9a:	e008      	b.n	8006bae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	79db      	ldrb	r3, [r3, #7]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d102      	bne.n	8006baa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	73fb      	strb	r3, [r7, #15]
 8006ba8:	e001      	b.n	8006bae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006baa:	f7f9 fde3 	bl	8000774 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006bb4:	7bfa      	ldrb	r2, [r7, #15]
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fe fd90 	bl	80056de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe fd38 	bl	800563a <USBD_LL_Reset>
}
 8006bca:	bf00      	nop
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fe fd8b 	bl	80056fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6812      	ldr	r2, [r2, #0]
 8006bf6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	7adb      	ldrb	r3, [r3, #11]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d005      	beq.n	8006c14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c08:	4b04      	ldr	r3, [pc, #16]	; (8006c1c <HAL_PCD_SuspendCallback+0x48>)
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	4a03      	ldr	r2, [pc, #12]	; (8006c1c <HAL_PCD_SuspendCallback+0x48>)
 8006c0e:	f043 0306 	orr.w	r3, r3, #6
 8006c12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c14:	bf00      	nop
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	e000ed00 	.word	0xe000ed00

08006c20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fe fd81 	bl	8005736 <USBD_LL_Resume>
}
 8006c34:	bf00      	nop
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	460b      	mov	r3, r1
 8006c46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006c4e:	78fa      	ldrb	r2, [r7, #3]
 8006c50:	4611      	mov	r1, r2
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe fdd9 	bl	800580a <USBD_LL_IsoOUTIncomplete>
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006c72:	78fa      	ldrb	r2, [r7, #3]
 8006c74:	4611      	mov	r1, r2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe fd95 	bl	80057a6 <USBD_LL_IsoINIncomplete>
}
 8006c7c:	bf00      	nop
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fe fdeb 	bl	800586e <USBD_LL_DevConnected>
}
 8006c98:	bf00      	nop
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe fde8 	bl	8005884 <USBD_LL_DevDisconnected>
}
 8006cb4:	bf00      	nop
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d13c      	bne.n	8006d46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006ccc:	4a20      	ldr	r2, [pc, #128]	; (8006d50 <USBD_LL_Init+0x94>)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a1e      	ldr	r2, [pc, #120]	; (8006d50 <USBD_LL_Init+0x94>)
 8006cd8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006cdc:	4b1c      	ldr	r3, [pc, #112]	; (8006d50 <USBD_LL_Init+0x94>)
 8006cde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006ce2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006ce4:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <USBD_LL_Init+0x94>)
 8006ce6:	2204      	movs	r2, #4
 8006ce8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006cea:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <USBD_LL_Init+0x94>)
 8006cec:	2202      	movs	r2, #2
 8006cee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006cf0:	4b17      	ldr	r3, [pc, #92]	; (8006d50 <USBD_LL_Init+0x94>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006cf6:	4b16      	ldr	r3, [pc, #88]	; (8006d50 <USBD_LL_Init+0x94>)
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006cfc:	4b14      	ldr	r3, [pc, #80]	; (8006d50 <USBD_LL_Init+0x94>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d02:	4b13      	ldr	r3, [pc, #76]	; (8006d50 <USBD_LL_Init+0x94>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006d08:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <USBD_LL_Init+0x94>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006d0e:	4b10      	ldr	r3, [pc, #64]	; (8006d50 <USBD_LL_Init+0x94>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d14:	4b0e      	ldr	r3, [pc, #56]	; (8006d50 <USBD_LL_Init+0x94>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d1a:	480d      	ldr	r0, [pc, #52]	; (8006d50 <USBD_LL_Init+0x94>)
 8006d1c:	f7fa f9a7 	bl	800106e <HAL_PCD_Init>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006d26:	f7f9 fd25 	bl	8000774 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d2a:	2180      	movs	r1, #128	; 0x80
 8006d2c:	4808      	ldr	r0, [pc, #32]	; (8006d50 <USBD_LL_Init+0x94>)
 8006d2e:	f7fb fbba 	bl	80024a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d32:	2240      	movs	r2, #64	; 0x40
 8006d34:	2100      	movs	r1, #0
 8006d36:	4806      	ldr	r0, [pc, #24]	; (8006d50 <USBD_LL_Init+0x94>)
 8006d38:	f7fb fb6e 	bl	8002418 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d3c:	2280      	movs	r2, #128	; 0x80
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4803      	ldr	r0, [pc, #12]	; (8006d50 <USBD_LL_Init+0x94>)
 8006d42:	f7fb fb69 	bl	8002418 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	2000069c 	.word	0x2000069c

08006d54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fa fa8e 	bl	800128c <HAL_PCD_Start>
 8006d70:	4603      	mov	r3, r0
 8006d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 f930 	bl	8006fdc <USBD_Get_USB_Status>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	4608      	mov	r0, r1
 8006d94:	4611      	mov	r1, r2
 8006d96:	461a      	mov	r2, r3
 8006d98:	4603      	mov	r3, r0
 8006d9a:	70fb      	strb	r3, [r7, #3]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70bb      	strb	r3, [r7, #2]
 8006da0:	4613      	mov	r3, r2
 8006da2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006db2:	78bb      	ldrb	r3, [r7, #2]
 8006db4:	883a      	ldrh	r2, [r7, #0]
 8006db6:	78f9      	ldrb	r1, [r7, #3]
 8006db8:	f7fa ff62 	bl	8001c80 <HAL_PCD_EP_Open>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 f90a 	bl	8006fdc <USBD_Get_USB_Status>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006df0:	78fa      	ldrb	r2, [r7, #3]
 8006df2:	4611      	mov	r1, r2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fa ffab 	bl	8001d50 <HAL_PCD_EP_Close>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 f8eb 	bl	8006fdc <USBD_Get_USB_Status>
 8006e06:	4603      	mov	r3, r0
 8006e08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e2e:	78fa      	ldrb	r2, [r7, #3]
 8006e30:	4611      	mov	r1, r2
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fb f84b 	bl	8001ece <HAL_PCD_EP_SetStall>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 f8cc 	bl	8006fdc <USBD_Get_USB_Status>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e6c:	78fa      	ldrb	r2, [r7, #3]
 8006e6e:	4611      	mov	r1, r2
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fb f88f 	bl	8001f94 <HAL_PCD_EP_ClrStall>
 8006e76:	4603      	mov	r3, r0
 8006e78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 f8ad 	bl	8006fdc <USBD_Get_USB_Status>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ea2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	da0b      	bge.n	8006ec4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eb2:	68f9      	ldr	r1, [r7, #12]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	4413      	add	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	3316      	adds	r3, #22
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	e00b      	b.n	8006edc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eca:	68f9      	ldr	r1, [r7, #12]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	440b      	add	r3, r1
 8006ed6:	f203 2356 	addw	r3, r3, #598	; 0x256
 8006eda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	4611      	mov	r1, r2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fa fe96 	bl	8001c38 <HAL_PCD_SetAddress>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f862 	bl	8006fdc <USBD_Get_USB_Status>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b086      	sub	sp, #24
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
 8006f32:	460b      	mov	r3, r1
 8006f34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006f44:	7af9      	ldrb	r1, [r7, #11]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	f7fa ff86 	bl	8001e5a <HAL_PCD_EP_Transmit>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 f841 	bl	8006fdc <USBD_Get_USB_Status>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	607a      	str	r2, [r7, #4]
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	460b      	mov	r3, r1
 8006f76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006f86:	7af9      	ldrb	r1, [r7, #11]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	f7fa ff2a 	bl	8001de4 <HAL_PCD_EP_Receive>
 8006f90:	4603      	mov	r3, r0
 8006f92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f820 	bl	8006fdc <USBD_Get_USB_Status>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006fa0:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8006fb4:	4b03      	ldr	r3, [pc, #12]	; (8006fc4 <USBD_static_malloc+0x18>)
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	20000b80 	.word	0x20000b80

08006fc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]

}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d817      	bhi.n	8007020 <USBD_Get_USB_Status+0x44>
 8006ff0:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <USBD_Get_USB_Status+0x1c>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	08007009 	.word	0x08007009
 8006ffc:	0800700f 	.word	0x0800700f
 8007000:	08007015 	.word	0x08007015
 8007004:	0800701b 	.word	0x0800701b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]
    break;
 800700c:	e00b      	b.n	8007026 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800700e:	2303      	movs	r3, #3
 8007010:	73fb      	strb	r3, [r7, #15]
    break;
 8007012:	e008      	b.n	8007026 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007014:	2301      	movs	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
    break;
 8007018:	e005      	b.n	8007026 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800701a:	2303      	movs	r3, #3
 800701c:	73fb      	strb	r3, [r7, #15]
    break;
 800701e:	e002      	b.n	8007026 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007020:	2303      	movs	r3, #3
 8007022:	73fb      	strb	r3, [r7, #15]
    break;
 8007024:	bf00      	nop
  }
  return usb_status;
 8007026:	7bfb      	ldrb	r3, [r7, #15]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <memset>:
 8007034:	4402      	add	r2, r0
 8007036:	4603      	mov	r3, r0
 8007038:	4293      	cmp	r3, r2
 800703a:	d100      	bne.n	800703e <memset+0xa>
 800703c:	4770      	bx	lr
 800703e:	f803 1b01 	strb.w	r1, [r3], #1
 8007042:	e7f9      	b.n	8007038 <memset+0x4>

08007044 <strncmp>:
 8007044:	b510      	push	{r4, lr}
 8007046:	b16a      	cbz	r2, 8007064 <strncmp+0x20>
 8007048:	3901      	subs	r1, #1
 800704a:	1884      	adds	r4, r0, r2
 800704c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007050:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007054:	429a      	cmp	r2, r3
 8007056:	d103      	bne.n	8007060 <strncmp+0x1c>
 8007058:	42a0      	cmp	r0, r4
 800705a:	d001      	beq.n	8007060 <strncmp+0x1c>
 800705c:	2a00      	cmp	r2, #0
 800705e:	d1f5      	bne.n	800704c <strncmp+0x8>
 8007060:	1ad0      	subs	r0, r2, r3
 8007062:	bd10      	pop	{r4, pc}
 8007064:	4610      	mov	r0, r2
 8007066:	e7fc      	b.n	8007062 <strncmp+0x1e>

08007068 <__libc_init_array>:
 8007068:	b570      	push	{r4, r5, r6, lr}
 800706a:	4d0d      	ldr	r5, [pc, #52]	; (80070a0 <__libc_init_array+0x38>)
 800706c:	4c0d      	ldr	r4, [pc, #52]	; (80070a4 <__libc_init_array+0x3c>)
 800706e:	1b64      	subs	r4, r4, r5
 8007070:	10a4      	asrs	r4, r4, #2
 8007072:	2600      	movs	r6, #0
 8007074:	42a6      	cmp	r6, r4
 8007076:	d109      	bne.n	800708c <__libc_init_array+0x24>
 8007078:	4d0b      	ldr	r5, [pc, #44]	; (80070a8 <__libc_init_array+0x40>)
 800707a:	4c0c      	ldr	r4, [pc, #48]	; (80070ac <__libc_init_array+0x44>)
 800707c:	f000 f818 	bl	80070b0 <_init>
 8007080:	1b64      	subs	r4, r4, r5
 8007082:	10a4      	asrs	r4, r4, #2
 8007084:	2600      	movs	r6, #0
 8007086:	42a6      	cmp	r6, r4
 8007088:	d105      	bne.n	8007096 <__libc_init_array+0x2e>
 800708a:	bd70      	pop	{r4, r5, r6, pc}
 800708c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007090:	4798      	blx	r3
 8007092:	3601      	adds	r6, #1
 8007094:	e7ee      	b.n	8007074 <__libc_init_array+0xc>
 8007096:	f855 3b04 	ldr.w	r3, [r5], #4
 800709a:	4798      	blx	r3
 800709c:	3601      	adds	r6, #1
 800709e:	e7f2      	b.n	8007086 <__libc_init_array+0x1e>
 80070a0:	0800713c 	.word	0x0800713c
 80070a4:	0800713c 	.word	0x0800713c
 80070a8:	0800713c 	.word	0x0800713c
 80070ac:	08007140 	.word	0x08007140

080070b0 <_init>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	bf00      	nop
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr

080070bc <_fini>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	bf00      	nop
 80070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c2:	bc08      	pop	{r3}
 80070c4:	469e      	mov	lr, r3
 80070c6:	4770      	bx	lr
